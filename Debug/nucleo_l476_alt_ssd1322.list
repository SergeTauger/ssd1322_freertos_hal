
nucleo_l476_alt_ssd1322.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000131ac  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cb1c  0801cb1c  0003201c  2**0
                  CONTENTS
  4 .ARM          00000008  0801cb1c  0801cb1c  0002cb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cb24  0801cb24  0003201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cb24  0801cb24  0002cb24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cb28  0801cb28  0002cb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000201c  20000000  0801cb2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000124ac  2000201c  0801eb48  0003201c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144c8  0801eb48  000344c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003201c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6b5  00000000  00000000  0003204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa6  00000000  00000000  0004d701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  000511a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  000528b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bf6  00000000  00000000  00053e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c36e  00000000  00000000  0007ba8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001002ea  00000000  00000000  00097dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001980e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006218  00000000  00000000  00198138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000201c 	.word	0x2000201c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009958 	.word	0x08009958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002020 	.word	0x20002020
 80001cc:	08009958 	.word	0x08009958

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__gedf2>:
 800079c:	f04f 3cff 	mov.w	ip, #4294967295
 80007a0:	e006      	b.n	80007b0 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__ledf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	e002      	b.n	80007b0 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__cmpdf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007c6:	d01b      	beq.n	8000800 <__cmpdf2+0x54>
 80007c8:	b001      	add	sp, #4
 80007ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ce:	bf0c      	ite	eq
 80007d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007d4:	ea91 0f03 	teqne	r1, r3
 80007d8:	bf02      	ittt	eq
 80007da:	ea90 0f02 	teqeq	r0, r2
 80007de:	2000      	moveq	r0, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	f110 0f00 	cmn.w	r0, #0
 80007e6:	ea91 0f03 	teq	r1, r3
 80007ea:	bf58      	it	pl
 80007ec:	4299      	cmppl	r1, r3
 80007ee:	bf08      	it	eq
 80007f0:	4290      	cmpeq	r0, r2
 80007f2:	bf2c      	ite	cs
 80007f4:	17d8      	asrcs	r0, r3, #31
 80007f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007fa:	f040 0001 	orr.w	r0, r0, #1
 80007fe:	4770      	bx	lr
 8000800:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000808:	d102      	bne.n	8000810 <__cmpdf2+0x64>
 800080a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800080e:	d107      	bne.n	8000820 <__cmpdf2+0x74>
 8000810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000818:	d1d6      	bne.n	80007c8 <__cmpdf2+0x1c>
 800081a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800081e:	d0d3      	beq.n	80007c8 <__cmpdf2+0x1c>
 8000820:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__aeabi_cdrcmple>:
 8000828:	4684      	mov	ip, r0
 800082a:	4610      	mov	r0, r2
 800082c:	4662      	mov	r2, ip
 800082e:	468c      	mov	ip, r1
 8000830:	4619      	mov	r1, r3
 8000832:	4663      	mov	r3, ip
 8000834:	e000      	b.n	8000838 <__aeabi_cdcmpeq>
 8000836:	bf00      	nop

08000838 <__aeabi_cdcmpeq>:
 8000838:	b501      	push	{r0, lr}
 800083a:	f7ff ffb7 	bl	80007ac <__cmpdf2>
 800083e:	2800      	cmp	r0, #0
 8000840:	bf48      	it	mi
 8000842:	f110 0f00 	cmnmi.w	r0, #0
 8000846:	bd01      	pop	{r0, pc}

08000848 <__aeabi_dcmpeq>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff fff4 	bl	8000838 <__aeabi_cdcmpeq>
 8000850:	bf0c      	ite	eq
 8000852:	2001      	moveq	r0, #1
 8000854:	2000      	movne	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_dcmplt>:
 800085c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000860:	f7ff ffea 	bl	8000838 <__aeabi_cdcmpeq>
 8000864:	bf34      	ite	cc
 8000866:	2001      	movcc	r0, #1
 8000868:	2000      	movcs	r0, #0
 800086a:	f85d fb08 	ldr.w	pc, [sp], #8
 800086e:	bf00      	nop

08000870 <__aeabi_dcmple>:
 8000870:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000874:	f7ff ffe0 	bl	8000838 <__aeabi_cdcmpeq>
 8000878:	bf94      	ite	ls
 800087a:	2001      	movls	r0, #1
 800087c:	2000      	movhi	r0, #0
 800087e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000882:	bf00      	nop

08000884 <__aeabi_dcmpge>:
 8000884:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000888:	f7ff ffce 	bl	8000828 <__aeabi_cdrcmple>
 800088c:	bf94      	ite	ls
 800088e:	2001      	movls	r0, #1
 8000890:	2000      	movhi	r0, #0
 8000892:	f85d fb08 	ldr.w	pc, [sp], #8
 8000896:	bf00      	nop

08000898 <__aeabi_dcmpgt>:
 8000898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800089c:	f7ff ffc4 	bl	8000828 <__aeabi_cdrcmple>
 80008a0:	bf34      	ite	cc
 80008a2:	2001      	movcc	r0, #1
 80008a4:	2000      	movcs	r0, #0
 80008a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008aa:	bf00      	nop

080008ac <__aeabi_d2uiz>:
 80008ac:	004a      	lsls	r2, r1, #1
 80008ae:	d211      	bcs.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008b4:	d211      	bcs.n	80008da <__aeabi_d2uiz+0x2e>
 80008b6:	d50d      	bpl.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d40e      	bmi.n	80008e0 <__aeabi_d2uiz+0x34>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	fa23 f002 	lsr.w	r0, r3, r2
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d102      	bne.n	80008e6 <__aeabi_d2uiz+0x3a>
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	4770      	bx	lr
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	4770      	bx	lr

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_uldivmod>:
 800098c:	b953      	cbnz	r3, 80009a4 <__aeabi_uldivmod+0x18>
 800098e:	b94a      	cbnz	r2, 80009a4 <__aeabi_uldivmod+0x18>
 8000990:	2900      	cmp	r1, #0
 8000992:	bf08      	it	eq
 8000994:	2800      	cmpeq	r0, #0
 8000996:	bf1c      	itt	ne
 8000998:	f04f 31ff 	movne.w	r1, #4294967295
 800099c:	f04f 30ff 	movne.w	r0, #4294967295
 80009a0:	f000 b974 	b.w	8000c8c <__aeabi_idiv0>
 80009a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ac:	f000 f806 	bl	80009bc <__udivmoddi4>
 80009b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b8:	b004      	add	sp, #16
 80009ba:	4770      	bx	lr

080009bc <__udivmoddi4>:
 80009bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c0:	9d08      	ldr	r5, [sp, #32]
 80009c2:	4604      	mov	r4, r0
 80009c4:	468e      	mov	lr, r1
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d14d      	bne.n	8000a66 <__udivmoddi4+0xaa>
 80009ca:	428a      	cmp	r2, r1
 80009cc:	4694      	mov	ip, r2
 80009ce:	d969      	bls.n	8000aa4 <__udivmoddi4+0xe8>
 80009d0:	fab2 f282 	clz	r2, r2
 80009d4:	b152      	cbz	r2, 80009ec <__udivmoddi4+0x30>
 80009d6:	fa01 f302 	lsl.w	r3, r1, r2
 80009da:	f1c2 0120 	rsb	r1, r2, #32
 80009de:	fa20 f101 	lsr.w	r1, r0, r1
 80009e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e6:	ea41 0e03 	orr.w	lr, r1, r3
 80009ea:	4094      	lsls	r4, r2
 80009ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f0:	0c21      	lsrs	r1, r4, #16
 80009f2:	fbbe f6f8 	udiv	r6, lr, r8
 80009f6:	fa1f f78c 	uxth.w	r7, ip
 80009fa:	fb08 e316 	mls	r3, r8, r6, lr
 80009fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a02:	fb06 f107 	mul.w	r1, r6, r7
 8000a06:	4299      	cmp	r1, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x64>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a12:	f080 811f 	bcs.w	8000c54 <__udivmoddi4+0x298>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 811c 	bls.w	8000c54 <__udivmoddi4+0x298>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	4463      	add	r3, ip
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a28:	fb08 3310 	mls	r3, r8, r0, r3
 8000a2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a30:	fb00 f707 	mul.w	r7, r0, r7
 8000a34:	42a7      	cmp	r7, r4
 8000a36:	d90a      	bls.n	8000a4e <__udivmoddi4+0x92>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a40:	f080 810a 	bcs.w	8000c58 <__udivmoddi4+0x29c>
 8000a44:	42a7      	cmp	r7, r4
 8000a46:	f240 8107 	bls.w	8000c58 <__udivmoddi4+0x29c>
 8000a4a:	4464      	add	r4, ip
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a52:	1be4      	subs	r4, r4, r7
 8000a54:	2600      	movs	r6, #0
 8000a56:	b11d      	cbz	r5, 8000a60 <__udivmoddi4+0xa4>
 8000a58:	40d4      	lsrs	r4, r2
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a60:	4631      	mov	r1, r6
 8000a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d909      	bls.n	8000a7e <__udivmoddi4+0xc2>
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	f000 80ef 	beq.w	8000c4e <__udivmoddi4+0x292>
 8000a70:	2600      	movs	r6, #0
 8000a72:	e9c5 0100 	strd	r0, r1, [r5]
 8000a76:	4630      	mov	r0, r6
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	fab3 f683 	clz	r6, r3
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d14a      	bne.n	8000b1c <__udivmoddi4+0x160>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xd4>
 8000a8a:	4282      	cmp	r2, r0
 8000a8c:	f200 80f9 	bhi.w	8000c82 <__udivmoddi4+0x2c6>
 8000a90:	1a84      	subs	r4, r0, r2
 8000a92:	eb61 0303 	sbc.w	r3, r1, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	469e      	mov	lr, r3
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d0e0      	beq.n	8000a60 <__udivmoddi4+0xa4>
 8000a9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aa2:	e7dd      	b.n	8000a60 <__udivmoddi4+0xa4>
 8000aa4:	b902      	cbnz	r2, 8000aa8 <__udivmoddi4+0xec>
 8000aa6:	deff      	udf	#255	; 0xff
 8000aa8:	fab2 f282 	clz	r2, r2
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	f040 8092 	bne.w	8000bd6 <__udivmoddi4+0x21a>
 8000ab2:	eba1 010c 	sub.w	r1, r1, ip
 8000ab6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aba:	fa1f fe8c 	uxth.w	lr, ip
 8000abe:	2601      	movs	r6, #1
 8000ac0:	0c20      	lsrs	r0, r4, #16
 8000ac2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ac6:	fb07 1113 	mls	r1, r7, r3, r1
 8000aca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ace:	fb0e f003 	mul.w	r0, lr, r3
 8000ad2:	4288      	cmp	r0, r1
 8000ad4:	d908      	bls.n	8000ae8 <__udivmoddi4+0x12c>
 8000ad6:	eb1c 0101 	adds.w	r1, ip, r1
 8000ada:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0x12a>
 8000ae0:	4288      	cmp	r0, r1
 8000ae2:	f200 80cb 	bhi.w	8000c7c <__udivmoddi4+0x2c0>
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	1a09      	subs	r1, r1, r0
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af0:	fb07 1110 	mls	r1, r7, r0, r1
 8000af4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000af8:	fb0e fe00 	mul.w	lr, lr, r0
 8000afc:	45a6      	cmp	lr, r4
 8000afe:	d908      	bls.n	8000b12 <__udivmoddi4+0x156>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b08:	d202      	bcs.n	8000b10 <__udivmoddi4+0x154>
 8000b0a:	45a6      	cmp	lr, r4
 8000b0c:	f200 80bb 	bhi.w	8000c86 <__udivmoddi4+0x2ca>
 8000b10:	4608      	mov	r0, r1
 8000b12:	eba4 040e 	sub.w	r4, r4, lr
 8000b16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b1a:	e79c      	b.n	8000a56 <__udivmoddi4+0x9a>
 8000b1c:	f1c6 0720 	rsb	r7, r6, #32
 8000b20:	40b3      	lsls	r3, r6
 8000b22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b32:	431c      	orrs	r4, r3
 8000b34:	40f9      	lsrs	r1, r7
 8000b36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b42:	0c20      	lsrs	r0, r4, #16
 8000b44:	fa1f fe8c 	uxth.w	lr, ip
 8000b48:	fb09 1118 	mls	r1, r9, r8, r1
 8000b4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b50:	fb08 f00e 	mul.w	r0, r8, lr
 8000b54:	4288      	cmp	r0, r1
 8000b56:	fa02 f206 	lsl.w	r2, r2, r6
 8000b5a:	d90b      	bls.n	8000b74 <__udivmoddi4+0x1b8>
 8000b5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b64:	f080 8088 	bcs.w	8000c78 <__udivmoddi4+0x2bc>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f240 8085 	bls.w	8000c78 <__udivmoddi4+0x2bc>
 8000b6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	1a09      	subs	r1, r1, r0
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b88:	458e      	cmp	lr, r1
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x1e2>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b94:	d26c      	bcs.n	8000c70 <__udivmoddi4+0x2b4>
 8000b96:	458e      	cmp	lr, r1
 8000b98:	d96a      	bls.n	8000c70 <__udivmoddi4+0x2b4>
 8000b9a:	3802      	subs	r0, #2
 8000b9c:	4461      	add	r1, ip
 8000b9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ba2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ba6:	eba1 010e 	sub.w	r1, r1, lr
 8000baa:	42a1      	cmp	r1, r4
 8000bac:	46c8      	mov	r8, r9
 8000bae:	46a6      	mov	lr, r4
 8000bb0:	d356      	bcc.n	8000c60 <__udivmoddi4+0x2a4>
 8000bb2:	d053      	beq.n	8000c5c <__udivmoddi4+0x2a0>
 8000bb4:	b15d      	cbz	r5, 8000bce <__udivmoddi4+0x212>
 8000bb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bba:	eb61 010e 	sbc.w	r1, r1, lr
 8000bbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000bc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bc6:	40f1      	lsrs	r1, r6
 8000bc8:	431f      	orrs	r7, r3
 8000bca:	e9c5 7100 	strd	r7, r1, [r5]
 8000bce:	2600      	movs	r6, #0
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	f1c2 0320 	rsb	r3, r2, #32
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	fa21 f303 	lsr.w	r3, r1, r3
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4301      	orrs	r1, r0
 8000be8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bec:	fa1f fe8c 	uxth.w	lr, ip
 8000bf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000bf8:	0c0b      	lsrs	r3, r1, #16
 8000bfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000c02:	429e      	cmp	r6, r3
 8000c04:	fa04 f402 	lsl.w	r4, r4, r2
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x260>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c12:	d22f      	bcs.n	8000c74 <__udivmoddi4+0x2b8>
 8000c14:	429e      	cmp	r6, r3
 8000c16:	d92d      	bls.n	8000c74 <__udivmoddi4+0x2b8>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	b289      	uxth	r1, r1
 8000c20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c24:	fb07 3316 	mls	r3, r7, r6, r3
 8000c28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x28a>
 8000c34:	eb1c 0101 	adds.w	r1, ip, r1
 8000c38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c3c:	d216      	bcs.n	8000c6c <__udivmoddi4+0x2b0>
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d914      	bls.n	8000c6c <__udivmoddi4+0x2b0>
 8000c42:	3e02      	subs	r6, #2
 8000c44:	4461      	add	r1, ip
 8000c46:	1ac9      	subs	r1, r1, r3
 8000c48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c4c:	e738      	b.n	8000ac0 <__udivmoddi4+0x104>
 8000c4e:	462e      	mov	r6, r5
 8000c50:	4628      	mov	r0, r5
 8000c52:	e705      	b.n	8000a60 <__udivmoddi4+0xa4>
 8000c54:	4606      	mov	r6, r0
 8000c56:	e6e3      	b.n	8000a20 <__udivmoddi4+0x64>
 8000c58:	4618      	mov	r0, r3
 8000c5a:	e6f8      	b.n	8000a4e <__udivmoddi4+0x92>
 8000c5c:	454b      	cmp	r3, r9
 8000c5e:	d2a9      	bcs.n	8000bb4 <__udivmoddi4+0x1f8>
 8000c60:	ebb9 0802 	subs.w	r8, r9, r2
 8000c64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c68:	3801      	subs	r0, #1
 8000c6a:	e7a3      	b.n	8000bb4 <__udivmoddi4+0x1f8>
 8000c6c:	4646      	mov	r6, r8
 8000c6e:	e7ea      	b.n	8000c46 <__udivmoddi4+0x28a>
 8000c70:	4620      	mov	r0, r4
 8000c72:	e794      	b.n	8000b9e <__udivmoddi4+0x1e2>
 8000c74:	4640      	mov	r0, r8
 8000c76:	e7d1      	b.n	8000c1c <__udivmoddi4+0x260>
 8000c78:	46d0      	mov	r8, sl
 8000c7a:	e77b      	b.n	8000b74 <__udivmoddi4+0x1b8>
 8000c7c:	3b02      	subs	r3, #2
 8000c7e:	4461      	add	r1, ip
 8000c80:	e732      	b.n	8000ae8 <__udivmoddi4+0x12c>
 8000c82:	4630      	mov	r0, r6
 8000c84:	e709      	b.n	8000a9a <__udivmoddi4+0xde>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	e742      	b.n	8000b12 <__udivmoddi4+0x156>

08000c8c <__aeabi_idiv0>:
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <vApplicationGetTimerTaskMemory>:
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize );
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <vApplicationGetTimerTaskMemory+0x2c>)
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <vApplicationGetTimerTaskMemory+0x30>)
 8000ca6:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	20002038 	.word	0x20002038
 8000cc0:	2000208c 	.word	0x2000208c

08000cc4 <vApplicationGetIdleTaskMemory>:
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize );
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cd4:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <vApplicationGetIdleTaskMemory+0x30>)
 8000cda:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	2000248c 	.word	0x2000248c
 8000cf4:	200024e0 	.word	0x200024e0

08000cf8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f103 0208 	add.w	r2, r3, #8
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f103 0208 	add.w	r2, r3, #8
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f103 0208 	add.w	r2, r3, #8
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000d52:	b480      	push	{r7}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d103      	bne.n	8000d72 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e00c      	b.n	8000d8c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3308      	adds	r3, #8
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e002      	b.n	8000d80 <vListInsert+0x2e>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d2f6      	bcs.n	8000d7a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6892      	ldr	r2, [r2, #8]
 8000dda:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	6852      	ldr	r2, [r2, #4]
 8000de4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d103      	bne.n	8000df8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10a      	bne.n	8000e46 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000e30:	f04f 0340 	mov.w	r3, #64	; 0x40
 8000e34:	f383 8811 	msr	BASEPRI, r3
 8000e38:	f3bf 8f6f 	isb	sy
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000e42:	bf00      	nop
 8000e44:	e7fe      	b.n	8000e44 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d05d      	beq.n	8000f08 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d059      	beq.n	8000f08 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d000      	beq.n	8000e68 <xQueueGenericReset+0x50>
 8000e66:	2101      	movs	r1, #1
 8000e68:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d14c      	bne.n	8000f08 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000e6e:	f002 fc93 	bl	8003798 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e7a:	6939      	ldr	r1, [r7, #16]
 8000e7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	441a      	add	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6939      	ldr	r1, [r7, #16]
 8000ea2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ea4:	fb01 f303 	mul.w	r3, r1, r3
 8000ea8:	441a      	add	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	22ff      	movs	r2, #255	; 0xff
 8000eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	22ff      	movs	r2, #255	; 0xff
 8000eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d114      	bne.n	8000eee <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d01a      	beq.n	8000f02 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	3310      	adds	r3, #16
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fa7f 	bl	80023d4 <xTaskRemoveFromEventList>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d012      	beq.n	8000f02 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <xQueueGenericReset+0x11c>)
 8000ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	f3bf 8f4f 	dsb	sy
 8000ee8:	f3bf 8f6f 	isb	sy
 8000eec:	e009      	b.n	8000f02 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	3310      	adds	r3, #16
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff00 	bl	8000cf8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	3324      	adds	r3, #36	; 0x24
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fefb 	bl	8000cf8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000f02:	f002 fc79 	bl	80037f8 <vPortExitCritical>
 8000f06:	e001      	b.n	8000f0c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <xQueueGenericReset+0x110>
        __asm volatile
 8000f12:	f04f 0340 	mov.w	r3, #64	; 0x40
 8000f16:	f383 8811 	msr	BASEPRI, r3
 8000f1a:	f3bf 8f6f 	isb	sy
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	60bb      	str	r3, [r7, #8]
    }
 8000f24:	bf00      	nop
 8000f26:	e7fe      	b.n	8000f26 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000f28:	697b      	ldr	r3, [r7, #20]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000ed04 	.word	0xe000ed04

08000f38 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10a      	bne.n	8000f66 <xQueueGenericCreateStatic+0x2e>
        __asm volatile
 8000f50:	f04f 0340 	mov.w	r3, #64	; 0x40
 8000f54:	f383 8811 	msr	BASEPRI, r3
 8000f58:	f3bf 8f6f 	isb	sy
 8000f5c:	f3bf 8f4f 	dsb	sy
 8000f60:	623b      	str	r3, [r7, #32]
    }
 8000f62:	bf00      	nop
 8000f64:	e7fe      	b.n	8000f64 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d030      	beq.n	8000fce <xQueueGenericCreateStatic+0x96>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d02d      	beq.n	8000fce <xQueueGenericCreateStatic+0x96>
            ( pxStaticQueue != NULL ) &&
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <xQueueGenericCreateStatic+0x46>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d027      	beq.n	8000fce <xQueueGenericCreateStatic+0x96>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <xQueueGenericCreateStatic+0x52>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d121      	bne.n	8000fce <xQueueGenericCreateStatic+0x96>
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                     * the real queue and semaphore structures. */
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8000f8a:	2348      	movs	r3, #72	; 0x48
 8000f8c:	617b      	str	r3, [r7, #20]

                    /* This assertion cannot be branch covered in unit tests */
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b48      	cmp	r3, #72	; 0x48
 8000f92:	d00a      	beq.n	8000faa <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8000f94:	f04f 0340 	mov.w	r3, #64	; 0x40
 8000f98:	f383 8811 	msr	BASEPRI, r3
 8000f9c:	f3bf 8f6f 	isb	sy
 8000fa0:	f3bf 8f4f 	dsb	sy
 8000fa4:	61fb      	str	r3, [r7, #28]
    }
 8000fa6:	bf00      	nop
 8000fa8:	e7fe      	b.n	8000fa8 <xQueueGenericCreateStatic+0x70>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8000faa:	697b      	ldr	r3, [r7, #20]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000fb8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 f866 	bl	8001098 <prvInitialiseNewQueue>
 8000fcc:	e00d      	b.n	8000fea <xQueueGenericCreateStatic+0xb2>
        }
        else
        {
            configASSERT( pxNewQueue );
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10a      	bne.n	8000fea <xQueueGenericCreateStatic+0xb2>
        __asm volatile
 8000fd4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8000fd8:	f383 8811 	msr	BASEPRI, r3
 8000fdc:	f3bf 8f6f 	isb	sy
 8000fe0:	f3bf 8f4f 	dsb	sy
 8000fe4:	61bb      	str	r3, [r7, #24]
    }
 8000fe6:	bf00      	nop
 8000fe8:	e7fe      	b.n	8000fe8 <xQueueGenericCreateStatic+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000fec:	4618      	mov	r0, r3
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d032      	beq.n	8001072 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800100c:	2100      	movs	r1, #0
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	fba3 2302 	umull	r2, r3, r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d000      	beq.n	800101c <xQueueGenericCreate+0x28>
 800101a:	2101      	movs	r1, #1
 800101c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800101e:	2b00      	cmp	r3, #0
 8001020:	d127      	bne.n	8001072 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800102a:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800102e:	d820      	bhi.n	8001072 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	fb02 f303 	mul.w	r3, r2, r3
 8001038:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	3348      	adds	r3, #72	; 0x48
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fcc2 	bl	80039c8 <pvPortMalloc>
 8001044:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <xQueueGenericCreate+0x9a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3348      	adds	r3, #72	; 0x48
 8001054:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                    {
                        /* Queues can be created either statically or dynamically, so
                         * note this task was created dynamically in case it is later
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	4613      	mov	r3, r2
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 f814 	bl	8001098 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001070:	e00d      	b.n	800108e <xQueueGenericCreate+0x9a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10a      	bne.n	800108e <xQueueGenericCreate+0x9a>
        __asm volatile
 8001078:	f04f 0340 	mov.w	r3, #64	; 0x40
 800107c:	f383 8811 	msr	BASEPRI, r3
 8001080:	f3bf 8f6f 	isb	sy
 8001084:	f3bf 8f4f 	dsb	sy
 8001088:	613b      	str	r3, [r7, #16]
    }
 800108a:	bf00      	nop
 800108c:	e7fe      	b.n	800108c <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800108e:	69fb      	ldr	r3, [r7, #28]
    }
 8001090:	4618      	mov	r0, r3
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e002      	b.n	80010ba <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80010c6:	2101      	movs	r1, #1
 80010c8:	69b8      	ldr	r0, [r7, #24]
 80010ca:	f7ff fea5 	bl	8000e18 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08e      	sub	sp, #56	; 0x38
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80010ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10a      	bne.n	800110a <xQueueGenericSend+0x32>
        __asm volatile
 80010f4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80010f8:	f383 8811 	msr	BASEPRI, r3
 80010fc:	f3bf 8f6f 	isb	sy
 8001100:	f3bf 8f4f 	dsb	sy
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001106:	bf00      	nop
 8001108:	e7fe      	b.n	8001108 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <xQueueGenericSend+0x40>
 8001110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <xQueueGenericSend+0x44>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <xQueueGenericSend+0x46>
 800111c:	2300      	movs	r3, #0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10a      	bne.n	8001138 <xQueueGenericSend+0x60>
        __asm volatile
 8001122:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001126:	f383 8811 	msr	BASEPRI, r3
 800112a:	f3bf 8f6f 	isb	sy
 800112e:	f3bf 8f4f 	dsb	sy
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001134:	bf00      	nop
 8001136:	e7fe      	b.n	8001136 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d103      	bne.n	8001146 <xQueueGenericSend+0x6e>
 800113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001142:	2b01      	cmp	r3, #1
 8001144:	d101      	bne.n	800114a <xQueueGenericSend+0x72>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <xQueueGenericSend+0x74>
 800114a:	2300      	movs	r3, #0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10a      	bne.n	8001166 <xQueueGenericSend+0x8e>
        __asm volatile
 8001150:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001154:	f383 8811 	msr	BASEPRI, r3
 8001158:	f3bf 8f6f 	isb	sy
 800115c:	f3bf 8f4f 	dsb	sy
 8001160:	623b      	str	r3, [r7, #32]
    }
 8001162:	bf00      	nop
 8001164:	e7fe      	b.n	8001164 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001166:	f001 fb65 	bl	8002834 <xTaskGetSchedulerState>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <xQueueGenericSend+0x9e>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <xQueueGenericSend+0xa2>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <xQueueGenericSend+0xa4>
 800117a:	2300      	movs	r3, #0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10a      	bne.n	8001196 <xQueueGenericSend+0xbe>
        __asm volatile
 8001180:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001184:	f383 8811 	msr	BASEPRI, r3
 8001188:	f3bf 8f6f 	isb	sy
 800118c:	f3bf 8f4f 	dsb	sy
 8001190:	61fb      	str	r3, [r7, #28]
    }
 8001192:	bf00      	nop
 8001194:	e7fe      	b.n	8001194 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001196:	f002 faff 	bl	8003798 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800119a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800119e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d302      	bcc.n	80011ac <xQueueGenericSend+0xd4>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d129      	bne.n	8001200 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011b2:	f000 fa19 	bl	80015e8 <prvCopyDataToQueue>
 80011b6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d010      	beq.n	80011e2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c2:	3324      	adds	r3, #36	; 0x24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 f905 	bl	80023d4 <xTaskRemoveFromEventList>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80011d0:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <xQueueGenericSend+0x1f8>)
 80011d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	f3bf 8f4f 	dsb	sy
 80011dc:	f3bf 8f6f 	isb	sy
 80011e0:	e00a      	b.n	80011f8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d007      	beq.n	80011f8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80011e8:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <xQueueGenericSend+0x1f8>)
 80011ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	f3bf 8f4f 	dsb	sy
 80011f4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80011f8:	f002 fafe 	bl	80037f8 <vPortExitCritical>
                return pdPASS;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e063      	b.n	80012c8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001206:	f002 faf7 	bl	80037f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800120a:	2300      	movs	r3, #0
 800120c:	e05c      	b.n	80012c8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800120e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001210:	2b00      	cmp	r3, #0
 8001212:	d106      	bne.n	8001222 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4618      	mov	r0, r3
 800121a:	f001 f9b1 	bl	8002580 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800121e:	2301      	movs	r3, #1
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001222:	f002 fae9 	bl	80037f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001226:	f000 fddf 	bl	8001de8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800122a:	f002 fab5 	bl	8003798 <vPortEnterCritical>
 800122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001234:	b25b      	sxtb	r3, r3
 8001236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123a:	d103      	bne.n	8001244 <xQueueGenericSend+0x16c>
 800123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800124a:	b25b      	sxtb	r3, r3
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d103      	bne.n	800125a <xQueueGenericSend+0x182>
 8001252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800125a:	f002 facd 	bl	80037f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800125e:	1d3a      	adds	r2, r7, #4
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f001 f9a0 	bl	80025ac <xTaskCheckForTimeOut>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d124      	bne.n	80012bc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001274:	f000 fab0 	bl	80017d8 <prvIsQueueFull>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d018      	beq.n	80012b0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001280:	3310      	adds	r3, #16
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f001 f83a 	bl	8002300 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800128c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800128e:	f000 fa3b 	bl	8001708 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001292:	f000 fdb7 	bl	8001e04 <xTaskResumeAll>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	f47f af7c 	bne.w	8001196 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <xQueueGenericSend+0x1f8>)
 80012a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	f3bf 8f4f 	dsb	sy
 80012aa:	f3bf 8f6f 	isb	sy
 80012ae:	e772      	b.n	8001196 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80012b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012b2:	f000 fa29 	bl	8001708 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80012b6:	f000 fda5 	bl	8001e04 <xTaskResumeAll>
 80012ba:	e76c      	b.n	8001196 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80012bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012be:	f000 fa23 	bl	8001708 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80012c2:	f000 fd9f 	bl	8001e04 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80012c6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3738      	adds	r7, #56	; 0x38
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	e000ed04 	.word	0xe000ed04

080012d4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b090      	sub	sp, #64	; 0x40
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80012e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10a      	bne.n	8001302 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80012ec:	f04f 0340 	mov.w	r3, #64	; 0x40
 80012f0:	f383 8811 	msr	BASEPRI, r3
 80012f4:	f3bf 8f6f 	isb	sy
 80012f8:	f3bf 8f4f 	dsb	sy
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80012fe:	bf00      	nop
 8001300:	e7fe      	b.n	8001300 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <xQueueGenericSendFromISR+0x3c>
 8001308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <xQueueGenericSendFromISR+0x40>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <xQueueGenericSendFromISR+0x42>
 8001314:	2300      	movs	r3, #0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10a      	bne.n	8001330 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800131a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800131e:	f383 8811 	msr	BASEPRI, r3
 8001322:	f3bf 8f6f 	isb	sy
 8001326:	f3bf 8f4f 	dsb	sy
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800132c:	bf00      	nop
 800132e:	e7fe      	b.n	800132e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d103      	bne.n	800133e <xQueueGenericSendFromISR+0x6a>
 8001336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <xQueueGenericSendFromISR+0x6e>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <xQueueGenericSendFromISR+0x70>
 8001342:	2300      	movs	r3, #0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10a      	bne.n	800135e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001348:	f04f 0340 	mov.w	r3, #64	; 0x40
 800134c:	f383 8811 	msr	BASEPRI, r3
 8001350:	f3bf 8f6f 	isb	sy
 8001354:	f3bf 8f4f 	dsb	sy
 8001358:	623b      	str	r3, [r7, #32]
    }
 800135a:	bf00      	nop
 800135c:	e7fe      	b.n	800135c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800135e:	f002 faf3 	bl	8003948 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001362:	f3ef 8211 	mrs	r2, BASEPRI
 8001366:	f04f 0340 	mov.w	r3, #64	; 0x40
 800136a:	f383 8811 	msr	BASEPRI, r3
 800136e:	f3bf 8f6f 	isb	sy
 8001372:	f3bf 8f4f 	dsb	sy
 8001376:	61fa      	str	r2, [r7, #28]
 8001378:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800137a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800137e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	429a      	cmp	r2, r3
 8001388:	d302      	bcc.n	8001390 <xQueueGenericSendFromISR+0xbc>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d13e      	bne.n	800140e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013a6:	f000 f91f 	bl	80015e8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80013aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80013ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b2:	d112      	bne.n	80013da <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d025      	beq.n	8001408 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013be:	3324      	adds	r3, #36	; 0x24
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 f807 	bl	80023d4 <xTaskRemoveFromEventList>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01d      	beq.n	8001408 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d01a      	beq.n	8001408 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e016      	b.n	8001408 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80013da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	d10a      	bne.n	80013f8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80013e2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80013e6:	f383 8811 	msr	BASEPRI, r3
 80013ea:	f3bf 8f6f 	isb	sy
 80013ee:	f3bf 8f4f 	dsb	sy
 80013f2:	617b      	str	r3, [r7, #20]
    }
 80013f4:	bf00      	nop
 80013f6:	e7fe      	b.n	80013f6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80013f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	b25a      	sxtb	r2, r3
 8001402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001408:	2301      	movs	r3, #1
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800140c:	e001      	b.n	8001412 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800140e:	2300      	movs	r3, #0
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001414:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800141c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800141e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001420:	4618      	mov	r0, r3
 8001422:	3740      	adds	r7, #64	; 0x40
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10a      	bne.n	8001458 <xQueueReceive+0x30>
        __asm volatile
 8001442:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001446:	f383 8811 	msr	BASEPRI, r3
 800144a:	f3bf 8f6f 	isb	sy
 800144e:	f3bf 8f4f 	dsb	sy
 8001452:	623b      	str	r3, [r7, #32]
    }
 8001454:	bf00      	nop
 8001456:	e7fe      	b.n	8001456 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <xQueueReceive+0x3e>
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <xQueueReceive+0x42>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <xQueueReceive+0x44>
 800146a:	2300      	movs	r3, #0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10a      	bne.n	8001486 <xQueueReceive+0x5e>
        __asm volatile
 8001470:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001474:	f383 8811 	msr	BASEPRI, r3
 8001478:	f3bf 8f6f 	isb	sy
 800147c:	f3bf 8f4f 	dsb	sy
 8001480:	61fb      	str	r3, [r7, #28]
    }
 8001482:	bf00      	nop
 8001484:	e7fe      	b.n	8001484 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001486:	f001 f9d5 	bl	8002834 <xTaskGetSchedulerState>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <xQueueReceive+0x6e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <xQueueReceive+0x72>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <xQueueReceive+0x74>
 800149a:	2300      	movs	r3, #0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10a      	bne.n	80014b6 <xQueueReceive+0x8e>
        __asm volatile
 80014a0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80014a4:	f383 8811 	msr	BASEPRI, r3
 80014a8:	f3bf 8f6f 	isb	sy
 80014ac:	f3bf 8f4f 	dsb	sy
 80014b0:	61bb      	str	r3, [r7, #24]
    }
 80014b2:	bf00      	nop
 80014b4:	e7fe      	b.n	80014b4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80014b6:	f002 f96f 	bl	8003798 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014be:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d01f      	beq.n	8001506 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014ca:	f000 f8f7 	bl	80016bc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	1e5a      	subs	r2, r3, #1
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00f      	beq.n	80014fe <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	3310      	adds	r3, #16
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 ff76 	bl	80023d4 <xTaskRemoveFromEventList>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80014ee:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <xQueueReceive+0x1bc>)
 80014f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f3bf 8f4f 	dsb	sy
 80014fa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80014fe:	f002 f97b 	bl	80037f8 <vPortExitCritical>
                return pdPASS;
 8001502:	2301      	movs	r3, #1
 8001504:	e069      	b.n	80015da <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800150c:	f002 f974 	bl	80037f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001510:	2300      	movs	r3, #0
 8001512:	e062      	b.n	80015da <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4618      	mov	r0, r3
 8001520:	f001 f82e 	bl	8002580 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001524:	2301      	movs	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001528:	f002 f966 	bl	80037f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800152c:	f000 fc5c 	bl	8001de8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001530:	f002 f932 	bl	8003798 <vPortEnterCritical>
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800153a:	b25b      	sxtb	r3, r3
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d103      	bne.n	800154a <xQueueReceive+0x122>
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001550:	b25b      	sxtb	r3, r3
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001556:	d103      	bne.n	8001560 <xQueueReceive+0x138>
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001560:	f002 f94a 	bl	80037f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001564:	1d3a      	adds	r2, r7, #4
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f001 f81d 	bl	80025ac <xTaskCheckForTimeOut>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d123      	bne.n	80015c0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800157a:	f000 f917 	bl	80017ac <prvIsQueueEmpty>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d017      	beq.n	80015b4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001586:	3324      	adds	r3, #36	; 0x24
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f000 feb7 	bl	8002300 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001594:	f000 f8b8 	bl	8001708 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001598:	f000 fc34 	bl	8001e04 <xTaskResumeAll>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d189      	bne.n	80014b6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <xQueueReceive+0x1bc>)
 80015a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f3bf 8f4f 	dsb	sy
 80015ae:	f3bf 8f6f 	isb	sy
 80015b2:	e780      	b.n	80014b6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80015b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015b6:	f000 f8a7 	bl	8001708 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80015ba:	f000 fc23 	bl	8001e04 <xTaskResumeAll>
 80015be:	e77a      	b.n	80014b6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80015c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015c2:	f000 f8a1 	bl	8001708 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80015c6:	f000 fc1d 	bl	8001e04 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015cc:	f000 f8ee 	bl	80017ac <prvIsQueueEmpty>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f43f af6f 	beq.w	80014b6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80015d8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3730      	adds	r7, #48	; 0x30
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000ed04 	.word	0xe000ed04

080015e8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10d      	bne.n	8001622 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d14d      	bne.n	80016aa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f92c 	bl	8002870 <xTaskPriorityDisinherit>
 8001618:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	e043      	b.n	80016aa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d119      	bne.n	800165c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6858      	ldr	r0, [r3, #4]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	461a      	mov	r2, r3
 8001632:	68b9      	ldr	r1, [r7, #8]
 8001634:	f008 f8f8 	bl	8009828 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	441a      	add	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	429a      	cmp	r2, r3
 8001650:	d32b      	bcc.n	80016aa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	e026      	b.n	80016aa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	68d8      	ldr	r0, [r3, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	461a      	mov	r2, r3
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	f008 f8de 	bl	8009828 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	425b      	negs	r3, r3
 8001676:	441a      	add	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	425b      	negs	r3, r3
 8001692:	441a      	add	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d105      	bne.n	80016aa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80016b2:	697b      	ldr	r3, [r7, #20]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d018      	beq.n	8001700 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	441a      	add	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d303      	bcc.n	80016f0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68d9      	ldr	r1, [r3, #12]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	461a      	mov	r2, r3
 80016fa:	6838      	ldr	r0, [r7, #0]
 80016fc:	f008 f894 	bl	8009828 <memcpy>
    }
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001710:	f002 f842 	bl	8003798 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800171a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800171c:	e011      	b.n	8001742 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	2b00      	cmp	r3, #0
 8001724:	d012      	beq.n	800174c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3324      	adds	r3, #36	; 0x24
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fe52 	bl	80023d4 <xTaskRemoveFromEventList>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001736:	f000 ff9f 	bl	8002678 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	3b01      	subs	r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	2b00      	cmp	r3, #0
 8001748:	dce9      	bgt.n	800171e <prvUnlockQueue+0x16>
 800174a:	e000      	b.n	800174e <prvUnlockQueue+0x46>
                        break;
 800174c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	22ff      	movs	r2, #255	; 0xff
 8001752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001756:	f002 f84f 	bl	80037f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800175a:	f002 f81d 	bl	8003798 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001764:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001766:	e011      	b.n	800178c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d012      	beq.n	8001796 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3310      	adds	r3, #16
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fe2d 	bl	80023d4 <xTaskRemoveFromEventList>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001780:	f000 ff7a 	bl	8002678 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001784:	7bbb      	ldrb	r3, [r7, #14]
 8001786:	3b01      	subs	r3, #1
 8001788:	b2db      	uxtb	r3, r3
 800178a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800178c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001790:	2b00      	cmp	r3, #0
 8001792:	dce9      	bgt.n	8001768 <prvUnlockQueue+0x60>
 8001794:	e000      	b.n	8001798 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001796:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	22ff      	movs	r2, #255	; 0xff
 800179c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80017a0:	f002 f82a 	bl	80037f8 <vPortExitCritical>
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80017b4:	f001 fff0 	bl	8003798 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e001      	b.n	80017ca <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80017ca:	f002 f815 	bl	80037f8 <vPortExitCritical>

    return xReturn;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80017e0:	f001 ffda 	bl	8003798 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d102      	bne.n	80017f6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80017f0:	2301      	movs	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e001      	b.n	80017fa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80017fa:	f001 fffd 	bl	80037f8 <vPortExitCritical>

    return xReturn;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10a      	bne.n	800182e <vQueueAddToRegistry+0x26>
        __asm volatile
 8001818:	f04f 0340 	mov.w	r3, #64	; 0x40
 800181c:	f383 8811 	msr	BASEPRI, r3
 8001820:	f3bf 8f6f 	isb	sy
 8001824:	f3bf 8f4f 	dsb	sy
 8001828:	60fb      	str	r3, [r7, #12]
    }
 800182a:	bf00      	nop
 800182c:	e7fe      	b.n	800182c <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d024      	beq.n	8001882 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e01e      	b.n	800187c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <vQueueAddToRegistry+0x98>)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	d105      	bne.n	800185a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <vQueueAddToRegistry+0x98>)
 8001854:	4413      	add	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
                    break;
 8001858:	e013      	b.n	8001882 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10a      	bne.n	8001876 <vQueueAddToRegistry+0x6e>
 8001860:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <vQueueAddToRegistry+0x98>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d104      	bne.n	8001876 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <vQueueAddToRegistry+0x98>)
 8001872:	4413      	add	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b07      	cmp	r3, #7
 8001880:	d9dd      	bls.n	800183e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001894:	bf00      	nop
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	200028e0 	.word	0x200028e0

080018a4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80018b4:	f001 ff70 	bl	8003798 <vPortEnterCritical>
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d103      	bne.n	80018ce <vQueueWaitForMessageRestricted+0x2a>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018da:	d103      	bne.n	80018e4 <vQueueWaitForMessageRestricted+0x40>
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018e4:	f001 ff88 	bl	80037f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d106      	bne.n	80018fe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3324      	adds	r3, #36	; 0x24
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fd25 	bl	8002348 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff02 	bl	8001708 <prvUnlockQueue>
    }
 8001904:	bf00      	nop
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	; 0x38
 8001910:	af04      	add	r7, sp, #16
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800191a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <xTaskCreateStatic+0x2a>
        __asm volatile
 8001920:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	f3bf 8f6f 	isb	sy
 800192c:	f3bf 8f4f 	dsb	sy
 8001930:	623b      	str	r3, [r7, #32]
    }
 8001932:	bf00      	nop
 8001934:	e7fe      	b.n	8001934 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8001936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <xTaskCreateStatic+0x46>
        __asm volatile
 800193c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001940:	f383 8811 	msr	BASEPRI, r3
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	61fb      	str	r3, [r7, #28]
    }
 800194e:	bf00      	nop
 8001950:	e7fe      	b.n	8001950 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 8001952:	2354      	movs	r3, #84	; 0x54
 8001954:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2b54      	cmp	r3, #84	; 0x54
 800195a:	d00a      	beq.n	8001972 <xTaskCreateStatic+0x66>
        __asm volatile
 800195c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001960:	f383 8811 	msr	BASEPRI, r3
 8001964:	f3bf 8f6f 	isb	sy
 8001968:	f3bf 8f4f 	dsb	sy
 800196c:	61bb      	str	r3, [r7, #24]
    }
 800196e:	bf00      	nop
 8001970:	e7fe      	b.n	8001970 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001972:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01e      	beq.n	80019b8 <xTaskCreateStatic+0xac>
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01b      	beq.n	80019b8 <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001988:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001992:	2300      	movs	r3, #0
 8001994:	9303      	str	r3, [sp, #12]
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f850 	bl	8001a50 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80019b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019b2:	f000 f8e9 	bl	8001b88 <prvAddNewTaskToReadyList>
 80019b6:	e001      	b.n	80019bc <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 80019bc:	697b      	ldr	r3, [r7, #20]
    }
 80019be:	4618      	mov	r0, r3
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b08c      	sub	sp, #48	; 0x30
 80019ca:	af04      	add	r7, sp, #16
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4618      	mov	r0, r3
 80019dc:	f001 fff4 	bl	80039c8 <pvPortMalloc>
 80019e0:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80019e8:	2054      	movs	r0, #84	; 0x54
 80019ea:	f001 ffed 	bl	80039c8 <pvPortMalloc>
 80019ee:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
 80019fc:	e005      	b.n	8001a0a <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f002 f8c2 	bl	8003b88 <vPortFree>
 8001a04:	e001      	b.n	8001a0a <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d017      	beq.n	8001a40 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	9303      	str	r3, [sp, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f80e 	bl	8001a50 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001a34:	69f8      	ldr	r0, [r7, #28]
 8001a36:	f000 f8a7 	bl	8001b88 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	e002      	b.n	8001a46 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001a46:	69bb      	ldr	r3, [r7, #24]
    }
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f023 0307 	bic.w	r3, r3, #7
 8001a76:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00a      	beq.n	8001a98 <prvInitialiseNewTask+0x48>
        __asm volatile
 8001a82:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a86:	f383 8811 	msr	BASEPRI, r3
 8001a8a:	f3bf 8f6f 	isb	sy
 8001a8e:	f3bf 8f4f 	dsb	sy
 8001a92:	617b      	str	r3, [r7, #20]
    }
 8001a94:	bf00      	nop
 8001a96:	e7fe      	b.n	8001a96 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01f      	beq.n	8001ade <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e012      	b.n	8001aca <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	7819      	ldrb	r1, [r3, #0]
 8001aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3334      	adds	r3, #52	; 0x34
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	4413      	add	r3, r2
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d9e9      	bls.n	8001aa4 <prvInitialiseNewTask+0x54>
 8001ad0:	e000      	b.n	8001ad4 <prvInitialiseNewTask+0x84>
            {
                break;
 8001ad2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001adc:	e003      	b.n	8001ae6 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d90a      	bls.n	8001b02 <prvInitialiseNewTask+0xb2>
        __asm volatile
 8001aec:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001af0:	f383 8811 	msr	BASEPRI, r3
 8001af4:	f3bf 8f6f 	isb	sy
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	613b      	str	r3, [r7, #16]
    }
 8001afe:	bf00      	nop
 8001b00:	e7fe      	b.n	8001b00 <prvInitialiseNewTask+0xb0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	2b06      	cmp	r3, #6
 8001b06:	d901      	bls.n	8001b0c <prvInitialiseNewTask+0xbc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b08:	2306      	movs	r3, #6
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b20:	3304      	adds	r3, #4
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f908 	bl	8000d38 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	3318      	adds	r3, #24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff f903 	bl	8000d38 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b36:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	f1c3 0207 	rsb	r2, r3, #7
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b40:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4a:	334c      	adds	r3, #76	; 0x4c
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f007 fe77 	bl	8009844 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b58:	3350      	adds	r3, #80	; 0x50
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f007 fe70 	bl	8009844 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	68f9      	ldr	r1, [r7, #12]
 8001b68:	69b8      	ldr	r0, [r7, #24]
 8001b6a:	f001 fce7 	bl	800353c <pxPortInitialiseStack>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b72:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <prvInitialiseNewTask+0x130>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001b90:	f001 fe02 	bl	8003798 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001b94:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <prvAddNewTaskToReadyList+0x108>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	4a3d      	ldr	r2, [pc, #244]	; (8001c90 <prvAddNewTaskToReadyList+0x108>)
 8001b9c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <prvAddNewTaskToReadyList+0x10c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001ba6:	4a3b      	ldr	r2, [pc, #236]	; (8001c94 <prvAddNewTaskToReadyList+0x10c>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001bac:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <prvAddNewTaskToReadyList+0x108>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d110      	bne.n	8001bd6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001bb4:	f000 fd84 	bl	80026c0 <prvInitialiseTaskLists>
 8001bb8:	e00d      	b.n	8001bd6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <prvAddNewTaskToReadyList+0x110>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <prvAddNewTaskToReadyList+0x10c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d802      	bhi.n	8001bd6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001bd0:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <prvAddNewTaskToReadyList+0x10c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <prvAddNewTaskToReadyList+0x114>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a2f      	ldr	r2, [pc, #188]	; (8001c9c <prvAddNewTaskToReadyList+0x114>)
 8001bde:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	2201      	movs	r2, #1
 8001be6:	409a      	lsls	r2, r3
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <prvAddNewTaskToReadyList+0x118>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <prvAddNewTaskToReadyList+0x118>)
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf6:	492b      	ldr	r1, [pc, #172]	; (8001ca4 <prvAddNewTaskToReadyList+0x11c>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	3304      	adds	r3, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	3204      	adds	r2, #4
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1d1a      	adds	r2, r3, #4
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <prvAddNewTaskToReadyList+0x11c>)
 8001c36:	441a      	add	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c40:	4918      	ldr	r1, [pc, #96]	; (8001ca4 <prvAddNewTaskToReadyList+0x11c>)
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <prvAddNewTaskToReadyList+0x11c>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4403      	add	r3, r0
 8001c5c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001c5e:	f001 fdcb 	bl	80037f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <prvAddNewTaskToReadyList+0x110>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00e      	beq.n	8001c88 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <prvAddNewTaskToReadyList+0x10c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d207      	bcs.n	8001c88 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <prvAddNewTaskToReadyList+0x120>)
 8001c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20002a20 	.word	0x20002a20
 8001c94:	20002920 	.word	0x20002920
 8001c98:	20002a2c 	.word	0x20002a2c
 8001c9c:	20002a3c 	.word	0x20002a3c
 8001ca0:	20002a28 	.word	0x20002a28
 8001ca4:	20002924 	.word	0x20002924
 8001ca8:	e000ed04 	.word	0xe000ed04

08001cac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d017      	beq.n	8001cee <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <vTaskDelay+0x60>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00a      	beq.n	8001cdc <vTaskDelay+0x30>
        __asm volatile
 8001cc6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001cca:	f383 8811 	msr	BASEPRI, r3
 8001cce:	f3bf 8f6f 	isb	sy
 8001cd2:	f3bf 8f4f 	dsb	sy
 8001cd6:	60bb      	str	r3, [r7, #8]
    }
 8001cd8:	bf00      	nop
 8001cda:	e7fe      	b.n	8001cda <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001cdc:	f000 f884 	bl	8001de8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f001 f906 	bl	8002ef4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001ce8:	f000 f88c 	bl	8001e04 <xTaskResumeAll>
 8001cec:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <vTaskDelay+0x64>)
 8001cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20002a48 	.word	0x20002a48
 8001d10:	e000ed04 	.word	0xe000ed04

08001d14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d22:	463a      	mov	r2, r7
 8001d24:	1d39      	adds	r1, r7, #4
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ffca 	bl	8000cc4 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	9202      	str	r2, [sp, #8]
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	460a      	mov	r2, r1
 8001d42:	4922      	ldr	r1, [pc, #136]	; (8001dcc <vTaskStartScheduler+0xb8>)
 8001d44:	4822      	ldr	r0, [pc, #136]	; (8001dd0 <vTaskStartScheduler+0xbc>)
 8001d46:	f7ff fde1 	bl	800190c <xTaskCreateStatic>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <vTaskStartScheduler+0xc0>)
 8001d4e:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <vTaskStartScheduler+0xc0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e001      	b.n	8001d62 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d102      	bne.n	8001d6e <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 8001d68:	f001 f944 	bl	8002ff4 <xTimerCreateTimerTask>
 8001d6c:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d116      	bne.n	8001da2 <vTaskStartScheduler+0x8e>
        __asm volatile
 8001d74:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	613b      	str	r3, [r7, #16]
    }
 8001d86:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <vTaskStartScheduler+0xc4>)
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <vTaskStartScheduler+0xc8>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <vTaskStartScheduler+0xcc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001d9c:	f001 fc5a 	bl	8003654 <xPortStartScheduler>
 8001da0:	e00e      	b.n	8001dc0 <vTaskStartScheduler+0xac>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d10a      	bne.n	8001dc0 <vTaskStartScheduler+0xac>
        __asm volatile
 8001daa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001dae:	f383 8811 	msr	BASEPRI, r3
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	60fb      	str	r3, [r7, #12]
    }
 8001dbc:	bf00      	nop
 8001dbe:	e7fe      	b.n	8001dbe <vTaskStartScheduler+0xaa>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <vTaskStartScheduler+0xd0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08009970 	.word	0x08009970
 8001dd0:	08002691 	.word	0x08002691
 8001dd4:	20002a44 	.word	0x20002a44
 8001dd8:	20002a40 	.word	0x20002a40
 8001ddc:	20002a2c 	.word	0x20002a2c
 8001de0:	20002a24 	.word	0x20002a24
 8001de4:	20000000 	.word	0x20000000

08001de8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <vTaskSuspendAll+0x18>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <vTaskSuspendAll+0x18>)
 8001df4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20002a48 	.word	0x20002a48

08001e04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001e12:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <xTaskResumeAll+0x1d4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10a      	bne.n	8001e30 <xTaskResumeAll+0x2c>
        __asm volatile
 8001e1a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	607b      	str	r3, [r7, #4]
    }
 8001e2c:	bf00      	nop
 8001e2e:	e7fe      	b.n	8001e2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e30:	f001 fcb2 	bl	8003798 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001e34:	4b68      	ldr	r3, [pc, #416]	; (8001fd8 <xTaskResumeAll+0x1d4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	4a67      	ldr	r2, [pc, #412]	; (8001fd8 <xTaskResumeAll+0x1d4>)
 8001e3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e3e:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <xTaskResumeAll+0x1d4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 80c0 	bne.w	8001fc8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e48:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <xTaskResumeAll+0x1d8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80bb 	beq.w	8001fc8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e52:	e08a      	b.n	8001f6a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e54:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <xTaskResumeAll+0x1dc>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	6a12      	ldr	r2, [r2, #32]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	69d2      	ldr	r2, [r2, #28]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d103      	bne.n	8001e8a <xTaskResumeAll+0x86>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	6a1a      	ldr	r2, [r3, #32]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	68d2      	ldr	r2, [r2, #12]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	6892      	ldr	r2, [r2, #8]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d103      	bne.n	8001ec8 <xTaskResumeAll+0xc4>
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	1e5a      	subs	r2, r3, #1
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	2201      	movs	r2, #1
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <xTaskResumeAll+0x1e0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	4a3f      	ldr	r2, [pc, #252]	; (8001fe4 <xTaskResumeAll+0x1e0>)
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eee:	493e      	ldr	r1, [pc, #248]	; (8001fe8 <xTaskResumeAll+0x1e4>)
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	3304      	adds	r3, #4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	3204      	adds	r2, #4
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	1d1a      	adds	r2, r3, #4
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4a2e      	ldr	r2, [pc, #184]	; (8001fe8 <xTaskResumeAll+0x1e4>)
 8001f2e:	441a      	add	r2, r3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	492b      	ldr	r1, [pc, #172]	; (8001fe8 <xTaskResumeAll+0x1e4>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1c59      	adds	r1, r3, #1
 8001f48:	4827      	ldr	r0, [pc, #156]	; (8001fe8 <xTaskResumeAll+0x1e4>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4403      	add	r3, r0
 8001f54:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <xTaskResumeAll+0x1e8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d302      	bcc.n	8001f6a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <xTaskResumeAll+0x1ec>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <xTaskResumeAll+0x1dc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f47f af70 	bne.w	8001e54 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001f7a:	f000 fc3f 	bl	80027fc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <xTaskResumeAll+0x1f0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d010      	beq.n	8001fac <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001f8a:	f000 f847 	bl	800201c <xTaskIncrementTick>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001f94:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <xTaskResumeAll+0x1ec>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f1      	bne.n	8001f8a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <xTaskResumeAll+0x1f0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <xTaskResumeAll+0x1ec>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d009      	beq.n	8001fc8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <xTaskResumeAll+0x1f4>)
 8001fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001fc8:	f001 fc16 	bl	80037f8 <vPortExitCritical>

    return xAlreadyYielded;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20002a48 	.word	0x20002a48
 8001fdc:	20002a20 	.word	0x20002a20
 8001fe0:	200029e0 	.word	0x200029e0
 8001fe4:	20002a28 	.word	0x20002a28
 8001fe8:	20002924 	.word	0x20002924
 8001fec:	20002920 	.word	0x20002920
 8001ff0:	20002a34 	.word	0x20002a34
 8001ff4:	20002a30 	.word	0x20002a30
 8001ff8:	e000ed04 	.word	0xe000ed04

08001ffc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <xTaskGetTickCount+0x1c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20002a24 	.word	0x20002a24

0800201c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002026:	4b7d      	ldr	r3, [pc, #500]	; (800221c <xTaskIncrementTick+0x200>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 80ec 	bne.w	8002208 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002030:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <xTaskIncrementTick+0x204>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002038:	4a79      	ldr	r2, [pc, #484]	; (8002220 <xTaskIncrementTick+0x204>)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d120      	bne.n	8002086 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002044:	4b77      	ldr	r3, [pc, #476]	; (8002224 <xTaskIncrementTick+0x208>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <xTaskIncrementTick+0x48>
        __asm volatile
 800204e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	f3bf 8f6f 	isb	sy
 800205a:	f3bf 8f4f 	dsb	sy
 800205e:	607b      	str	r3, [r7, #4]
    }
 8002060:	bf00      	nop
 8002062:	e7fe      	b.n	8002062 <xTaskIncrementTick+0x46>
 8002064:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <xTaskIncrementTick+0x208>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <xTaskIncrementTick+0x20c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6d      	ldr	r2, [pc, #436]	; (8002224 <xTaskIncrementTick+0x208>)
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4a6d      	ldr	r2, [pc, #436]	; (8002228 <xTaskIncrementTick+0x20c>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b6c      	ldr	r3, [pc, #432]	; (800222c <xTaskIncrementTick+0x210>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4a6b      	ldr	r2, [pc, #428]	; (800222c <xTaskIncrementTick+0x210>)
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	f000 fbbb 	bl	80027fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002086:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <xTaskIncrementTick+0x214>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	429a      	cmp	r2, r3
 800208e:	f0c0 80a6 	bcc.w	80021de <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002092:	4b64      	ldr	r3, [pc, #400]	; (8002224 <xTaskIncrementTick+0x208>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d104      	bne.n	80020a6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800209c:	4b64      	ldr	r3, [pc, #400]	; (8002230 <xTaskIncrementTick+0x214>)
 800209e:	f04f 32ff 	mov.w	r2, #4294967295
 80020a2:	601a      	str	r2, [r3, #0]
                    break;
 80020a4:	e09b      	b.n	80021de <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <xTaskIncrementTick+0x208>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80020b6:	6a3a      	ldr	r2, [r7, #32]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d203      	bcs.n	80020c6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <xTaskIncrementTick+0x214>)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80020c4:	e08b      	b.n	80021de <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	68d2      	ldr	r2, [r2, #12]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	6892      	ldr	r2, [r2, #8]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	3304      	adds	r3, #4
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d103      	bne.n	80020f4 <xTaskIncrementTick+0xd8>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	1e5a      	subs	r2, r3, #1
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01e      	beq.n	800214a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	6a12      	ldr	r2, [r2, #32]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	69d2      	ldr	r2, [r2, #28]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	3318      	adds	r3, #24
 800212e:	429a      	cmp	r2, r3
 8002130:	d103      	bne.n	800213a <xTaskIncrementTick+0x11e>
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2200      	movs	r2, #0
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	2201      	movs	r2, #1
 8002150:	409a      	lsls	r2, r3
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <xTaskIncrementTick+0x218>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	4a36      	ldr	r2, [pc, #216]	; (8002234 <xTaskIncrementTick+0x218>)
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002160:	4935      	ldr	r1, [pc, #212]	; (8002238 <xTaskIncrementTick+0x21c>)
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3304      	adds	r3, #4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	3204      	adds	r2, #4
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	1d1a      	adds	r2, r3, #4
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4a26      	ldr	r2, [pc, #152]	; (8002238 <xTaskIncrementTick+0x21c>)
 80021a0:	441a      	add	r2, r3
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	615a      	str	r2, [r3, #20]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021aa:	4923      	ldr	r1, [pc, #140]	; (8002238 <xTaskIncrementTick+0x21c>)
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	1c59      	adds	r1, r3, #1
 80021ba:	481f      	ldr	r0, [pc, #124]	; (8002238 <xTaskIncrementTick+0x21c>)
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4403      	add	r3, r0
 80021c6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <xTaskIncrementTick+0x220>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	429a      	cmp	r2, r3
 80021d4:	f4ff af5d 	bcc.w	8002092 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80021d8:	2301      	movs	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021dc:	e759      	b.n	8002092 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <xTaskIncrementTick+0x220>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e4:	4914      	ldr	r1, [pc, #80]	; (8002238 <xTaskIncrementTick+0x21c>)
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d901      	bls.n	80021fa <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80021f6:	2301      	movs	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <xTaskIncrementTick+0x224>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8002202:	2301      	movs	r3, #1
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	e004      	b.n	8002212 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <xTaskIncrementTick+0x228>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <xTaskIncrementTick+0x228>)
 8002210:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002214:	4618      	mov	r0, r3
 8002216:	3728      	adds	r7, #40	; 0x28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20002a48 	.word	0x20002a48
 8002220:	20002a24 	.word	0x20002a24
 8002224:	200029d8 	.word	0x200029d8
 8002228:	200029dc 	.word	0x200029dc
 800222c:	20002a38 	.word	0x20002a38
 8002230:	20002a40 	.word	0x20002a40
 8002234:	20002a28 	.word	0x20002a28
 8002238:	20002924 	.word	0x20002924
 800223c:	20002920 	.word	0x20002920
 8002240:	20002a34 	.word	0x20002a34
 8002244:	20002a30 	.word	0x20002a30

08002248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <vTaskSwitchContext+0xa4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <vTaskSwitchContext+0xa8>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800225c:	e03f      	b.n	80022de <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <vTaskSwitchContext+0xa8>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002264:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <vTaskSwitchContext+0xac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	f1c3 031f 	rsb	r3, r3, #31
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	491f      	ldr	r1, [pc, #124]	; (80022f8 <vTaskSwitchContext+0xb0>)
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10a      	bne.n	80022a4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800228e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	607b      	str	r3, [r7, #4]
    }
 80022a0:	bf00      	nop
 80022a2:	e7fe      	b.n	80022a2 <vTaskSwitchContext+0x5a>
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <vTaskSwitchContext+0xb0>)
 80022b0:	4413      	add	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	3308      	adds	r3, #8
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d104      	bne.n	80022d4 <vTaskSwitchContext+0x8c>
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <vTaskSwitchContext+0xb4>)
 80022dc:	6013      	str	r3, [r2, #0]
}
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20002a48 	.word	0x20002a48
 80022f0:	20002a34 	.word	0x20002a34
 80022f4:	20002a28 	.word	0x20002a28
 80022f8:	20002924 	.word	0x20002924
 80022fc:	20002920 	.word	0x20002920

08002300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002310:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	60fb      	str	r3, [r7, #12]
    }
 8002322:	bf00      	nop
 8002324:	e7fe      	b.n	8002324 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <vTaskPlaceOnEventList+0x44>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3318      	adds	r3, #24
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fd0f 	bl	8000d52 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002334:	2101      	movs	r1, #1
 8002336:	6838      	ldr	r0, [r7, #0]
 8002338:	f000 fddc 	bl	8002ef4 <prvAddCurrentTaskToDelayedList>
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20002920 	.word	0x20002920

08002348 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800235a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800235e:	f383 8811 	msr	BASEPRI, r3
 8002362:	f3bf 8f6f 	isb	sy
 8002366:	f3bf 8f4f 	dsb	sy
 800236a:	613b      	str	r3, [r7, #16]
    }
 800236c:	bf00      	nop
 800236e:	e7fe      	b.n	800236e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	61da      	str	r2, [r3, #28]
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	6892      	ldr	r2, [r2, #8]
 8002386:	621a      	str	r2, [r3, #32]
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <vTaskPlaceOnEventListRestricted+0x88>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	3218      	adds	r2, #24
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f103 0218 	add.w	r2, r3, #24
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <vTaskPlaceOnEventListRestricted+0x88>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
 80023bc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	68b8      	ldr	r0, [r7, #8]
 80023c2:	f000 fd97 	bl	8002ef4 <prvAddCurrentTaskToDelayedList>
    }
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20002920 	.word	0x20002920

080023d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80023d4:	b480      	push	{r7}
 80023d6:	b08b      	sub	sp, #44	; 0x2c
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80023ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	60fb      	str	r3, [r7, #12]
    }
 80023fc:	bf00      	nop
 80023fe:	e7fe      	b.n	80023fe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	6a3a      	ldr	r2, [r7, #32]
 800240c:	6a12      	ldr	r2, [r2, #32]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	69d2      	ldr	r2, [r2, #28]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	3318      	adds	r3, #24
 8002422:	429a      	cmp	r2, r3
 8002424:	d103      	bne.n	800242e <xTaskRemoveFromEventList+0x5a>
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	6a1a      	ldr	r2, [r3, #32]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	2200      	movs	r2, #0
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1e5a      	subs	r2, r3, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800243e:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <xTaskRemoveFromEventList+0x194>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d15e      	bne.n	8002504 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	68d2      	ldr	r2, [r2, #12]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	6a3a      	ldr	r2, [r7, #32]
 800245c:	6892      	ldr	r2, [r2, #8]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	3304      	adds	r3, #4
 8002468:	429a      	cmp	r2, r3
 800246a:	d103      	bne.n	8002474 <xTaskRemoveFromEventList+0xa0>
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	2200      	movs	r2, #0
 8002478:	615a      	str	r2, [r3, #20]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1e5a      	subs	r2, r3, #1
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	2201      	movs	r2, #1
 800248a:	409a      	lsls	r2, r3
 800248c:	4b37      	ldr	r3, [pc, #220]	; (800256c <xTaskRemoveFromEventList+0x198>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4313      	orrs	r3, r2
 8002492:	4a36      	ldr	r2, [pc, #216]	; (800256c <xTaskRemoveFromEventList+0x198>)
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249a:	4935      	ldr	r1, [pc, #212]	; (8002570 <xTaskRemoveFromEventList+0x19c>)
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	3304      	adds	r3, #4
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	6a3a      	ldr	r2, [r7, #32]
 80024c0:	3204      	adds	r2, #4
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	1d1a      	adds	r2, r3, #4
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4a25      	ldr	r2, [pc, #148]	; (8002570 <xTaskRemoveFromEventList+0x19c>)
 80024da:	441a      	add	r2, r3
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	615a      	str	r2, [r3, #20]
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	4922      	ldr	r1, [pc, #136]	; (8002570 <xTaskRemoveFromEventList+0x19c>)
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1c59      	adds	r1, r3, #1
 80024f4:	481e      	ldr	r0, [pc, #120]	; (8002570 <xTaskRemoveFromEventList+0x19c>)
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4403      	add	r3, r0
 8002500:	6019      	str	r1, [r3, #0]
 8002502:	e01b      	b.n	800253c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <xTaskRemoveFromEventList+0x1a0>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	61da      	str	r2, [r3, #28]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	621a      	str	r2, [r3, #32]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	3218      	adds	r2, #24
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	f103 0218 	add.w	r2, r3, #24
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	4a11      	ldr	r2, [pc, #68]	; (8002574 <xTaskRemoveFromEventList+0x1a0>)
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <xTaskRemoveFromEventList+0x1a0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <xTaskRemoveFromEventList+0x1a0>)
 800253a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <xTaskRemoveFromEventList+0x1a4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	429a      	cmp	r2, r3
 8002548:	d905      	bls.n	8002556 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800254a:	2301      	movs	r3, #1
 800254c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <xTaskRemoveFromEventList+0x1a8>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e001      	b.n	800255a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800255c:	4618      	mov	r0, r3
 800255e:	372c      	adds	r7, #44	; 0x2c
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	20002a48 	.word	0x20002a48
 800256c:	20002a28 	.word	0x20002a28
 8002570:	20002924 	.word	0x20002924
 8002574:	200029e0 	.word	0x200029e0
 8002578:	20002920 	.word	0x20002920
 800257c:	20002a34 	.word	0x20002a34

08002580 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <vTaskInternalSetTimeOutState+0x24>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <vTaskInternalSetTimeOutState+0x28>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	605a      	str	r2, [r3, #4]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20002a38 	.word	0x20002a38
 80025a8:	20002a24 	.word	0x20002a24

080025ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80025bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	613b      	str	r3, [r7, #16]
    }
 80025ce:	bf00      	nop
 80025d0:	e7fe      	b.n	80025d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80025d8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	60fb      	str	r3, [r7, #12]
    }
 80025ea:	bf00      	nop
 80025ec:	e7fe      	b.n	80025ec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80025ee:	f001 f8d3 	bl	8003798 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <xTaskCheckForTimeOut+0xc4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d102      	bne.n	8002612 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	e026      	b.n	8002660 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <xTaskCheckForTimeOut+0xc8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d00a      	beq.n	8002634 <xTaskCheckForTimeOut+0x88>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	429a      	cmp	r2, r3
 8002626:	d305      	bcc.n	8002634 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002628:	2301      	movs	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e015      	b.n	8002660 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	429a      	cmp	r2, r3
 800263c:	d20b      	bcs.n	8002656 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff98 	bl	8002580 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	e004      	b.n	8002660 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800265c:	2301      	movs	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002660:	f001 f8ca 	bl	80037f8 <vPortExitCritical>

    return xReturn;
 8002664:	69fb      	ldr	r3, [r7, #28]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20002a24 	.word	0x20002a24
 8002674:	20002a38 	.word	0x20002a38

08002678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <vTaskMissedYield+0x14>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	20002a34 	.word	0x20002a34

08002690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002698:	f000 f852 	bl	8002740 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <prvIdleTask+0x28>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d9f9      	bls.n	8002698 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <prvIdleTask+0x2c>)
 80026a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80026b4:	e7f0      	b.n	8002698 <prvIdleTask+0x8>
 80026b6:	bf00      	nop
 80026b8:	20002924 	.word	0x20002924
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	e00c      	b.n	80026e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <prvInitialiseTaskLists+0x60>)
 80026d8:	4413      	add	r3, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fb0c 	bl	8000cf8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3301      	adds	r3, #1
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b06      	cmp	r3, #6
 80026ea:	d9ef      	bls.n	80026cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80026ec:	480d      	ldr	r0, [pc, #52]	; (8002724 <prvInitialiseTaskLists+0x64>)
 80026ee:	f7fe fb03 	bl	8000cf8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80026f2:	480d      	ldr	r0, [pc, #52]	; (8002728 <prvInitialiseTaskLists+0x68>)
 80026f4:	f7fe fb00 	bl	8000cf8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <prvInitialiseTaskLists+0x6c>)
 80026fa:	f7fe fafd 	bl	8000cf8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80026fe:	480c      	ldr	r0, [pc, #48]	; (8002730 <prvInitialiseTaskLists+0x70>)
 8002700:	f7fe fafa 	bl	8000cf8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002704:	480b      	ldr	r0, [pc, #44]	; (8002734 <prvInitialiseTaskLists+0x74>)
 8002706:	f7fe faf7 	bl	8000cf8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <prvInitialiseTaskLists+0x78>)
 800270c:	4a05      	ldr	r2, [pc, #20]	; (8002724 <prvInitialiseTaskLists+0x64>)
 800270e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <prvInitialiseTaskLists+0x7c>)
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <prvInitialiseTaskLists+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20002924 	.word	0x20002924
 8002724:	200029b0 	.word	0x200029b0
 8002728:	200029c4 	.word	0x200029c4
 800272c:	200029e0 	.word	0x200029e0
 8002730:	200029f4 	.word	0x200029f4
 8002734:	20002a0c 	.word	0x20002a0c
 8002738:	200029d8 	.word	0x200029d8
 800273c:	200029dc 	.word	0x200029dc

08002740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002746:	e019      	b.n	800277c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002748:	f001 f826 	bl	8003798 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <prvCheckTasksWaitingTermination+0x50>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fb33 	bl	8000dc4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <prvCheckTasksWaitingTermination+0x54>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3b01      	subs	r3, #1
 8002764:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <prvCheckTasksWaitingTermination+0x54>)
 8002766:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <prvCheckTasksWaitingTermination+0x58>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3b01      	subs	r3, #1
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <prvCheckTasksWaitingTermination+0x58>)
 8002770:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002772:	f001 f841 	bl	80037f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f810 	bl	800279c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <prvCheckTasksWaitingTermination+0x58>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e1      	bne.n	8002748 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200029f4 	.word	0x200029f4
 8002794:	20002a20 	.word	0x20002a20
 8002798:	20002a08 	.word	0x20002a08

0800279c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFreeStack( pxTCB->pxStack );
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f9e8 	bl	8003b88 <vPortFree>
                    vPortFree( pxTCB );
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f001 f9e5 	bl	8003b88 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80027be:	e018      	b.n	80027f2 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d103      	bne.n	80027d2 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f001 f9dc 	bl	8003b88 <vPortFree>
    }
 80027d0:	e00f      	b.n	80027f2 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d00a      	beq.n	80027f2 <prvDeleteTCB+0x56>
        __asm volatile
 80027dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	60fb      	str	r3, [r7, #12]
    }
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <prvDeleteTCB+0x54>
    }
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <prvResetNextTaskUnblockTime+0x30>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <prvResetNextTaskUnblockTime+0x34>)
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002812:	e005      	b.n	8002820 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <prvResetNextTaskUnblockTime+0x30>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <prvResetNextTaskUnblockTime+0x34>)
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	200029d8 	.word	0x200029d8
 8002830:	20002a40 	.word	0x20002a40

08002834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <xTaskGetSchedulerState+0x34>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002842:	2301      	movs	r3, #1
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	e008      	b.n	800285a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <xTaskGetSchedulerState+0x38>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002850:	2302      	movs	r3, #2
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	e001      	b.n	800285a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800285a:	687b      	ldr	r3, [r7, #4]
    }
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	20002a2c 	.word	0x20002a2c
 800286c:	20002a48 	.word	0x20002a48

08002870 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 808c 	beq.w	80029a0 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002888:	4b48      	ldr	r3, [pc, #288]	; (80029ac <xTaskPriorityDisinherit+0x13c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	429a      	cmp	r2, r3
 8002890:	d00a      	beq.n	80028a8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8002892:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	613b      	str	r3, [r7, #16]
    }
 80028a4:	bf00      	nop
 80028a6:	e7fe      	b.n	80028a6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80028b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	60fb      	str	r3, [r7, #12]
    }
 80028c2:	bf00      	nop
 80028c4:	e7fe      	b.n	80028c4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	1e5a      	subs	r2, r3, #1
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	429a      	cmp	r2, r3
 80028da:	d061      	beq.n	80029a0 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d15d      	bne.n	80029a0 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	3304      	adds	r3, #4
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fa6b 	bl	8000dc4 <uxListRemove>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	2201      	movs	r2, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <xTaskPriorityDisinherit+0x140>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4013      	ands	r3, r2
 8002906:	4a2a      	ldr	r2, [pc, #168]	; (80029b0 <xTaskPriorityDisinherit+0x140>)
 8002908:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	f1c3 0207 	rsb	r2, r3, #7
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <xTaskPriorityDisinherit+0x140>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	4a20      	ldr	r2, [pc, #128]	; (80029b0 <xTaskPriorityDisinherit+0x140>)
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	491f      	ldr	r1, [pc, #124]	; (80029b4 <xTaskPriorityDisinherit+0x144>)
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3304      	adds	r3, #4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	60da      	str	r2, [r3, #12]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	3204      	adds	r2, #4
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	1d1a      	adds	r2, r3, #4
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <xTaskPriorityDisinherit+0x144>)
 8002974:	441a      	add	r2, r3
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	615a      	str	r2, [r3, #20]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297e:	490d      	ldr	r1, [pc, #52]	; (80029b4 <xTaskPriorityDisinherit+0x144>)
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	1c59      	adds	r1, r3, #1
 800298e:	4809      	ldr	r0, [pc, #36]	; (80029b4 <xTaskPriorityDisinherit+0x144>)
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4403      	add	r3, r0
 800299a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800299c:	2301      	movs	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80029a0:	69fb      	ldr	r3, [r7, #28]
    }
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20002920 	.word	0x20002920
 80029b0:	20002a28 	.word	0x20002a28
 80029b4:	20002924 	.word	0x20002924

080029b8 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 80029ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	613b      	str	r3, [r7, #16]
    }
 80029dc:	bf00      	nop
 80029de:	e7fe      	b.n	80029de <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 80029e0:	f000 feda 	bl	8003798 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <ulTaskGenericNotifyTake+0xd0>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3312      	adds	r3, #18
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d115      	bne.n	8002a22 <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <ulTaskGenericNotifyTake+0xd0>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	3350      	adds	r3, #80	; 0x50
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa71 	bl	8002ef4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002a12:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <ulTaskGenericNotifyTake+0xd4>)
 8002a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a22:	f000 fee9 	bl	80037f8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002a26:	f000 feb7 	bl	8003798 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <ulTaskGenericNotifyTake+0xd0>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3312      	adds	r3, #18
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d014      	beq.n	8002a6a <ulTaskGenericNotifyTake+0xb2>
            {
                if( xClearCountOnExit != pdFALSE )
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <ulTaskGenericNotifyTake+0xa0>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <ulTaskGenericNotifyTake+0xd0>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3312      	adds	r3, #18
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	2200      	movs	r2, #0
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e008      	b.n	8002a6a <ulTaskGenericNotifyTake+0xb2>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <ulTaskGenericNotifyTake+0xd0>)
 8002a5a:	6819      	ldr	r1, [r3, #0]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	1e5a      	subs	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3312      	adds	r3, #18
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <ulTaskGenericNotifyTake+0xd0>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4413      	add	r3, r2
 8002a72:	3350      	adds	r3, #80	; 0x50
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002a78:	f000 febe 	bl	80037f8 <vPortExitCritical>

        return ulReturn;
 8002a7c:	697b      	ldr	r3, [r7, #20]
    }
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20002920 	.word	0x20002920
 8002a8c:	e000ed04 	.word	0xe000ed04

08002a90 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08e      	sub	sp, #56	; 0x38
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <xTaskGenericNotify+0x2e>
        __asm volatile
 8002aa8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	623b      	str	r3, [r7, #32]
    }
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <xTaskGenericNotify+0x4a>
        __asm volatile
 8002ac4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	61fb      	str	r3, [r7, #28]
    }
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8002ade:	f000 fe5b 	bl	8003798 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3312      	adds	r3, #18
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af6:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4413      	add	r3, r2
 8002afe:	3350      	adds	r3, #80	; 0x50
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3350      	adds	r3, #80	; 0x50
 8002b0e:	2202      	movs	r2, #2
 8002b10:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d841      	bhi.n	8002b9c <xTaskGenericNotify+0x10c>
 8002b18:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <xTaskGenericNotify+0x90>)
 8002b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1e:	bf00      	nop
 8002b20:	08002bbb 	.word	0x08002bbb
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b53 	.word	0x08002b53
 8002b2c:	08002b6f 	.word	0x08002b6f
 8002b30:	08002b7f 	.word	0x08002b7f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3312      	adds	r3, #18
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3312      	adds	r3, #18
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	605a      	str	r2, [r3, #4]
                    break;
 8002b50:	e036      	b.n	8002bc0 <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	3312      	adds	r3, #18
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3312      	adds	r3, #18
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	605a      	str	r2, [r3, #4]
                    break;
 8002b6c:	e028      	b.n	8002bc0 <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	3312      	adds	r3, #18
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	605a      	str	r2, [r3, #4]
                    break;
 8002b7c:	e020      	b.n	8002bc0 <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d007      	beq.n	8002b96 <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3312      	adds	r3, #18
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002b94:	e014      	b.n	8002bc0 <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8002b9a:	e011      	b.n	8002bc0 <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002b9c:	4b4c      	ldr	r3, [pc, #304]	; (8002cd0 <xTaskGenericNotify+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00c      	beq.n	8002bbe <xTaskGenericNotify+0x12e>
        __asm volatile
 8002ba4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	61bb      	str	r3, [r7, #24]
    }
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xTaskGenericNotify+0x128>
                    break;
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <xTaskGenericNotify+0x130>

                    break;
 8002bbe:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d17b      	bne.n	8002cc0 <xTaskGenericNotify+0x230>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	3304      	adds	r3, #4
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d103      	bne.n	8002bf6 <xTaskGenericNotify+0x166>
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	615a      	str	r2, [r3, #20]
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	1e5a      	subs	r2, r3, #1
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <xTaskGenericNotify+0x244>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <xTaskGenericNotify+0x244>)
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	492e      	ldr	r1, [pc, #184]	; (8002cd8 <xTaskGenericNotify+0x248>)
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3304      	adds	r3, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	60da      	str	r2, [r3, #12]
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c42:	3204      	adds	r2, #4
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	1d1a      	adds	r2, r3, #4
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <xTaskGenericNotify+0x248>)
 8002c5c:	441a      	add	r2, r3
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	615a      	str	r2, [r3, #20]
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	491c      	ldr	r1, [pc, #112]	; (8002cd8 <xTaskGenericNotify+0x248>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	1c59      	adds	r1, r3, #1
 8002c76:	4818      	ldr	r0, [pc, #96]	; (8002cd8 <xTaskGenericNotify+0x248>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4403      	add	r3, r0
 8002c82:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <xTaskGenericNotify+0x212>
        __asm volatile
 8002c8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	617b      	str	r3, [r7, #20]
    }
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xTaskGenericNotify+0x210>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <xTaskGenericNotify+0x24c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d907      	bls.n	8002cc0 <xTaskGenericNotify+0x230>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <xTaskGenericNotify+0x250>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002cc0:	f000 fd9a 	bl	80037f8 <vPortExitCritical>

        return xReturn;
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3738      	adds	r7, #56	; 0x38
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20002a24 	.word	0x20002a24
 8002cd4:	20002a28 	.word	0x20002a28
 8002cd8:	20002924 	.word	0x20002924
 8002cdc:	20002920 	.word	0x20002920
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b090      	sub	sp, #64	; 0x40
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <vTaskGenericNotifyGiveFromISR+0x28>
        __asm volatile
 8002cf6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002d08:	bf00      	nop
 8002d0a:	e7fe      	b.n	8002d0a <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <vTaskGenericNotifyGiveFromISR+0x44>
        __asm volatile
 8002d12:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	623b      	str	r3, [r7, #32]
    }
 8002d24:	bf00      	nop
 8002d26:	e7fe      	b.n	8002d26 <vTaskGenericNotifyGiveFromISR+0x42>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d28:	f000 fe0e 	bl	8003948 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        __asm volatile
 8002d30:	f3ef 8211 	mrs	r2, BASEPRI
 8002d34:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	61fa      	str	r2, [r7, #28]
 8002d46:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8002d48:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4413      	add	r3, r2
 8002d52:	3350      	adds	r3, #80	; 0x50
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002d5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3350      	adds	r3, #80	; 0x50
 8002d62:	2202      	movs	r2, #2
 8002d64:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002d66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	3312      	adds	r3, #18
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3312      	adds	r3, #18
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002d80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	f040 809e 	bne.w	8002ec6 <vTaskGenericNotifyGiveFromISR+0x1e2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <vTaskGenericNotifyGiveFromISR+0xc4>
        __asm volatile
 8002d92:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	617b      	str	r3, [r7, #20]
    }
 8002da4:	bf00      	nop
 8002da6:	e7fe      	b.n	8002da6 <vTaskGenericNotifyGiveFromISR+0xc2>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002da8:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <vTaskGenericNotifyGiveFromISR+0x1f8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d15e      	bne.n	8002e6e <vTaskGenericNotifyGiveFromISR+0x18a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d103      	bne.n	8002dde <vTaskGenericNotifyGiveFromISR+0xfa>
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de0:	2200      	movs	r2, #0
 8002de2:	615a      	str	r2, [r3, #20]
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	1e5a      	subs	r2, r3, #1
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	2201      	movs	r2, #1
 8002df4:	409a      	lsls	r2, r3
 8002df6:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <vTaskGenericNotifyGiveFromISR+0x1fc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	4a38      	ldr	r2, [pc, #224]	; (8002ee0 <vTaskGenericNotifyGiveFromISR+0x1fc>)
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	4937      	ldr	r1, [pc, #220]	; (8002ee4 <vTaskGenericNotifyGiveFromISR+0x200>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3304      	adds	r3, #4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e2a:	3204      	adds	r2, #4
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e30:	1d1a      	adds	r2, r3, #4
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4a28      	ldr	r2, [pc, #160]	; (8002ee4 <vTaskGenericNotifyGiveFromISR+0x200>)
 8002e44:	441a      	add	r2, r3
 8002e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e48:	615a      	str	r2, [r3, #20]
 8002e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	4925      	ldr	r1, [pc, #148]	; (8002ee4 <vTaskGenericNotifyGiveFromISR+0x200>)
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	1c59      	adds	r1, r3, #1
 8002e5e:	4821      	ldr	r0, [pc, #132]	; (8002ee4 <vTaskGenericNotifyGiveFromISR+0x200>)
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4403      	add	r3, r0
 8002e6a:	6019      	str	r1, [r3, #0]
 8002e6c:	e01b      	b.n	8002ea6 <vTaskGenericNotifyGiveFromISR+0x1c2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <vTaskGenericNotifyGiveFromISR+0x204>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30
 8002e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e78:	61da      	str	r2, [r3, #28]
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e80:	621a      	str	r2, [r3, #32]
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e88:	3218      	adds	r2, #24
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8e:	f103 0218 	add.w	r2, r3, #24
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e98:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <vTaskGenericNotifyGiveFromISR+0x204>)
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <vTaskGenericNotifyGiveFromISR+0x204>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	4a11      	ldr	r2, [pc, #68]	; (8002ee8 <vTaskGenericNotifyGiveFromISR+0x204>)
 8002ea4:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <vTaskGenericNotifyGiveFromISR+0x208>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d908      	bls.n	8002ec6 <vTaskGenericNotifyGiveFromISR+0x1e2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <vTaskGenericNotifyGiveFromISR+0x1dc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <vTaskGenericNotifyGiveFromISR+0x20c>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	613b      	str	r3, [r7, #16]
        __asm volatile
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f383 8811 	msr	BASEPRI, r3
    }
 8002ed0:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8002ed2:	bf00      	nop
 8002ed4:	3740      	adds	r7, #64	; 0x40
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20002a48 	.word	0x20002a48
 8002ee0:	20002a28 	.word	0x20002a28
 8002ee4:	20002924 	.word	0x20002924
 8002ee8:	200029e0 	.word	0x200029e0
 8002eec:	20002920 	.word	0x20002920
 8002ef0:	20002a34 	.word	0x20002a34

08002ef4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd ff5a 	bl	8000dc4 <uxListRemove>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f2c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d124      	bne.n	8002f80 <prvAddCurrentTaskToDelayedList+0x8c>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d021      	beq.n	8002f80 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f3c:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	6892      	ldr	r2, [r2, #8]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	3204      	adds	r2, #4
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1d1a      	adds	r2, r3, #4
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f70:	615a      	str	r2, [r3, #20]
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f7e:	e026      	b.n	8002fce <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d209      	bcs.n	8002fac <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f7fd fed4 	bl	8000d52 <vListInsert>
}
 8002faa:	e010      	b.n	8002fce <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <prvAddCurrentTaskToDelayedList+0xf8>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4610      	mov	r0, r2
 8002fba:	f7fd feca 	bl	8000d52 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d202      	bcs.n	8002fce <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8002fc8:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6013      	str	r3, [r2, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20002a24 	.word	0x20002a24
 8002fdc:	20002920 	.word	0x20002920
 8002fe0:	20002a28 	.word	0x20002a28
 8002fe4:	20002a0c 	.word	0x20002a0c
 8002fe8:	200029dc 	.word	0x200029dc
 8002fec:	200029d8 	.word	0x200029d8
 8002ff0:	20002a40 	.word	0x20002a40

08002ff4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002ffe:	f000 fa5d 	bl	80034bc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <xTimerCreateTimerTask+0x80>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d021      	beq.n	800304e <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003012:	1d3a      	adds	r2, r7, #4
 8003014:	f107 0108 	add.w	r1, r7, #8
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fe37 	bl	8000c90 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	9202      	str	r2, [sp, #8]
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	2303      	movs	r3, #3
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2300      	movs	r3, #0
 8003032:	460a      	mov	r2, r1
 8003034:	4910      	ldr	r1, [pc, #64]	; (8003078 <xTimerCreateTimerTask+0x84>)
 8003036:	4811      	ldr	r0, [pc, #68]	; (800307c <xTimerCreateTimerTask+0x88>)
 8003038:	f7fe fc68 	bl	800190c <xTaskCreateStatic>
 800303c:	4603      	mov	r3, r0
 800303e:	4a10      	ldr	r2, [pc, #64]	; (8003080 <xTimerCreateTimerTask+0x8c>)
 8003040:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <xTimerCreateTimerTask+0x8c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800304a:	2301      	movs	r3, #1
 800304c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xTimerCreateTimerTask+0x76>
        __asm volatile
 8003054:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	613b      	str	r3, [r7, #16]
    }
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xTimerCreateTimerTask+0x74>
        return xReturn;
 800306a:	697b      	ldr	r3, [r7, #20]
    }
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20002a7c 	.word	0x20002a7c
 8003078:	08009978 	.word	0x08009978
 800307c:	08003129 	.word	0x08003129
 8003080:	20002a80 	.word	0x20002a80

08003084 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003090:	e008      	b.n	80030a4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	4413      	add	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	699a      	ldr	r2, [r3, #24]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	18d1      	adds	r1, r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8dd 	bl	8003270 <prvInsertTimerInActiveList>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ea      	bne.n	8003092 <prvReloadTimer+0xe>
        }
    }
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <prvProcessExpiredTimer+0x5c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3304      	adds	r3, #4
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fe6f 	bl	8000dc4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ffc3 	bl	8003084 <prvReloadTimer>
 80030fe:	e008      	b.n	8003112 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	4798      	blx	r3
    }
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20002a74 	.word	0x20002a74

08003128 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003130:	f107 0308 	add.w	r3, r7, #8
 8003134:	4618      	mov	r0, r3
 8003136:	f000 f857 	bl	80031e8 <prvGetNextExpireTime>
 800313a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4619      	mov	r1, r3
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f803 	bl	800314c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003146:	f000 f8d5 	bl	80032f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800314a:	e7f1      	b.n	8003130 <prvTimerTask+0x8>

0800314c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003156:	f7fe fe47 	bl	8001de8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f866 	bl	8003230 <prvSampleTimeNow>
 8003164:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d130      	bne.n	80031ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <prvProcessTimerOrBlockTask+0x3c>
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	429a      	cmp	r2, r3
 8003178:	d806      	bhi.n	8003188 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800317a:	f7fe fe43 	bl	8001e04 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ffa1 	bl	80030c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003186:	e024      	b.n	80031d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <prvProcessTimerOrBlockTask+0x90>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <prvProcessTimerOrBlockTask+0x50>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <prvProcessTimerOrBlockTask+0x52>
 800319c:	2300      	movs	r3, #0
 800319e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <prvProcessTimerOrBlockTask+0x94>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f7fe fb79 	bl	80018a4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80031b2:	f7fe fe27 	bl	8001e04 <xTaskResumeAll>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <prvProcessTimerOrBlockTask+0x98>)
 80031be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	f3bf 8f6f 	isb	sy
    }
 80031cc:	e001      	b.n	80031d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80031ce:	f7fe fe19 	bl	8001e04 <xTaskResumeAll>
    }
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20002a78 	.word	0x20002a78
 80031e0:	20002a7c 	.word	0x20002a7c
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <prvGetNextExpireTime+0x44>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <prvGetNextExpireTime+0x16>
 80031fa:	2201      	movs	r2, #1
 80031fc:	e000      	b.n	8003200 <prvGetNextExpireTime+0x18>
 80031fe:	2200      	movs	r2, #0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <prvGetNextExpireTime+0x44>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	e001      	b.n	800321c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800321c:	68fb      	ldr	r3, [r7, #12]
    }
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20002a74 	.word	0x20002a74

08003230 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003238:	f7fe fee0 	bl	8001ffc <xTaskGetTickCount>
 800323c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <prvSampleTimeNow+0x3c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d205      	bcs.n	8003254 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003248:	f000 f912 	bl	8003470 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e002      	b.n	800325a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800325a:	4a04      	ldr	r2, [pc, #16]	; (800326c <prvSampleTimeNow+0x3c>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003260:	68fb      	ldr	r3, [r7, #12]
    }
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20002a84 	.word	0x20002a84

08003270 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	d812      	bhi.n	80032bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	1ad2      	subs	r2, r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e01b      	b.n	80032e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <prvInsertTimerInActiveList+0x7c>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f7fd fd4c 	bl	8000d52 <vListInsert>
 80032ba:	e012      	b.n	80032e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d206      	bcs.n	80032d2 <prvInsertTimerInActiveList+0x62>
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80032cc:	2301      	movs	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	e007      	b.n	80032e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032d2:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <prvInsertTimerInActiveList+0x80>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3304      	adds	r3, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f7fd fd38 	bl	8000d52 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80032e2:	697b      	ldr	r3, [r7, #20]
    }
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20002a78 	.word	0x20002a78
 80032f0:	20002a74 	.word	0x20002a74

080032f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032fa:	e0a6      	b.n	800344a <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f2c0 80a2 	blt.w	8003448 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	3304      	adds	r3, #4
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd fd55 	bl	8000dc4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff87 	bl	8003230 <prvSampleTimeNow>
 8003322:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3b01      	subs	r3, #1
 8003328:	2b08      	cmp	r3, #8
 800332a:	f200 808e 	bhi.w	800344a <prvProcessReceivedCommands+0x156>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <prvProcessReceivedCommands+0x40>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	08003359 	.word	0x08003359
 8003338:	08003359 	.word	0x08003359
 800333c:	080033c1 	.word	0x080033c1
 8003340:	080033d5 	.word	0x080033d5
 8003344:	0800341f 	.word	0x0800341f
 8003348:	08003359 	.word	0x08003359
 800334c:	08003359 	.word	0x08003359
 8003350:	080033c1 	.word	0x080033c1
 8003354:	080033d5 	.word	0x080033d5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	b2da      	uxtb	r2, r3
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	18d1      	adds	r1, r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	69f8      	ldr	r0, [r7, #28]
 8003378:	f7ff ff7a 	bl	8003270 <prvInsertTimerInActiveList>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d063      	beq.n	800344a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	4413      	add	r3, r2
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4619      	mov	r1, r3
 800339c:	69f8      	ldr	r0, [r7, #28]
 800339e:	f7ff fe71 	bl	8003084 <prvReloadTimer>
 80033a2:	e008      	b.n	80033b6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	69f8      	ldr	r0, [r7, #28]
 80033bc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80033be:	e044      	b.n	800344a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 80033d2:	e03a      	b.n	800344a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <prvProcessReceivedCommands+0x116>
        __asm volatile
 80033f4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	617b      	str	r3, [r7, #20]
    }
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	18d1      	adds	r1, r2, r3
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	69f8      	ldr	r0, [r7, #28]
 8003418:	f7ff ff2a 	bl	8003270 <prvInsertTimerInActiveList>
                        break;
 800341c:	e015      	b.n	800344a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 800342c:	69f8      	ldr	r0, [r7, #28]
 800342e:	f000 fbab 	bl	8003b88 <vPortFree>
 8003432:	e00a      	b.n	800344a <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	b2da      	uxtb	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003446:	e000      	b.n	800344a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003448:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <prvProcessReceivedCommands+0x178>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f107 0108 	add.w	r1, r7, #8
 8003452:	2200      	movs	r2, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd ffe7 	bl	8001428 <xQueueReceive>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	f47f af4d 	bne.w	80032fc <prvProcessReceivedCommands+0x8>
        }
    }
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20002a7c 	.word	0x20002a7c

08003470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003476:	e009      	b.n	800348c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <prvSwitchTimerLists+0x44>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003482:	f04f 31ff 	mov.w	r1, #4294967295
 8003486:	6838      	ldr	r0, [r7, #0]
 8003488:	f7ff fe1e 	bl	80030c8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <prvSwitchTimerLists+0x44>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <prvSwitchTimerLists+0x44>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <prvSwitchTimerLists+0x48>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <prvSwitchTimerLists+0x44>)
 80034a2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <prvSwitchTimerLists+0x48>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6013      	str	r3, [r2, #0]
    }
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20002a74 	.word	0x20002a74
 80034b8:	20002a78 	.word	0x20002a78

080034bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80034c2:	f000 f969 	bl	8003798 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <prvCheckForValidListAndQueue+0x60>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d120      	bne.n	8003510 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80034ce:	4814      	ldr	r0, [pc, #80]	; (8003520 <prvCheckForValidListAndQueue+0x64>)
 80034d0:	f7fd fc12 	bl	8000cf8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80034d4:	4813      	ldr	r0, [pc, #76]	; (8003524 <prvCheckForValidListAndQueue+0x68>)
 80034d6:	f7fd fc0f 	bl	8000cf8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <prvCheckForValidListAndQueue+0x6c>)
 80034dc:	4a10      	ldr	r2, [pc, #64]	; (8003520 <prvCheckForValidListAndQueue+0x64>)
 80034de:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <prvCheckForValidListAndQueue+0x70>)
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <prvCheckForValidListAndQueue+0x68>)
 80034e4:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80034e6:	2300      	movs	r3, #0
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <prvCheckForValidListAndQueue+0x74>)
 80034ec:	4a11      	ldr	r2, [pc, #68]	; (8003534 <prvCheckForValidListAndQueue+0x78>)
 80034ee:	210c      	movs	r1, #12
 80034f0:	200a      	movs	r0, #10
 80034f2:	f7fd fd21 	bl	8000f38 <xQueueGenericCreateStatic>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4a08      	ldr	r2, [pc, #32]	; (800351c <prvCheckForValidListAndQueue+0x60>)
 80034fa:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <prvCheckForValidListAndQueue+0x60>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <prvCheckForValidListAndQueue+0x60>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	490b      	ldr	r1, [pc, #44]	; (8003538 <prvCheckForValidListAndQueue+0x7c>)
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe f97c 	bl	8001808 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003510:	f000 f972 	bl	80037f8 <vPortExitCritical>
    }
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20002a7c 	.word	0x20002a7c
 8003520:	20002a4c 	.word	0x20002a4c
 8003524:	20002a60 	.word	0x20002a60
 8003528:	20002a74 	.word	0x20002a74
 800352c:	20002a78 	.word	0x20002a78
 8003530:	20002b00 	.word	0x20002b00
 8003534:	20002a88 	.word	0x20002a88
 8003538:	08009980 	.word	0x08009980

0800353c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3b04      	subs	r3, #4
 800354c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003554:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3b04      	subs	r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3b04      	subs	r3, #4
 800356a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800356c:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <pxPortInitialiseStack+0x64>)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3b14      	subs	r3, #20
 8003576:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3b04      	subs	r3, #4
 8003582:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f06f 0202 	mvn.w	r2, #2
 800358a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b20      	subs	r3, #32
 8003590:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	080035a5 	.word	0x080035a5

080035a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <prvTaskExitError+0x54>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d00a      	beq.n	80035ce <prvTaskExitError+0x2a>
        __asm volatile
 80035b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	60fb      	str	r3, [r7, #12]
    }
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <prvTaskExitError+0x28>
        __asm volatile
 80035ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	60bb      	str	r3, [r7, #8]
    }
 80035e0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80035e2:	bf00      	nop
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0fc      	beq.n	80035e4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	20000004 	.word	0x20000004
 80035fc:	00000000 	.word	0x00000000

08003600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <pxCurrentTCBConst2>)
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	6808      	ldr	r0, [r1, #0]
 8003606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360a:	f380 8809 	msr	PSP, r0
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f380 8811 	msr	BASEPRI, r0
 800361a:	4770      	bx	lr
 800361c:	f3af 8000 	nop.w

08003620 <pxCurrentTCBConst2>:
 8003620:	20002920 	.word	0x20002920
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop

08003628 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003628:	4808      	ldr	r0, [pc, #32]	; (800364c <prvPortStartFirstTask+0x24>)
 800362a:	6800      	ldr	r0, [r0, #0]
 800362c:	6800      	ldr	r0, [r0, #0]
 800362e:	f380 8808 	msr	MSP, r0
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8814 	msr	CONTROL, r0
 800363a:	b662      	cpsie	i
 800363c:	b661      	cpsie	f
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	df00      	svc	0
 8003648:	bf00      	nop
 800364a:	0000      	.short	0x0000
 800364c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop

08003654 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800365a:	4b46      	ldr	r3, [pc, #280]	; (8003774 <xPortStartScheduler+0x120>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a46      	ldr	r2, [pc, #280]	; (8003778 <xPortStartScheduler+0x124>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10a      	bne.n	800367a <xPortStartScheduler+0x26>
        __asm volatile
 8003664:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	613b      	str	r3, [r7, #16]
    }
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800367a:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <xPortStartScheduler+0x120>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a3f      	ldr	r2, [pc, #252]	; (800377c <xPortStartScheduler+0x128>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10a      	bne.n	800369a <xPortStartScheduler+0x46>
        __asm volatile
 8003684:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	60fb      	str	r3, [r7, #12]
    }
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800369a:	4b39      	ldr	r3, [pc, #228]	; (8003780 <xPortStartScheduler+0x12c>)
 800369c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <xPortStartScheduler+0x130>)
 80036c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <xPortStartScheduler+0x134>)
 80036c4:	2207      	movs	r2, #7
 80036c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036c8:	e009      	b.n	80036de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <xPortStartScheduler+0x134>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	4a2d      	ldr	r2, [pc, #180]	; (8003788 <xPortStartScheduler+0x134>)
 80036d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d0ef      	beq.n	80036ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036ea:	4b27      	ldr	r3, [pc, #156]	; (8003788 <xPortStartScheduler+0x134>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f1c3 0307 	rsb	r3, r3, #7
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d00a      	beq.n	800370c <xPortStartScheduler+0xb8>
        __asm volatile
 80036f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	60bb      	str	r3, [r7, #8]
    }
 8003708:	bf00      	nop
 800370a:	e7fe      	b.n	800370a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <xPortStartScheduler+0x134>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <xPortStartScheduler+0x134>)
 8003714:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <xPortStartScheduler+0x134>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800371e:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <xPortStartScheduler+0x134>)
 8003720:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800372a:	4b18      	ldr	r3, [pc, #96]	; (800378c <xPortStartScheduler+0x138>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <xPortStartScheduler+0x138>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003734:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <xPortStartScheduler+0x138>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a14      	ldr	r2, [pc, #80]	; (800378c <xPortStartScheduler+0x138>)
 800373c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003740:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003742:	f000 f8db 	bl	80038fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <xPortStartScheduler+0x13c>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800374c:	f000 f8f0 	bl	8003930 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <xPortStartScheduler+0x140>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0f      	ldr	r2, [pc, #60]	; (8003794 <xPortStartScheduler+0x140>)
 8003756:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800375a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800375c:	f7ff ff64 	bl	8003628 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003760:	f7fe fd72 	bl	8002248 <vTaskSwitchContext>
    prvTaskExitError();
 8003764:	f7ff ff1e 	bl	80035a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	e000ed00 	.word	0xe000ed00
 8003778:	410fc271 	.word	0x410fc271
 800377c:	410fc270 	.word	0x410fc270
 8003780:	e000e400 	.word	0xe000e400
 8003784:	20002b48 	.word	0x20002b48
 8003788:	20002b4c 	.word	0x20002b4c
 800378c:	e000ed20 	.word	0xe000ed20
 8003790:	20000004 	.word	0x20000004
 8003794:	e000ef34 	.word	0xe000ef34

08003798 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
        __asm volatile
 800379e:	f04f 0340 	mov.w	r3, #64	; 0x40
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	607b      	str	r3, [r7, #4]
    }
 80037b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <vPortEnterCritical+0x58>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <vPortEnterCritical+0x58>)
 80037ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <vPortEnterCritical+0x58>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d10f      	bne.n	80037e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <vPortEnterCritical+0x5c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80037ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	603b      	str	r3, [r7, #0]
    }
 80037e0:	bf00      	nop
 80037e2:	e7fe      	b.n	80037e2 <vPortEnterCritical+0x4a>
    }
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	20000004 	.word	0x20000004
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <vPortExitCritical+0x50>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <vPortExitCritical+0x24>
        __asm volatile
 8003806:	f04f 0340 	mov.w	r3, #64	; 0x40
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	607b      	str	r3, [r7, #4]
    }
 8003818:	bf00      	nop
 800381a:	e7fe      	b.n	800381a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <vPortExitCritical+0x50>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3b01      	subs	r3, #1
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <vPortExitCritical+0x50>)
 8003824:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <vPortExitCritical+0x50>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <vPortExitCritical+0x42>
 800382e:	2300      	movs	r3, #0
 8003830:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f383 8811 	msr	BASEPRI, r3
    }
 8003838:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000004 	.word	0x20000004
 800384c:	00000000 	.word	0x00000000

08003850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003850:	f3ef 8009 	mrs	r0, PSP
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <pxCurrentTCBConst>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f01e 0f10 	tst.w	lr, #16
 8003860:	bf08      	it	eq
 8003862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386a:	6010      	str	r0, [r2, #0]
 800386c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003870:	f04f 0040 	mov.w	r0, #64	; 0x40
 8003874:	f380 8811 	msr	BASEPRI, r0
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f7fe fce2 	bl	8002248 <vTaskSwitchContext>
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f380 8811 	msr	BASEPRI, r0
 800388c:	bc09      	pop	{r0, r3}
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	6808      	ldr	r0, [r1, #0]
 8003892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003896:	f01e 0f10 	tst.w	lr, #16
 800389a:	bf08      	it	eq
 800389c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038a0:	f380 8809 	msr	PSP, r0
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	f3af 8000 	nop.w

080038b0 <pxCurrentTCBConst>:
 80038b0:	20002920 	.word	0x20002920
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop

080038b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
        __asm volatile
 80038be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	607b      	str	r3, [r7, #4]
    }
 80038d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80038d2:	f7fe fba3 	bl	800201c <xTaskIncrementTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <SysTick_Handler+0x40>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	2300      	movs	r3, #0
 80038e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f383 8811 	msr	BASEPRI, r3
    }
 80038ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <vPortSetupTimerInterrupt+0x28>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <vPortSetupTimerInterrupt+0x2c>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <vPortSetupTimerInterrupt+0x30>)
 800390e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003912:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <vPortSetupTimerInterrupt+0x28>)
 8003916:	2207      	movs	r2, #7
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000e010 	.word	0xe000e010
 8003928:	e000e018 	.word	0xe000e018
 800392c:	e000e014 	.word	0xe000e014

08003930 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003930:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003940 <vPortEnableVFP+0x10>
 8003934:	6801      	ldr	r1, [r0, #0]
 8003936:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800393a:	6001      	str	r1, [r0, #0]
 800393c:	4770      	bx	lr
 800393e:	0000      	.short	0x0000
 8003940:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop

08003948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800394e:	f3ef 8305 	mrs	r3, IPSR
 8003952:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b0f      	cmp	r3, #15
 8003958:	d914      	bls.n	8003984 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800395a:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <vPortValidateInterruptPriority+0x70>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003964:	4b15      	ldr	r3, [pc, #84]	; (80039bc <vPortValidateInterruptPriority+0x74>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	7afa      	ldrb	r2, [r7, #11]
 800396a:	429a      	cmp	r2, r3
 800396c:	d20a      	bcs.n	8003984 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800396e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	607b      	str	r3, [r7, #4]
    }
 8003980:	bf00      	nop
 8003982:	e7fe      	b.n	8003982 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <vPortValidateInterruptPriority+0x78>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <vPortValidateInterruptPriority+0x7c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d90a      	bls.n	80039aa <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003994:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	603b      	str	r3, [r7, #0]
    }
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <vPortValidateInterruptPriority+0x60>
    }
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	e000e3f0 	.word	0xe000e3f0
 80039bc:	20002b48 	.word	0x20002b48
 80039c0:	e000ed0c 	.word	0xe000ed0c
 80039c4:	20002b4c 	.word	0x20002b4c

080039c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80039d4:	f7fe fa08 	bl	8001de8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80039d8:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <pvPortMalloc+0x1a8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80039e0:	f000 f934 	bl	8003c4c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039e4:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <pvPortMalloc+0x1ac>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 80a7 	bne.w	8003b40 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02d      	beq.n	8003a54 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80039f8:	2208      	movs	r2, #8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d227      	bcs.n	8003a54 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a04:	2208      	movs	r2, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d021      	beq.n	8003a5a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f023 0307 	bic.w	r3, r3, #7
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d214      	bcs.n	8003a4e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <pvPortMalloc+0x92>
        __asm volatile
 8003a38:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	617b      	str	r3, [r7, #20]
    }
 8003a4a:	bf00      	nop
 8003a4c:	e7fe      	b.n	8003a4c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a52:	e002      	b.n	8003a5a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	e000      	b.n	8003a5c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a5a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d06e      	beq.n	8003b40 <pvPortMalloc+0x178>
 8003a62:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <pvPortMalloc+0x1b0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d869      	bhi.n	8003b40 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <pvPortMalloc+0x1b4>)
 8003a6e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003a70:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <pvPortMalloc+0x1b4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a76:	e004      	b.n	8003a82 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d903      	bls.n	8003a94 <pvPortMalloc+0xcc>
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f1      	bne.n	8003a78 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <pvPortMalloc+0x1a8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d050      	beq.n	8003b40 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	4413      	add	r3, r2
 8003aa6:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	1ad2      	subs	r2, r2, r3
 8003ab8:	2308      	movs	r3, #8
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d91f      	bls.n	8003b00 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <pvPortMalloc+0x120>
        __asm volatile
 8003ad2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	613b      	str	r3, [r7, #16]
    }
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003afa:	69b8      	ldr	r0, [r7, #24]
 8003afc:	f000 f908 	bl	8003d10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <pvPortMalloc+0x1b0>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <pvPortMalloc+0x1b0>)
 8003b0c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <pvPortMalloc+0x1b0>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <pvPortMalloc+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d203      	bcs.n	8003b22 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <pvPortMalloc+0x1b0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <pvPortMalloc+0x1b8>)
 8003b20:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <pvPortMalloc+0x1ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b36:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <pvPortMalloc+0x1bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <pvPortMalloc+0x1bc>)
 8003b3e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b40:	f7fe f960 	bl	8001e04 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <pvPortMalloc+0x19c>
        __asm volatile
 8003b4e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	60fb      	str	r3, [r7, #12]
    }
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <pvPortMalloc+0x19a>
    return pvReturn;
 8003b64:	69fb      	ldr	r3, [r7, #28]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3728      	adds	r7, #40	; 0x28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000a358 	.word	0x2000a358
 8003b74:	2000a36c 	.word	0x2000a36c
 8003b78:	2000a35c 	.word	0x2000a35c
 8003b7c:	2000a350 	.word	0x2000a350
 8003b80:	2000a360 	.word	0x2000a360
 8003b84:	2000a364 	.word	0x2000a364

08003b88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d04d      	beq.n	8003c36 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	425b      	negs	r3, r3
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <vPortFree+0xb8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <vPortFree+0x44>
        __asm volatile
 8003bb6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	60fb      	str	r3, [r7, #12]
    }
 8003bc8:	bf00      	nop
 8003bca:	e7fe      	b.n	8003bca <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <vPortFree+0x62>
        __asm volatile
 8003bd4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	60bb      	str	r3, [r7, #8]
    }
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <vPortFree+0xb8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01e      	beq.n	8003c36 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d11a      	bne.n	8003c36 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <vPortFree+0xb8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c10:	f7fe f8ea 	bl	8001de8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <vPortFree+0xbc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <vPortFree+0xbc>)
 8003c20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c22:	6938      	ldr	r0, [r7, #16]
 8003c24:	f000 f874 	bl	8003d10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c28:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <vPortFree+0xc0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	4a06      	ldr	r2, [pc, #24]	; (8003c48 <vPortFree+0xc0>)
 8003c30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c32:	f7fe f8e7 	bl	8001e04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000a36c 	.word	0x2000a36c
 8003c44:	2000a35c 	.word	0x2000a35c
 8003c48:	2000a368 	.word	0x2000a368

08003c4c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c52:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8003c56:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003c58:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <prvHeapInit+0xac>)
 8003c5a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3307      	adds	r3, #7
 8003c6a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0307 	bic.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <prvHeapInit+0xac>)
 8003c7c:	4413      	add	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c84:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <prvHeapInit+0xb0>)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <prvHeapInit+0xb0>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4413      	add	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003c98:	2208      	movs	r2, #8
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0307 	bic.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <prvHeapInit+0xb4>)
 8003cac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <prvHeapInit+0xb4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003cb6:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <prvHeapInit+0xb4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	1ad2      	subs	r2, r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <prvHeapInit+0xb4>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <prvHeapInit+0xb8>)
 8003cda:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <prvHeapInit+0xbc>)
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <prvHeapInit+0xc0>)
 8003ce6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20002b50 	.word	0x20002b50
 8003cfc:	2000a350 	.word	0x2000a350
 8003d00:	2000a358 	.word	0x2000a358
 8003d04:	2000a360 	.word	0x2000a360
 8003d08:	2000a35c 	.word	0x2000a35c
 8003d0c:	2000a36c 	.word	0x2000a36c

08003d10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <prvInsertBlockIntoFreeList+0xac>)
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e002      	b.n	8003d24 <prvInsertBlockIntoFreeList+0x14>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d8f7      	bhi.n	8003d1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	4413      	add	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d108      	bne.n	8003d52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	441a      	add	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	441a      	add	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d118      	bne.n	8003d98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d00d      	beq.n	8003d8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e008      	b.n	8003da0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e003      	b.n	8003da0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d002      	beq.n	8003dae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	2000a350 	.word	0x2000a350
 8003dc0:	2000a358 	.word	0x2000a358

08003dc4 <SSD1322_API_command>:
//====================== command ========================//
/**
 *  @brief Sends command byte to SSD1322
 */
void SSD1322_API_command(uint8_t command)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08c      	sub	sp, #48	; 0x30
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
	if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING){
 8003dce:	f7fe fd31 	bl	8002834 <xTaskGetSchedulerState>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d13f      	bne.n	8003e58 <SSD1322_API_command+0x94>
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003dd8:	f3ef 8305 	mrs	r3, IPSR
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28
        if( ulCurrentInterrupt == 0 )
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <SSD1322_API_command+0x26>
            xReturn = pdFALSE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
 8003de8:	e001      	b.n	8003dee <SSD1322_API_command+0x2a>
            xReturn = pdTRUE;
 8003dea:	2301      	movs	r3, #1
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
        return xReturn;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		BaseType_t inISR = xPortIsInsideInterrupt();
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (inISR == pdFALSE){
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10f      	bne.n	8003e18 <SSD1322_API_command+0x54>
			xQueueSendToBack(oled_queue,&((oled_queue_item_t){COMMAND, command, NULL}), portMAX_DELAY);
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <SSD1322_API_command+0xc4>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	763b      	strb	r3, [r7, #24]
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	2300      	movs	r3, #0
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	f107 0118 	add.w	r1, r7, #24
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	f7fd f961 	bl	80010d8 <xQueueGenericSend>
		while(!OLED_SPI_TX_completed_flag);
		OLED_SPI_TX_completed_flag = 0;
		HAL_SPI_Transmit_IT(&OLED_HSPI, &command, 1);
		*/
	}
}
 8003e16:	e032      	b.n	8003e7e <SSD1322_API_command+0xba>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
			xQueueSendToBackFromISR(oled_queue,&((oled_queue_item_t){COMMAND, command, NULL}),&xHigherPriorityTaskWoken);
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <SSD1322_API_command+0xc4>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	2301      	movs	r3, #1
 8003e22:	723b      	strb	r3, [r7, #8]
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	f107 0214 	add.w	r2, r7, #20
 8003e30:	f107 0108 	add.w	r1, r7, #8
 8003e34:	2300      	movs	r3, #0
 8003e36:	f7fd fa4d 	bl	80012d4 <xQueueGenericSendFromISR>
		    if( xHigherPriorityTaskWoken )
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01e      	beq.n	8003e7e <SSD1322_API_command+0xba>
		    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01b      	beq.n	8003e7e <SSD1322_API_command+0xba>
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <SSD1322_API_command+0xc8>)
 8003e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	f3bf 8f6f 	isb	sy
}
 8003e56:	e012      	b.n	8003e7e <SSD1322_API_command+0xba>
		while(!OLED_SPI_TX_completed_flag);
 8003e58:	bf00      	nop
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <SSD1322_API_command+0xcc>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0fa      	beq.n	8003e5a <SSD1322_API_command+0x96>
		OLED_SPI_TX_completed_flag = 0;
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <SSD1322_API_command+0xcc>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
		SSD1322_HW_drive_CS_low();
 8003e6a:	f001 fca5 	bl	80057b8 <SSD1322_HW_drive_CS_low>
		SSD1322_HW_drive_DC_low();
 8003e6e:	f001 fcb9 	bl	80057e4 <SSD1322_HW_drive_DC_low>
		HAL_SPI_Transmit_IT(&OLED_HSPI, &command, 1);
 8003e72:	1dfb      	adds	r3, r7, #7
 8003e74:	2201      	movs	r2, #1
 8003e76:	4619      	mov	r1, r3
 8003e78:	4806      	ldr	r0, [pc, #24]	; (8003e94 <SSD1322_API_command+0xd0>)
 8003e7a:	f004 f995 	bl	80081a8 <HAL_SPI_Transmit_IT>
}
 8003e7e:	bf00      	nop
 8003e80:	3730      	adds	r7, #48	; 0x30
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	2000a370 	.word	0x2000a370
 8003e8c:	e000ed04 	.word	0xe000ed04
 8003e90:	2000200c 	.word	0x2000200c
 8003e94:	2000a390 	.word	0x2000a390

08003e98 <SSD1322_API_data>:
//====================== data ========================//
/**
 *  @brief Sends data byte to SSD1322
 */
void SSD1322_API_data(uint8_t data)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	; 0x30
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]
	if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING){
 8003ea2:	f7fe fcc7 	bl	8002834 <xTaskGetSchedulerState>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d13f      	bne.n	8003f2c <SSD1322_API_data+0x94>
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003eac:	f3ef 8305 	mrs	r3, IPSR
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
        if( ulCurrentInterrupt == 0 )
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <SSD1322_API_data+0x26>
            xReturn = pdFALSE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	e001      	b.n	8003ec2 <SSD1322_API_data+0x2a>
            xReturn = pdTRUE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
        return xReturn;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		BaseType_t inISR = xPortIsInsideInterrupt();
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (inISR == pdFALSE){
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <SSD1322_API_data+0x54>
			xQueueSendToBack(oled_queue,&((oled_queue_item_t){COMMAND, data, NULL}), portMAX_DELAY);
 8003ecc:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <SSD1322_API_data+0xc4>)
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	763b      	strb	r3, [r7, #24]
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
 8003edc:	f107 0118 	add.w	r1, r7, #24
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee6:	f7fd f8f7 	bl	80010d8 <xQueueGenericSend>
		}
		OLED_HSPI.Instance->CR1 &= (~1<<SPI_CR1_SPE_Pos);
		OLED_SPI_TX_completed_flag = 1;
		*/
	}
}
 8003eea:	e032      	b.n	8003f52 <SSD1322_API_data+0xba>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
			xQueueSendToBackFromISR(oled_queue,&((oled_queue_item_t){COMMAND, data, NULL}),&xHigherPriorityTaskWoken);
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <SSD1322_API_data+0xc4>)
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	723b      	strb	r3, [r7, #8]
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	f107 0214 	add.w	r2, r7, #20
 8003f04:	f107 0108 	add.w	r1, r7, #8
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f7fd f9e3 	bl	80012d4 <xQueueGenericSendFromISR>
		    if( xHigherPriorityTaskWoken )
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01e      	beq.n	8003f52 <SSD1322_API_data+0xba>
		    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01b      	beq.n	8003f52 <SSD1322_API_data+0xba>
 8003f1a:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <SSD1322_API_data+0xc8>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
}
 8003f2a:	e012      	b.n	8003f52 <SSD1322_API_data+0xba>
		while(!OLED_SPI_TX_completed_flag);
 8003f2c:	bf00      	nop
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <SSD1322_API_data+0xcc>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0fa      	beq.n	8003f2e <SSD1322_API_data+0x96>
		OLED_SPI_TX_completed_flag = 0;
 8003f38:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <SSD1322_API_data+0xcc>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
		SSD1322_HW_drive_CS_low();
 8003f3e:	f001 fc3b 	bl	80057b8 <SSD1322_HW_drive_CS_low>
		SSD1322_HW_drive_DC_high();
 8003f42:	f001 fc5a 	bl	80057fa <SSD1322_HW_drive_DC_high>
		HAL_SPI_Transmit_IT(&OLED_HSPI, &data, 1);
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4806      	ldr	r0, [pc, #24]	; (8003f68 <SSD1322_API_data+0xd0>)
 8003f4e:	f004 f92b 	bl	80081a8 <HAL_SPI_Transmit_IT>
}
 8003f52:	bf00      	nop
 8003f54:	3730      	adds	r7, #48	; 0x30
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	2000a370 	.word	0x2000a370
 8003f60:	e000ed04 	.word	0xe000ed04
 8003f64:	2000200c 	.word	0x2000200c
 8003f68:	2000a390 	.word	0x2000a390

08003f6c <OledTask>:
//====================== FreeRTOS task ========================//
/**
 *  @brief The task that handles all the data exchange. Notification is given TxCplt callback
 */
void OledTask(void* par){
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	6078      	str	r0, [r7, #4]
	xTaskNotifyGive(oled_task);
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <OledTask+0x9c>)
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	f7fe fd85 	bl	8002a90 <xTaskGenericNotify>
	for(;;){
			ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //Binary semaphore behavior
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f7fe fd13 	bl	80029b8 <ulTaskGenericNotifyTake>
			static oled_queue_item_t val = {0};
			static uint8_t byte_val = 0;
			xQueueReceive(oled_queue, &val, portMAX_DELAY);
 8003f92:	4b1e      	ldr	r3, [pc, #120]	; (800400c <OledTask+0xa0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9a:	491d      	ldr	r1, [pc, #116]	; (8004010 <OledTask+0xa4>)
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fd fa43 	bl	8001428 <xQueueReceive>
			byte_val = (uint8_t) val.value;
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <OledTask+0xa4>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <OledTask+0xa8>)
 8003faa:	701a      	strb	r2, [r3, #0]
			switch (val.type){
 8003fac:	4b18      	ldr	r3, [pc, #96]	; (8004010 <OledTask+0xa4>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d01a      	beq.n	8003fea <OledTask+0x7e>
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	dce6      	bgt.n	8003f86 <OledTask+0x1a>
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d002      	beq.n	8003fc2 <OledTask+0x56>
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d00a      	beq.n	8003fd6 <OledTask+0x6a>
 8003fc0:	e021      	b.n	8004006 <OledTask+0x9a>
			case COMMAND:
				SSD1322_HW_drive_DC_low();
 8003fc2:	f001 fc0f 	bl	80057e4 <SSD1322_HW_drive_DC_low>
				SSD1322_HW_drive_CS_low();
 8003fc6:	f001 fbf7 	bl	80057b8 <SSD1322_HW_drive_CS_low>
				// Write command
				HAL_SPI_Transmit_IT(&OLED_HSPI, &byte_val, 1);
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4911      	ldr	r1, [pc, #68]	; (8004014 <OledTask+0xa8>)
 8003fce:	4812      	ldr	r0, [pc, #72]	; (8004018 <OledTask+0xac>)
 8003fd0:	f004 f8ea 	bl	80081a8 <HAL_SPI_Transmit_IT>
				break;
 8003fd4:	e017      	b.n	8004006 <OledTask+0x9a>
			case BYTE:
				SSD1322_HW_drive_DC_high();
 8003fd6:	f001 fc10 	bl	80057fa <SSD1322_HW_drive_DC_high>
				SSD1322_HW_drive_CS_low();
 8003fda:	f001 fbed 	bl	80057b8 <SSD1322_HW_drive_CS_low>
				// Write data
				HAL_SPI_Transmit_IT(&OLED_HSPI, &byte_val, 1);
 8003fde:	2201      	movs	r2, #1
 8003fe0:	490c      	ldr	r1, [pc, #48]	; (8004014 <OledTask+0xa8>)
 8003fe2:	480d      	ldr	r0, [pc, #52]	; (8004018 <OledTask+0xac>)
 8003fe4:	f004 f8e0 	bl	80081a8 <HAL_SPI_Transmit_IT>
				break;
 8003fe8:	e00d      	b.n	8004006 <OledTask+0x9a>
			case ARRAY:
				SSD1322_HW_drive_CS_low();
 8003fea:	f001 fbe5 	bl	80057b8 <SSD1322_HW_drive_CS_low>
				SSD1322_HW_drive_DC_high();
 8003fee:	f001 fc04 	bl	80057fa <SSD1322_HW_drive_DC_high>
				HAL_SPI_Transmit_IT(&OLED_HSPI, val.start, val.value);
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <OledTask+0xa4>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	4a06      	ldr	r2, [pc, #24]	; (8004010 <OledTask+0xa4>)
 8003ff8:	6852      	ldr	r2, [r2, #4]
 8003ffa:	b292      	uxth	r2, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4806      	ldr	r0, [pc, #24]	; (8004018 <OledTask+0xac>)
 8004000:	f004 f8d2 	bl	80081a8 <HAL_SPI_Transmit_IT>
				break;
 8004004:	bf00      	nop
	for(;;){
 8004006:	e7be      	b.n	8003f86 <OledTask+0x1a>
 8004008:	2000a374 	.word	0x2000a374
 800400c:	2000a370 	.word	0x2000a370
 8004010:	2000a37c 	.word	0x2000a37c
 8004014:	2000a388 	.word	0x2000a388
 8004018:	2000a390 	.word	0x2000a390

0800401c <SSD1322_API_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void SSD1322_API_init()
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af02      	add	r7, sp, #8
	if(oled_queue == NULL){
 8004022:	4b52      	ldr	r3, [pc, #328]	; (800416c <SSD1322_API_init+0x150>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d112      	bne.n	8004050 <SSD1322_API_init+0x34>
		oled_queue =  xQueueCreate( 16, sizeof(oled_queue_item_t) );
 800402a:	2200      	movs	r2, #0
 800402c:	210c      	movs	r1, #12
 800402e:	2010      	movs	r0, #16
 8004030:	f7fc ffe0 	bl	8000ff4 <xQueueGenericCreate>
 8004034:	4603      	mov	r3, r0
 8004036:	4a4d      	ldr	r2, [pc, #308]	; (800416c <SSD1322_API_init+0x150>)
 8004038:	6013      	str	r3, [r2, #0]
		xTaskCreate(OledTask,NULL, 2048, (void*)2, tskIDLE_PRIORITY+3, &oled_task);
 800403a:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <SSD1322_API_init+0x154>)
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	2303      	movs	r3, #3
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2302      	movs	r3, #2
 8004044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004048:	2100      	movs	r1, #0
 800404a:	484a      	ldr	r0, [pc, #296]	; (8004174 <SSD1322_API_init+0x158>)
 800404c:	f7fd fcbb 	bl	80019c6 <xTaskCreate>
	}
	SSD1322_HW_drive_RESET_low();  //Reset pin low
 8004050:	f001 fbde 	bl	8005810 <SSD1322_HW_drive_RESET_low>
					HAL_Delay(1);                  //1ms delay
 8004054:	2001      	movs	r0, #1
 8004056:	f002 f9a7 	bl	80063a8 <HAL_Delay>
					SSD1322_HW_drive_RESET_high(); //Reset pin high
 800405a:	f001 fbe4 	bl	8005826 <SSD1322_HW_drive_RESET_high>
					HAL_Delay(50);                 //50ms delay
 800405e:	2032      	movs	r0, #50	; 0x32
 8004060:	f002 f9a2 	bl	80063a8 <HAL_Delay>
					SSD1322_API_command(0xFD);     //set Command unlock
 8004064:	20fd      	movs	r0, #253	; 0xfd
 8004066:	f7ff fead 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x12);
 800406a:	2012      	movs	r0, #18
 800406c:	f7ff ff14 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xAE);     //set display off
 8004070:	20ae      	movs	r0, #174	; 0xae
 8004072:	f7ff fea7 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_command(0xB3);     //set display clock divide ratio
 8004076:	20b3      	movs	r0, #179	; 0xb3
 8004078:	f7ff fea4 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x91);
 800407c:	2091      	movs	r0, #145	; 0x91
 800407e:	f7ff ff0b 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xCA);     //set multiplex ratio
 8004082:	20ca      	movs	r0, #202	; 0xca
 8004084:	f7ff fe9e 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x3F);
 8004088:	203f      	movs	r0, #63	; 0x3f
 800408a:	f7ff ff05 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xA2);   //set display offset to 0
 800408e:	20a2      	movs	r0, #162	; 0xa2
 8004090:	f7ff fe98 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x00);
 8004094:	2000      	movs	r0, #0
 8004096:	f7ff feff 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xA1);   //start display start line to 0
 800409a:	20a1      	movs	r0, #161	; 0xa1
 800409c:	f7ff fe92 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x00);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7ff fef9 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xA0);   //set remap and dual COM Line Mode
 80040a6:	20a0      	movs	r0, #160	; 0xa0
 80040a8:	f7ff fe8c 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x14);
 80040ac:	2014      	movs	r0, #20
 80040ae:	f7ff fef3 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_data(0x11);
 80040b2:	2011      	movs	r0, #17
 80040b4:	f7ff fef0 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xB5);   //disable IO input
 80040b8:	20b5      	movs	r0, #181	; 0xb5
 80040ba:	f7ff fe83 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x00);
 80040be:	2000      	movs	r0, #0
 80040c0:	f7ff feea 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xAB);   //function select
 80040c4:	20ab      	movs	r0, #171	; 0xab
 80040c6:	f7ff fe7d 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x01);
 80040ca:	2001      	movs	r0, #1
 80040cc:	f7ff fee4 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xB4);   //enable VSL extern
 80040d0:	20b4      	movs	r0, #180	; 0xb4
 80040d2:	f7ff fe77 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0xA0);
 80040d6:	20a0      	movs	r0, #160	; 0xa0
 80040d8:	f7ff fede 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_data(0xFD);
 80040dc:	20fd      	movs	r0, #253	; 0xfd
 80040de:	f7ff fedb 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xC1);   //set contrast current
 80040e2:	20c1      	movs	r0, #193	; 0xc1
 80040e4:	f7ff fe6e 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0xFF);
 80040e8:	20ff      	movs	r0, #255	; 0xff
 80040ea:	f7ff fed5 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xC7);   //set master contrast current
 80040ee:	20c7      	movs	r0, #199	; 0xc7
 80040f0:	f7ff fe68 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x0F);
 80040f4:	200f      	movs	r0, #15
 80040f6:	f7ff fecf 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xB9);   //default grayscale
 80040fa:	20b9      	movs	r0, #185	; 0xb9
 80040fc:	f7ff fe62 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_command(0xB1);   //set phase length
 8004100:	20b1      	movs	r0, #177	; 0xb1
 8004102:	f7ff fe5f 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0xE2);
 8004106:	20e2      	movs	r0, #226	; 0xe2
 8004108:	f7ff fec6 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xD1);   //enhance driving scheme capability
 800410c:	20d1      	movs	r0, #209	; 0xd1
 800410e:	f7ff fe59 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x82);
 8004112:	2082      	movs	r0, #130	; 0x82
 8004114:	f7ff fec0 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_data(0x20);
 8004118:	2020      	movs	r0, #32
 800411a:	f7ff febd 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xBB);   //first pre charge voltage
 800411e:	20bb      	movs	r0, #187	; 0xbb
 8004120:	f7ff fe50 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x1F);
 8004124:	201f      	movs	r0, #31
 8004126:	f7ff feb7 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xB6);   //second pre charge voltage
 800412a:	20b6      	movs	r0, #182	; 0xb6
 800412c:	f7ff fe4a 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x08);
 8004130:	2008      	movs	r0, #8
 8004132:	f7ff feb1 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xBE);   //VCOMH
 8004136:	20be      	movs	r0, #190	; 0xbe
 8004138:	f7ff fe44 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_data(0x07);
 800413c:	2007      	movs	r0, #7
 800413e:	f7ff feab 	bl	8003e98 <SSD1322_API_data>
					SSD1322_API_command(0xA6);   //set normal display mode
 8004142:	20a6      	movs	r0, #166	; 0xa6
 8004144:	f7ff fe3e 	bl	8003dc4 <SSD1322_API_command>
					SSD1322_API_command(0xA9);   //no partial mode
 8004148:	20a9      	movs	r0, #169	; 0xa9
 800414a:	f7ff fe3b 	bl	8003dc4 <SSD1322_API_command>
					HAL_Delay(10);               //stabilize VDD
 800414e:	200a      	movs	r0, #10
 8004150:	f002 f92a 	bl	80063a8 <HAL_Delay>
					SSD1322_API_command(0xAF);   //display on
 8004154:	20af      	movs	r0, #175	; 0xaf
 8004156:	f7ff fe35 	bl	8003dc4 <SSD1322_API_command>
					HAL_Delay(50);               //stabilize VDD
 800415a:	2032      	movs	r0, #50	; 0x32
 800415c:	f002 f924 	bl	80063a8 <HAL_Delay>
					initialized_flag = 1;
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <SSD1322_API_init+0x15c>)
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]

}
 8004166:	bf00      	nop
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000a370 	.word	0x2000a370
 8004170:	2000a374 	.word	0x2000a374
 8004174:	08003f6d 	.word	0x08003f6d
 8004178:	2000a378 	.word	0x2000a378

0800417c <SSD1322_API_set_display_mode>:
 *
 *  When mode is set to ON or OFF, display ignores GRAM data and is always on or off.
 */

void SSD1322_API_set_display_mode(enum SSD1322_mode_e mode)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d81b      	bhi.n	80041c4 <SSD1322_API_set_display_mode+0x48>
 800418c:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <SSD1322_API_set_display_mode+0x18>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041b5 	.word	0x080041b5
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041a5 	.word	0x080041a5
 80041a0:	080041ad 	.word	0x080041ad
	{
	case SSD1322_MODE_NORMAL:
		SSD1322_API_command(SET_DISP_MODE_NORMAL);
 80041a4:	20a6      	movs	r0, #166	; 0xa6
 80041a6:	f7ff fe0d 	bl	8003dc4 <SSD1322_API_command>
		break;
 80041aa:	e00b      	b.n	80041c4 <SSD1322_API_set_display_mode+0x48>
	case SSD1322_MODE_INVERTED:
		SSD1322_API_command(SET_DISP_MODE_INVERTED);
 80041ac:	20a7      	movs	r0, #167	; 0xa7
 80041ae:	f7ff fe09 	bl	8003dc4 <SSD1322_API_command>
		break;
 80041b2:	e007      	b.n	80041c4 <SSD1322_API_set_display_mode+0x48>
	case SSD1322_MODE_ON:
		SSD1322_API_command(SET_DISP_MODE_ON);
 80041b4:	20a5      	movs	r0, #165	; 0xa5
 80041b6:	f7ff fe05 	bl	8003dc4 <SSD1322_API_command>
		break;
 80041ba:	e003      	b.n	80041c4 <SSD1322_API_set_display_mode+0x48>
	case SSD1322_MODE_OFF:
		SSD1322_API_command(SET_DISP_MODE_OFF);
 80041bc:	20a4      	movs	r0, #164	; 0xa4
 80041be:	f7ff fe01 	bl	8003dc4 <SSD1322_API_command>
		break;
 80041c2:	bf00      	nop
	}
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <SSD1322_API_sleep_on>:
//====================== go to sleep ========================//
/**
 *  @brief Go to sleep mode.
 */
void SSD1322_API_sleep_on()
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
	SSD1322_API_command(SLEEP_MODE_ON);
 80041d0:	20ae      	movs	r0, #174	; 0xae
 80041d2:	f7ff fdf7 	bl	8003dc4 <SSD1322_API_command>
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}

080041da <SSD1322_API_sleep_off>:
//====================== wake up from sleep ========================//
/**
 *  @brief Wake up from sleep mode.
 */
void SSD1322_API_sleep_off()
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	af00      	add	r7, sp, #0
	SSD1322_API_command(SLEEP_MODE_OFF);
 80041de:	20af      	movs	r0, #175	; 0xaf
 80041e0:	f7ff fdf0 	bl	8003dc4 <SSD1322_API_command>
}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <SSD1322_API_custom_grayscale>:
 *  @param[in] grayscale_tab array of 16 brightness values
 *
 *  @return 0 when levels are out of range, 1 if function has ended correctly
 */
uint8_t SSD1322_API_custom_grayscale(uint8_t *grayscale_tab)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	SSD1322_API_command(SET_GRAYSCALE_TABLE);
 80041f0:	20b8      	movs	r0, #184	; 0xb8
 80041f2:	f7ff fde7 	bl	8003dc4 <SSD1322_API_command>
	for(int i = 0; i < 16; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e011      	b.n	8004220 <SSD1322_API_custom_grayscale+0x38>
	{
		if(grayscale_tab[i] > 180)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2bb4      	cmp	r3, #180	; 0xb4
 8004206:	d901      	bls.n	800420c <SSD1322_API_custom_grayscale+0x24>
			return 0;
 8004208:	2300      	movs	r3, #0
 800420a:	e010      	b.n	800422e <SSD1322_API_custom_grayscale+0x46>
		SSD1322_API_data(grayscale_tab[i]);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fe3f 	bl	8003e98 <SSD1322_API_data>
	for(int i = 0; i < 16; i++)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3301      	adds	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	ddea      	ble.n	80041fc <SSD1322_API_custom_grayscale+0x14>
	}
	SSD1322_API_command(ENABLE_GRAYSCALE_TABLE);
 8004226:	2000      	movs	r0, #0
 8004228:	f7ff fdcc 	bl	8003dc4 <SSD1322_API_command>
	return 1;
 800422c:	2301      	movs	r3, #1
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <SSD1322_API_default_grayscale>:
//====================== default grayscale ========================//
/**
 *  @brief Reset grayscale levels to default (linear)
 */
void SSD1322_API_default_grayscale()
{
 8004236:	b580      	push	{r7, lr}
 8004238:	af00      	add	r7, sp, #0
	SSD1322_API_command(SET_DEFAULT_GRAYSCALE_TAB);
 800423a:	20b9      	movs	r0, #185	; 0xb9
 800423c:	f7ff fdc2 	bl	8003dc4 <SSD1322_API_command>
}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}

08004244 <SSD1322_API_set_window>:
 *  @param[in] end_column
 *  @param[in] start_row
 *  @param[in] end_row
 */
void SSD1322_API_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4604      	mov	r4, r0
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4623      	mov	r3, r4
 8004254:	71fb      	strb	r3, [r7, #7]
 8004256:	4603      	mov	r3, r0
 8004258:	71bb      	strb	r3, [r7, #6]
 800425a:	460b      	mov	r3, r1
 800425c:	717b      	strb	r3, [r7, #5]
 800425e:	4613      	mov	r3, r2
 8004260:	713b      	strb	r3, [r7, #4]
	SSD1322_API_command(SET_COLUMN_ADDR);  //set columns range
 8004262:	2015      	movs	r0, #21
 8004264:	f7ff fdae 	bl	8003dc4 <SSD1322_API_command>
	SSD1322_API_data(28+start_column);
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	331c      	adds	r3, #28
 800426c:	b2db      	uxtb	r3, r3
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fe12 	bl	8003e98 <SSD1322_API_data>
	SSD1322_API_data(28+end_column);
 8004274:	79bb      	ldrb	r3, [r7, #6]
 8004276:	331c      	adds	r3, #28
 8004278:	b2db      	uxtb	r3, r3
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fe0c 	bl	8003e98 <SSD1322_API_data>
	SSD1322_API_command(SET_ROW_ADDR);  //set rows range
 8004280:	2075      	movs	r0, #117	; 0x75
 8004282:	f7ff fd9f 	bl	8003dc4 <SSD1322_API_command>
	SSD1322_API_data(start_row);
 8004286:	797b      	ldrb	r3, [r7, #5]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fe05 	bl	8003e98 <SSD1322_API_data>
	SSD1322_API_data(end_row);
 800428e:	793b      	ldrb	r3, [r7, #4]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fe01 	bl	8003e98 <SSD1322_API_data>
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bd90      	pop	{r4, r7, pc}
	...

080042a0 <SSD1322_API_send_buffer>:
 *
 *  @param[in] buffer array of pixel values
 *  @param[in] buffer_size amount of bytes in the array
 */
void SSD1322_API_send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	; 0x30
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
	SSD1322_API_command(ENABLE_RAM_WRITE);
 80042aa:	205c      	movs	r0, #92	; 0x5c
 80042ac:	f7ff fd8a 	bl	8003dc4 <SSD1322_API_command>
	if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING){
 80042b0:	f7fe fac0 	bl	8002834 <xTaskGetSchedulerState>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d13f      	bne.n	800433a <SSD1322_API_send_buffer+0x9a>
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80042ba:	f3ef 8305 	mrs	r3, IPSR
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
        if( ulCurrentInterrupt == 0 )
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <SSD1322_API_send_buffer+0x2c>
            xReturn = pdFALSE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ca:	e001      	b.n	80042d0 <SSD1322_API_send_buffer+0x30>
            xReturn = pdTRUE;
 80042cc:	2301      	movs	r3, #1
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
        return xReturn;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		BaseType_t inISR = xPortIsInsideInterrupt();
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (inISR == pdFALSE){
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <SSD1322_API_send_buffer+0x5a>
			xQueueSendToBack(oled_queue,&((oled_queue_item_t){ARRAY, buffer_size, buffer}), portMAX_DELAY);
 80042da:	4b22      	ldr	r3, [pc, #136]	; (8004364 <SSD1322_API_send_buffer+0xc4>)
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	2303      	movs	r3, #3
 80042e0:	763b      	strb	r3, [r7, #24]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	623b      	str	r3, [r7, #32]
 80042ea:	f107 0118 	add.w	r1, r7, #24
 80042ee:	2300      	movs	r3, #0
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	f7fc fef0 	bl	80010d8 <xQueueGenericSend>
		OLED_SPI_TX_completed_flag = 0;
		SSD1322_HW_drive_CS_low();
		SSD1322_HW_drive_DC_high();
		SSD1322_HW_SPI_send_array(buffer, buffer_size);
	}
}
 80042f8:	e030      	b.n	800435c <SSD1322_API_send_buffer+0xbc>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
			xQueueSendToBackFromISR(oled_queue,&((oled_queue_item_t){ARRAY, buffer_size, buffer}),&xHigherPriorityTaskWoken);
 80042fe:	4b19      	ldr	r3, [pc, #100]	; (8004364 <SSD1322_API_send_buffer+0xc4>)
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	2303      	movs	r3, #3
 8004304:	723b      	strb	r3, [r7, #8]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	f107 0214 	add.w	r2, r7, #20
 8004312:	f107 0108 	add.w	r1, r7, #8
 8004316:	2300      	movs	r3, #0
 8004318:	f7fc ffdc 	bl	80012d4 <xQueueGenericSendFromISR>
		    if( xHigherPriorityTaskWoken )
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01c      	beq.n	800435c <SSD1322_API_send_buffer+0xbc>
		    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d019      	beq.n	800435c <SSD1322_API_send_buffer+0xbc>
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <SSD1322_API_send_buffer+0xc8>)
 800432a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	f3bf 8f6f 	isb	sy
}
 8004338:	e010      	b.n	800435c <SSD1322_API_send_buffer+0xbc>
		while(!OLED_SPI_TX_completed_flag);
 800433a:	bf00      	nop
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <SSD1322_API_send_buffer+0xcc>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0fa      	beq.n	800433c <SSD1322_API_send_buffer+0x9c>
		OLED_SPI_TX_completed_flag = 0;
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <SSD1322_API_send_buffer+0xcc>)
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
		SSD1322_HW_drive_CS_low();
 800434c:	f001 fa34 	bl	80057b8 <SSD1322_HW_drive_CS_low>
		SSD1322_HW_drive_DC_high();
 8004350:	f001 fa53 	bl	80057fa <SSD1322_HW_drive_DC_high>
		SSD1322_HW_SPI_send_array(buffer, buffer_size);
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f001 faaa 	bl	80058b0 <SSD1322_HW_SPI_send_array>
}
 800435c:	bf00      	nop
 800435e:	3730      	adds	r7, #48	; 0x30
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	2000a370 	.word	0x2000a370
 8004368:	e000ed04 	.word	0xe000ed04
 800436c:	2000200c 	.word	0x2000200c

08004370 <set_buffer_size>:
 *  		   new y size of a buffer in pixels
 */


void set_buffer_size(uint16_t _buffer_width, uint16_t buffer_height)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	460a      	mov	r2, r1
 800437a:	80fb      	strh	r3, [r7, #6]
 800437c:	4613      	mov	r3, r2
 800437e:	80bb      	strh	r3, [r7, #4]
	_buffer_height = buffer_height;
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <set_buffer_size+0x24>)
 8004382:	88bb      	ldrh	r3, [r7, #4]
 8004384:	8013      	strh	r3, [r2, #0]
	_buffer_width = _buffer_width;
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000008 	.word	0x20000008

08004398 <fill_buffer>:
 *             array of pixel values
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	b25a      	sxtb	r2, r3
 80043aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	b25b      	sxtb	r3, r3
 80043b2:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 80043b4:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <fill_buffer+0x58>)
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <fill_buffer+0x5c>)
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	0fda      	lsrs	r2, r3, #31
 80043c4:	4413      	add	r3, r2
 80043c6:	105b      	asrs	r3, r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 80043ca:	e004      	b.n	80043d6 <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	7afa      	ldrb	r2, [r7, #11]
 80043d4:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	60fa      	str	r2, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f5      	bne.n	80043cc <fill_buffer+0x34>
	}
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000008 	.word	0x20000008
 80043f4:	2000000a 	.word	0x2000000a

080043f8 <draw_pixel>:
 *             vertical coordinate of pixel
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	4608      	mov	r0, r1
 8004402:	4611      	mov	r1, r2
 8004404:	461a      	mov	r2, r3
 8004406:	4603      	mov	r3, r0
 8004408:	817b      	strh	r3, [r7, #10]
 800440a:	460b      	mov	r3, r1
 800440c:	813b      	strh	r3, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 8004412:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <draw_pixel+0xf0>)
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	897a      	ldrh	r2, [r7, #10]
 8004418:	429a      	cmp	r2, r3
 800441a:	d25f      	bcs.n	80044dc <draw_pixel+0xe4>
 800441c:	4b33      	ldr	r3, [pc, #204]	; (80044ec <draw_pixel+0xf4>)
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	893a      	ldrh	r2, [r7, #8]
 8004422:	429a      	cmp	r2, r3
 8004424:	d25a      	bcs.n	80044dc <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 8004426:	893b      	ldrh	r3, [r7, #8]
 8004428:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <draw_pixel+0xf0>)
 800442a:	8812      	ldrh	r2, [r2, #0]
 800442c:	fb03 f202 	mul.w	r2, r3, r2
 8004430:	897b      	ldrh	r3, [r7, #10]
 8004432:	4413      	add	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	bfb8      	it	lt
 800443c:	425b      	neglt	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d125      	bne.n	800448e <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 8004442:	893b      	ldrh	r3, [r7, #8]
 8004444:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <draw_pixel+0xf0>)
 8004446:	8812      	ldrh	r2, [r2, #0]
 8004448:	fb03 f202 	mul.w	r2, r3, r2
 800444c:	897b      	ldrh	r3, [r7, #10]
 800444e:	4413      	add	r3, r2
 8004450:	0fda      	lsrs	r2, r3, #31
 8004452:	4413      	add	r3, r2
 8004454:	105b      	asrs	r3, r3, #1
 8004456:	461a      	mov	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b25b      	sxtb	r3, r3
 8004460:	f023 030f 	bic.w	r3, r3, #15
 8004464:	b25a      	sxtb	r2, r3
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	4313      	orrs	r3, r2
 800446c:	b259      	sxtb	r1, r3
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <draw_pixel+0xf0>)
 8004472:	8812      	ldrh	r2, [r2, #0]
 8004474:	fb03 f202 	mul.w	r2, r3, r2
 8004478:	897b      	ldrh	r3, [r7, #10]
 800447a:	4413      	add	r3, r2
 800447c:	0fda      	lsrs	r2, r3, #31
 800447e:	4413      	add	r3, r2
 8004480:	105b      	asrs	r3, r3, #1
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	b2ca      	uxtb	r2, r1
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e027      	b.n	80044de <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 800448e:	893b      	ldrh	r3, [r7, #8]
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <draw_pixel+0xf0>)
 8004492:	8812      	ldrh	r2, [r2, #0]
 8004494:	fb03 f202 	mul.w	r2, r3, r2
 8004498:	897b      	ldrh	r3, [r7, #10]
 800449a:	4413      	add	r3, r2
 800449c:	0fda      	lsrs	r2, r3, #31
 800449e:	4413      	add	r3, r2
 80044a0:	105b      	asrs	r3, r3, #1
 80044a2:	461a      	mov	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b25b      	sxtb	r3, r3
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	b25a      	sxtb	r2, r3
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	b25b      	sxtb	r3, r3
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b259      	sxtb	r1, r3
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <draw_pixel+0xf0>)
 80044c0:	8812      	ldrh	r2, [r2, #0]
 80044c2:	fb03 f202 	mul.w	r2, r3, r2
 80044c6:	897b      	ldrh	r3, [r7, #10]
 80044c8:	4413      	add	r3, r2
 80044ca:	0fda      	lsrs	r2, r3, #31
 80044cc:	4413      	add	r3, r2
 80044ce:	105b      	asrs	r3, r3, #1
 80044d0:	461a      	mov	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	b2ca      	uxtb	r2, r1
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e000      	b.n	80044de <draw_pixel+0xe6>
		return;
 80044dc:	bf00      	nop
	}
}
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	2000000a 	.word	0x2000000a
 80044ec:	20000008 	.word	0x20000008

080044f0 <draw_vline>:
 *             end of the line
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_vline(uint8_t *frame_buffer, uint16_t x, uint16_t y0, uint16_t y1, uint8_t brightness)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	4608      	mov	r0, r1
 80044fa:	4611      	mov	r1, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	4603      	mov	r3, r0
 8004500:	817b      	strh	r3, [r7, #10]
 8004502:	460b      	mov	r3, r1
 8004504:	813b      	strh	r3, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
	if(y0 < y1)
 800450a:	893a      	ldrh	r2, [r7, #8]
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	429a      	cmp	r2, r3
 8004510:	d211      	bcs.n	8004536 <draw_vline+0x46>
	{
		for (uint16_t i = y0; i <= y1; i++)
 8004512:	893b      	ldrh	r3, [r7, #8]
 8004514:	82fb      	strh	r3, [r7, #22]
 8004516:	e009      	b.n	800452c <draw_vline+0x3c>
		{
			draw_pixel(frame_buffer, x, i, brightness);
 8004518:	f897 3020 	ldrb.w	r3, [r7, #32]
 800451c:	8afa      	ldrh	r2, [r7, #22]
 800451e:	8979      	ldrh	r1, [r7, #10]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ff69 	bl	80043f8 <draw_pixel>
		for (uint16_t i = y0; i <= y1; i++)
 8004526:	8afb      	ldrh	r3, [r7, #22]
 8004528:	3301      	adds	r3, #1
 800452a:	82fb      	strh	r3, [r7, #22]
 800452c:	8afa      	ldrh	r2, [r7, #22]
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	429a      	cmp	r2, r3
 8004532:	d9f1      	bls.n	8004518 <draw_vline+0x28>
		for (uint16_t i = y1; i <= y0; i++)
		{
			draw_pixel(frame_buffer, x, i, brightness);
		}
	}
}
 8004534:	e010      	b.n	8004558 <draw_vline+0x68>
		for (uint16_t i = y1; i <= y0; i++)
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	82bb      	strh	r3, [r7, #20]
 800453a:	e009      	b.n	8004550 <draw_vline+0x60>
			draw_pixel(frame_buffer, x, i, brightness);
 800453c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004540:	8aba      	ldrh	r2, [r7, #20]
 8004542:	8979      	ldrh	r1, [r7, #10]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff ff57 	bl	80043f8 <draw_pixel>
		for (uint16_t i = y1; i <= y0; i++)
 800454a:	8abb      	ldrh	r3, [r7, #20]
 800454c:	3301      	adds	r3, #1
 800454e:	82bb      	strh	r3, [r7, #20]
 8004550:	8aba      	ldrh	r2, [r7, #20]
 8004552:	893b      	ldrh	r3, [r7, #8]
 8004554:	429a      	cmp	r2, r3
 8004556:	d9f1      	bls.n	800453c <draw_vline+0x4c>
}
 8004558:	bf00      	nop
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <draw_hline>:
 *             end of the line
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_hline(uint8_t *frame_buffer, uint16_t y, uint16_t x0, uint16_t x1, uint8_t brightness)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	461a      	mov	r2, r3
 800456e:	4603      	mov	r3, r0
 8004570:	817b      	strh	r3, [r7, #10]
 8004572:	460b      	mov	r3, r1
 8004574:	813b      	strh	r3, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
	if(x0 < x1)
 800457a:	893a      	ldrh	r2, [r7, #8]
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	429a      	cmp	r2, r3
 8004580:	d211      	bcs.n	80045a6 <draw_hline+0x46>
	{
		for (uint16_t i = x0; i <= x1; i++)
 8004582:	893b      	ldrh	r3, [r7, #8]
 8004584:	82fb      	strh	r3, [r7, #22]
 8004586:	e009      	b.n	800459c <draw_hline+0x3c>
		{
			draw_pixel(frame_buffer, i, y, brightness);
 8004588:	f897 3020 	ldrb.w	r3, [r7, #32]
 800458c:	897a      	ldrh	r2, [r7, #10]
 800458e:	8af9      	ldrh	r1, [r7, #22]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f7ff ff31 	bl	80043f8 <draw_pixel>
		for (uint16_t i = x0; i <= x1; i++)
 8004596:	8afb      	ldrh	r3, [r7, #22]
 8004598:	3301      	adds	r3, #1
 800459a:	82fb      	strh	r3, [r7, #22]
 800459c:	8afa      	ldrh	r2, [r7, #22]
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d9f1      	bls.n	8004588 <draw_hline+0x28>
		for (uint16_t i = x1; i <= x0; i++)
		{
			draw_pixel(frame_buffer, i, y, brightness);
		}
	}
}
 80045a4:	e010      	b.n	80045c8 <draw_hline+0x68>
		for (uint16_t i = x1; i <= x0; i++)
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	82bb      	strh	r3, [r7, #20]
 80045aa:	e009      	b.n	80045c0 <draw_hline+0x60>
			draw_pixel(frame_buffer, i, y, brightness);
 80045ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045b0:	897a      	ldrh	r2, [r7, #10]
 80045b2:	8ab9      	ldrh	r1, [r7, #20]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ff1f 	bl	80043f8 <draw_pixel>
		for (uint16_t i = x1; i <= x0; i++)
 80045ba:	8abb      	ldrh	r3, [r7, #20]
 80045bc:	3301      	adds	r3, #1
 80045be:	82bb      	strh	r3, [r7, #20]
 80045c0:	8aba      	ldrh	r2, [r7, #20]
 80045c2:	893b      	ldrh	r3, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d9f1      	bls.n	80045ac <draw_hline+0x4c>
}
 80045c8:	bf00      	nop
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <draw_line>:
 *             y position of line ending
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
*/
void draw_line(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	817b      	strh	r3, [r7, #10]
 80045e2:	460b      	mov	r3, r1
 80045e4:	813b      	strh	r3, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
	//handle horizontal and vertical lines with appropriate functions
	if (x0 == x1)
 80045ea:	897a      	ldrh	r2, [r7, #10]
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d109      	bne.n	8004606 <draw_line+0x36>
	{
		draw_vline(frame_buffer, x0, y0, y1, brightness);
 80045f2:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 80045f4:	893a      	ldrh	r2, [r7, #8]
 80045f6:	8979      	ldrh	r1, [r7, #10]
 80045f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4603      	mov	r3, r0
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff ff75 	bl	80044f0 <draw_vline>
	}
	if (y0 == y1)
 8004606:	893a      	ldrh	r2, [r7, #8]
 8004608:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800460a:	429a      	cmp	r2, r3
 800460c:	d109      	bne.n	8004622 <draw_line+0x52>
	{
		draw_hline(frame_buffer, y0, x0, x1, brightness);
 800460e:	88f8      	ldrh	r0, [r7, #6]
 8004610:	897a      	ldrh	r2, [r7, #10]
 8004612:	8939      	ldrh	r1, [r7, #8]
 8004614:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	4603      	mov	r3, r0
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff ff9f 	bl	8004560 <draw_hline>
	}

	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8004622:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004624:	893b      	ldrh	r3, [r7, #8]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800462c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004630:	88f9      	ldrh	r1, [r7, #6]
 8004632:	897b      	ldrh	r3, [r7, #10]
 8004634:	1acb      	subs	r3, r1, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	bfb8      	it	lt
 800463a:	425b      	neglt	r3, r3
 800463c:	429a      	cmp	r2, r3
 800463e:	bfcc      	ite	gt
 8004640:	2301      	movgt	r3, #1
 8004642:	2300      	movle	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	837b      	strh	r3, [r7, #26]
	if (steep == 1)
 8004648:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10b      	bne.n	8004668 <draw_line+0x98>
	{
		uint16_t tmp = y0;
 8004650:	893b      	ldrh	r3, [r7, #8]
 8004652:	833b      	strh	r3, [r7, #24]
		y0 = x0;
 8004654:	897b      	ldrh	r3, [r7, #10]
 8004656:	813b      	strh	r3, [r7, #8]
		x0 = tmp;
 8004658:	8b3b      	ldrh	r3, [r7, #24]
 800465a:	817b      	strh	r3, [r7, #10]
		tmp = y1;
 800465c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800465e:	833b      	strh	r3, [r7, #24]
		y1 = x1;
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	853b      	strh	r3, [r7, #40]	; 0x28
		x1 = tmp;
 8004664:	8b3b      	ldrh	r3, [r7, #24]
 8004666:	80fb      	strh	r3, [r7, #6]
	}

	if (x0 > x1)
 8004668:	897a      	ldrh	r2, [r7, #10]
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	429a      	cmp	r2, r3
 800466e:	d90b      	bls.n	8004688 <draw_line+0xb8>
	{
		uint16_t tmp = x0;
 8004670:	897b      	ldrh	r3, [r7, #10]
 8004672:	82fb      	strh	r3, [r7, #22]
		x0 = x1;
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	817b      	strh	r3, [r7, #10]
		x1 = tmp;
 8004678:	8afb      	ldrh	r3, [r7, #22]
 800467a:	80fb      	strh	r3, [r7, #6]
		tmp = y0;
 800467c:	893b      	ldrh	r3, [r7, #8]
 800467e:	82fb      	strh	r3, [r7, #22]
		y0 = y1;
 8004680:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004682:	813b      	strh	r3, [r7, #8]
		y1 = tmp;
 8004684:	8afb      	ldrh	r3, [r7, #22]
 8004686:	853b      	strh	r3, [r7, #40]	; 0x28
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	897b      	ldrh	r3, [r7, #10]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	b29b      	uxth	r3, r3
 8004690:	82bb      	strh	r3, [r7, #20]
	dy = abs(y1 - y0);
 8004692:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004694:	893b      	ldrh	r3, [r7, #8]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	bfb8      	it	lt
 800469c:	425b      	neglt	r3, r3
 800469e:	827b      	strh	r3, [r7, #18]

	int16_t err = dx / 2;
 80046a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046a4:	0fda      	lsrs	r2, r3, #31
 80046a6:	4413      	add	r3, r2
 80046a8:	105b      	asrs	r3, r3, #1
 80046aa:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 80046ac:	893a      	ldrh	r2, [r7, #8]
 80046ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d202      	bcs.n	80046ba <draw_line+0xea>
	{
		ystep = 1;
 80046b4:	2301      	movs	r3, #1
 80046b6:	83bb      	strh	r3, [r7, #28]
 80046b8:	e02b      	b.n	8004712 <draw_line+0x142>
	}
	else
	{
		ystep = -1;
 80046ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046be:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++)
 80046c0:	e027      	b.n	8004712 <draw_line+0x142>
	{
		if (steep)
 80046c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <draw_line+0x10a>
		{
			draw_pixel(frame_buffer, y0, x0, brightness);
 80046ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80046ce:	897a      	ldrh	r2, [r7, #10]
 80046d0:	8939      	ldrh	r1, [r7, #8]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff fe90 	bl	80043f8 <draw_pixel>
 80046d8:	e006      	b.n	80046e8 <draw_line+0x118>
		}
		else
		{
			draw_pixel(frame_buffer, x0, y0, brightness);
 80046da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80046de:	893a      	ldrh	r2, [r7, #8]
 80046e0:	8979      	ldrh	r1, [r7, #10]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff fe88 	bl	80043f8 <draw_pixel>
		}
		err -= dy;
 80046e8:	8bfa      	ldrh	r2, [r7, #30]
 80046ea:	8a7b      	ldrh	r3, [r7, #18]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 80046f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da08      	bge.n	800470c <draw_line+0x13c>
		{
			y0 += ystep;
 80046fa:	8bba      	ldrh	r2, [r7, #28]
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	4413      	add	r3, r2
 8004700:	813b      	strh	r3, [r7, #8]
			err += dx;
 8004702:	8bfa      	ldrh	r2, [r7, #30]
 8004704:	8abb      	ldrh	r3, [r7, #20]
 8004706:	4413      	add	r3, r2
 8004708:	b29b      	uxth	r3, r3
 800470a:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++)
 800470c:	897b      	ldrh	r3, [r7, #10]
 800470e:	3301      	adds	r3, #1
 8004710:	817b      	strh	r3, [r7, #10]
 8004712:	897a      	ldrh	r2, [r7, #10]
 8004714:	88fb      	ldrh	r3, [r7, #6]
 8004716:	429a      	cmp	r2, r3
 8004718:	d9d3      	bls.n	80046c2 <draw_line+0xf2>
		}
	}
}
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <draw_AA_line>:
 *             y position of line ending
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
*/
void draw_AA_line(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8004724:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8004728:	b096      	sub	sp, #88	; 0x58
 800472a:	af02      	add	r7, sp, #8
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	4608      	mov	r0, r1
 8004730:	4611      	mov	r1, r2
 8004732:	461a      	mov	r2, r3
 8004734:	4603      	mov	r3, r0
 8004736:	817b      	strh	r3, [r7, #10]
 8004738:	460b      	mov	r3, r1
 800473a:	813b      	strh	r3, [r7, #8]
 800473c:	4613      	mov	r3, r2
 800473e:	80fb      	strh	r3, [r7, #6]
	//handle horizontal and vertical lines with appropriate functions
	if (x0 == x1)
 8004740:	897a      	ldrh	r2, [r7, #10]
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	429a      	cmp	r2, r3
 8004746:	d10a      	bne.n	800475e <draw_AA_line+0x3a>
	{
		draw_vline(frame_buffer, x0, y0, y1, brightness);
 8004748:	f8b7 0070 	ldrh.w	r0, [r7, #112]	; 0x70
 800474c:	893a      	ldrh	r2, [r7, #8]
 800474e:	8979      	ldrh	r1, [r7, #10]
 8004750:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	4603      	mov	r3, r0
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff fec9 	bl	80044f0 <draw_vline>
	}
	if (y0 == y1)
 800475e:	893a      	ldrh	r2, [r7, #8]
 8004760:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8004764:	429a      	cmp	r2, r3
 8004766:	d109      	bne.n	800477c <draw_AA_line+0x58>
	{
		draw_hline(frame_buffer, y0, x0, x1, brightness);
 8004768:	88f8      	ldrh	r0, [r7, #6]
 800476a:	897a      	ldrh	r2, [r7, #10]
 800476c:	8939      	ldrh	r1, [r7, #8]
 800476e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	4603      	mov	r3, r0
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7ff fef2 	bl	8004560 <draw_hline>
	}

	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
 800477c:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8004780:	893b      	ldrh	r3, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004788:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800478c:	88f9      	ldrh	r1, [r7, #6]
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	1acb      	subs	r3, r1, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	bfb8      	it	lt
 8004796:	425b      	neglt	r3, r3
 8004798:	429a      	cmp	r2, r3
 800479a:	bfcc      	ite	gt
 800479c:	2301      	movgt	r3, #1
 800479e:	2300      	movle	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	if (steep)
 80047a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d011      	beq.n	80047d2 <draw_AA_line+0xae>
	{
		uint16_t tmp = y0;
 80047ae:	893b      	ldrh	r3, [r7, #8]
 80047b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		y0 = x0;
 80047b4:	897b      	ldrh	r3, [r7, #10]
 80047b6:	813b      	strh	r3, [r7, #8]
		x0 = tmp;
 80047b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047bc:	817b      	strh	r3, [r7, #10]
		tmp = y1;
 80047be:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80047c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		y1 = x1;
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		x1 = tmp;
 80047cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047d0:	80fb      	strh	r3, [r7, #6]
	}
	if (x0 > x1)
 80047d2:	897a      	ldrh	r2, [r7, #10]
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d90d      	bls.n	80047f6 <draw_AA_line+0xd2>
	{
		uint16_t tmp = x0;
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
		x0 = x1;
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	817b      	strh	r3, [r7, #10]
		x1 = tmp;
 80047e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047e4:	80fb      	strh	r3, [r7, #6]
		tmp = y0;
 80047e6:	893b      	ldrh	r3, [r7, #8]
 80047e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
		y0 = y1;
 80047ea:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80047ee:	813b      	strh	r3, [r7, #8]
		y1 = tmp;
 80047f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047f2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	}

	float dx = x1 - x0;
 80047f6:	88fa      	ldrh	r2, [r7, #6]
 80047f8:	897b      	ldrh	r3, [r7, #10]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	ee07 3a90 	vmov	s15, r3
 8004800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004804:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float dy = y1 - y0;
 8004808:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800480c:	893b      	ldrh	r3, [r7, #8]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004818:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float gradient = dy / dx;
 800481c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8004820:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004828:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	// handle first endpoint
	float xend = round(x0);
 800482c:	897b      	ldrh	r3, [r7, #10]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fb ff3a 	bl	80006a8 <__aeabi_ui2d>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	f7fc f856 	bl	80008ec <__aeabi_d2f>
 8004840:	4603      	mov	r3, r0
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
	float yend = y0 + gradient * (xend - x0);
 8004844:	893b      	ldrh	r3, [r7, #8]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800484e:	897b      	ldrh	r3, [r7, #10]
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004858:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800485c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004860:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800486c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float xgap =  1 - ((x0 + 0.5) - floor(x0 + 0.5));
 8004870:	897b      	ldrh	r3, [r7, #10]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb ff28 	bl	80006c8 <__aeabi_i2d>
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	4b74      	ldr	r3, [pc, #464]	; (8004a50 <draw_AA_line+0x32c>)
 800487e:	f7fb fdd7 	bl	8000430 <__adddf3>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4614      	mov	r4, r2
 8004888:	461d      	mov	r5, r3
 800488a:	897b      	ldrh	r3, [r7, #10]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fb ff1b 	bl	80006c8 <__aeabi_i2d>
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	4b6e      	ldr	r3, [pc, #440]	; (8004a50 <draw_AA_line+0x32c>)
 8004898:	f7fb fdca 	bl	8000430 <__adddf3>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	ec43 2b17 	vmov	d7, r2, r3
 80048a4:	eeb0 0a47 	vmov.f32	s0, s14
 80048a8:	eef0 0a67 	vmov.f32	s1, s15
 80048ac:	f004 ffd4 	bl	8009858 <floor>
 80048b0:	ec53 2b10 	vmov	r2, r3, d0
 80048b4:	4620      	mov	r0, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	f7fb fdb8 	bl	800042c <__aeabi_dsub>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	f04f 0000 	mov.w	r0, #0
 80048c4:	4963      	ldr	r1, [pc, #396]	; (8004a54 <draw_AA_line+0x330>)
 80048c6:	f7fb fdb1 	bl	800042c <__aeabi_dsub>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	f7fc f80b 	bl	80008ec <__aeabi_d2f>
 80048d6:	4603      	mov	r3, r0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
	float xpxl1 = xend; // this will be used in the main loop
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	623b      	str	r3, [r7, #32]
	float ypxl1 = floor(yend);
 80048de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e0:	f7fb ff04 	bl	80006ec <__aeabi_f2d>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	ec43 2b10 	vmov	d0, r2, r3
 80048ec:	f004 ffb4 	bl	8009858 <floor>
 80048f0:	ec53 2b10 	vmov	r2, r3, d0
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	f7fb fff8 	bl	80008ec <__aeabi_d2f>
 80048fc:	4603      	mov	r3, r0
 80048fe:	61fb      	str	r3, [r7, #28]
	if (steep)
 8004900:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80a7 	beq.w	8004a58 <draw_AA_line+0x334>
	{
		draw_pixel(frame_buffer, ypxl1, xpxl1, (1-(yend - (floor(yend))) * xgap)*brightness);
 800490a:	edd7 7a07 	vldr	s15, [r7, #28]
 800490e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004912:	ee17 3a90 	vmov	r3, s15
 8004916:	b29e      	uxth	r6, r3
 8004918:	edd7 7a08 	vldr	s15, [r7, #32]
 800491c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004920:	ee17 3a90 	vmov	r3, s15
 8004924:	fa1f f883 	uxth.w	r8, r3
 8004928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800492a:	f7fb fedf 	bl	80006ec <__aeabi_f2d>
 800492e:	4604      	mov	r4, r0
 8004930:	460d      	mov	r5, r1
 8004932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004934:	f7fb feda 	bl	80006ec <__aeabi_f2d>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	ec43 2b10 	vmov	d0, r2, r3
 8004940:	f004 ff8a 	bl	8009858 <floor>
 8004944:	ec53 2b10 	vmov	r2, r3, d0
 8004948:	4620      	mov	r0, r4
 800494a:	4629      	mov	r1, r5
 800494c:	f7fb fd6e 	bl	800042c <__aeabi_dsub>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4614      	mov	r4, r2
 8004956:	461d      	mov	r5, r3
 8004958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800495a:	f7fb fec7 	bl	80006ec <__aeabi_f2d>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4620      	mov	r0, r4
 8004964:	4629      	mov	r1, r5
 8004966:	f7fb fc33 	bl	80001d0 <__aeabi_dmul>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	f04f 0000 	mov.w	r0, #0
 8004972:	4938      	ldr	r1, [pc, #224]	; (8004a54 <draw_AA_line+0x330>)
 8004974:	f7fb fd5a 	bl	800042c <__aeabi_dsub>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4614      	mov	r4, r2
 800497e:	461d      	mov	r5, r3
 8004980:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004984:	4618      	mov	r0, r3
 8004986:	f7fb fe9f 	bl	80006c8 <__aeabi_i2d>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4620      	mov	r0, r4
 8004990:	4629      	mov	r1, r5
 8004992:	f7fb fc1d 	bl	80001d0 <__aeabi_dmul>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	f7fb ff85 	bl	80008ac <__aeabi_d2uiz>
 80049a2:	4603      	mov	r3, r0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	4642      	mov	r2, r8
 80049a8:	4631      	mov	r1, r6
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff fd24 	bl	80043f8 <draw_pixel>
		draw_pixel(frame_buffer, ypxl1 + 1, xpxl1, (yend - (floor(yend)) * xgap)*brightness);
 80049b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80049b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c0:	ee17 3a90 	vmov	r3, s15
 80049c4:	b29e      	uxth	r6, r3
 80049c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80049ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ce:	ee17 3a90 	vmov	r3, s15
 80049d2:	fa1f f883 	uxth.w	r8, r3
 80049d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d8:	f7fb fe88 	bl	80006ec <__aeabi_f2d>
 80049dc:	4604      	mov	r4, r0
 80049de:	460d      	mov	r5, r1
 80049e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e2:	f7fb fe83 	bl	80006ec <__aeabi_f2d>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	ec43 2b10 	vmov	d0, r2, r3
 80049ee:	f004 ff33 	bl	8009858 <floor>
 80049f2:	ec5b ab10 	vmov	sl, fp, d0
 80049f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049f8:	f7fb fe78 	bl	80006ec <__aeabi_f2d>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4650      	mov	r0, sl
 8004a02:	4659      	mov	r1, fp
 8004a04:	f7fb fbe4 	bl	80001d0 <__aeabi_dmul>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7fb fd0c 	bl	800042c <__aeabi_dsub>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4614      	mov	r4, r2
 8004a1a:	461d      	mov	r5, r3
 8004a1c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fb fe51 	bl	80006c8 <__aeabi_i2d>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	f7fb fbcf 	bl	80001d0 <__aeabi_dmul>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4610      	mov	r0, r2
 8004a38:	4619      	mov	r1, r3
 8004a3a:	f7fb ff37 	bl	80008ac <__aeabi_d2uiz>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	4642      	mov	r2, r8
 8004a44:	4631      	mov	r1, r6
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff fcd6 	bl	80043f8 <draw_pixel>
 8004a4c:	e0a5      	b.n	8004b9a <draw_AA_line+0x476>
 8004a4e:	bf00      	nop
 8004a50:	3fe00000 	.word	0x3fe00000
 8004a54:	3ff00000 	.word	0x3ff00000
	}
	else
	{
		draw_pixel(frame_buffer, xpxl1, ypxl1, (1-(yend - (floor(yend))) * xgap)*brightness);
 8004a58:	edd7 7a08 	vldr	s15, [r7, #32]
 8004a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a60:	ee17 3a90 	vmov	r3, s15
 8004a64:	b29e      	uxth	r6, r3
 8004a66:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6e:	ee17 3a90 	vmov	r3, s15
 8004a72:	fa1f f883 	uxth.w	r8, r3
 8004a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a78:	f7fb fe38 	bl	80006ec <__aeabi_f2d>
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	460d      	mov	r5, r1
 8004a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a82:	f7fb fe33 	bl	80006ec <__aeabi_f2d>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	ec43 2b10 	vmov	d0, r2, r3
 8004a8e:	f004 fee3 	bl	8009858 <floor>
 8004a92:	ec53 2b10 	vmov	r2, r3, d0
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f7fb fcc7 	bl	800042c <__aeabi_dsub>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4614      	mov	r4, r2
 8004aa4:	461d      	mov	r5, r3
 8004aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aa8:	f7fb fe20 	bl	80006ec <__aeabi_f2d>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	f7fb fb8c 	bl	80001d0 <__aeabi_dmul>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	f04f 0000 	mov.w	r0, #0
 8004ac0:	49c0      	ldr	r1, [pc, #768]	; (8004dc4 <draw_AA_line+0x6a0>)
 8004ac2:	f7fb fcb3 	bl	800042c <__aeabi_dsub>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4614      	mov	r4, r2
 8004acc:	461d      	mov	r5, r3
 8004ace:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fb fdf8 	bl	80006c8 <__aeabi_i2d>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4620      	mov	r0, r4
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f7fb fb76 	bl	80001d0 <__aeabi_dmul>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	f7fb fede 	bl	80008ac <__aeabi_d2uiz>
 8004af0:	4603      	mov	r3, r0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	4642      	mov	r2, r8
 8004af6:	4631      	mov	r1, r6
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff fc7d 	bl	80043f8 <draw_pixel>
		draw_pixel(frame_buffer, xpxl1, ypxl1 + 1, (yend - (floor(yend)) * xgap)*brightness);
 8004afe:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b06:	ee17 3a90 	vmov	r3, s15
 8004b0a:	b29e      	uxth	r6, r3
 8004b0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1c:	ee17 3a90 	vmov	r3, s15
 8004b20:	fa1f f883 	uxth.w	r8, r3
 8004b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b26:	f7fb fde1 	bl	80006ec <__aeabi_f2d>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	460d      	mov	r5, r1
 8004b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b30:	f7fb fddc 	bl	80006ec <__aeabi_f2d>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	ec43 2b10 	vmov	d0, r2, r3
 8004b3c:	f004 fe8c 	bl	8009858 <floor>
 8004b40:	ec5b ab10 	vmov	sl, fp, d0
 8004b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b46:	f7fb fdd1 	bl	80006ec <__aeabi_f2d>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4650      	mov	r0, sl
 8004b50:	4659      	mov	r1, fp
 8004b52:	f7fb fb3d 	bl	80001d0 <__aeabi_dmul>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7fb fc65 	bl	800042c <__aeabi_dsub>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4614      	mov	r4, r2
 8004b68:	461d      	mov	r5, r3
 8004b6a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fb fdaa 	bl	80006c8 <__aeabi_i2d>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4620      	mov	r0, r4
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	f7fb fb28 	bl	80001d0 <__aeabi_dmul>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	f7fb fe90 	bl	80008ac <__aeabi_d2uiz>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	4642      	mov	r2, r8
 8004b92:	4631      	mov	r1, r6
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff fc2f 	bl	80043f8 <draw_pixel>
	}

	float intery = yend + gradient; // first y-intersection for the main loop
 8004b9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004b9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// handle second endpoint
	xend = round(x1);
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fb fd7b 	bl	80006a8 <__aeabi_ui2d>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7fb fe97 	bl	80008ec <__aeabi_d2f>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	yend = y1 + gradient * (xend - x1);
 8004bc2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bd8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8004bdc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004be0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	xgap = (x1 + 0.5) - floor(x1 + 0.5);
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fb fd68 	bl	80006c8 <__aeabi_i2d>
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	4b72      	ldr	r3, [pc, #456]	; (8004dc8 <draw_AA_line+0x6a4>)
 8004bfe:	f7fb fc17 	bl	8000430 <__adddf3>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4614      	mov	r4, r2
 8004c08:	461d      	mov	r5, r3
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fd5b 	bl	80006c8 <__aeabi_i2d>
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	4b6c      	ldr	r3, [pc, #432]	; (8004dc8 <draw_AA_line+0x6a4>)
 8004c18:	f7fb fc0a 	bl	8000430 <__adddf3>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	ec43 2b17 	vmov	d7, r2, r3
 8004c24:	eeb0 0a47 	vmov.f32	s0, s14
 8004c28:	eef0 0a67 	vmov.f32	s1, s15
 8004c2c:	f004 fe14 	bl	8009858 <floor>
 8004c30:	ec53 2b10 	vmov	r2, r3, d0
 8004c34:	4620      	mov	r0, r4
 8004c36:	4629      	mov	r1, r5
 8004c38:	f7fb fbf8 	bl	800042c <__aeabi_dsub>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	f7fb fe52 	bl	80008ec <__aeabi_d2f>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
	float xpxl2 = xend; //this will be used in the main loop
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	61bb      	str	r3, [r7, #24]
	float ypxl2 = floor(yend);
 8004c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c52:	f7fb fd4b 	bl	80006ec <__aeabi_f2d>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	ec43 2b10 	vmov	d0, r2, r3
 8004c5e:	f004 fdfb 	bl	8009858 <floor>
 8004c62:	ec53 2b10 	vmov	r2, r3, d0
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fb fe3f 	bl	80008ec <__aeabi_d2f>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	617b      	str	r3, [r7, #20]
	if (steep)
 8004c72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 80a8 	beq.w	8004dcc <draw_AA_line+0x6a8>
	{
		draw_pixel(frame_buffer, ypxl2, xpxl2, (1 - (yend - floor(yend)) * xgap)*brightness);
 8004c7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c84:	ee17 3a90 	vmov	r3, s15
 8004c88:	b29e      	uxth	r6, r3
 8004c8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c92:	ee17 3a90 	vmov	r3, s15
 8004c96:	fa1f f883 	uxth.w	r8, r3
 8004c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9c:	f7fb fd26 	bl	80006ec <__aeabi_f2d>
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca6:	f7fb fd21 	bl	80006ec <__aeabi_f2d>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	ec43 2b10 	vmov	d0, r2, r3
 8004cb2:	f004 fdd1 	bl	8009858 <floor>
 8004cb6:	ec53 2b10 	vmov	r2, r3, d0
 8004cba:	4620      	mov	r0, r4
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	f7fb fbb5 	bl	800042c <__aeabi_dsub>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4614      	mov	r4, r2
 8004cc8:	461d      	mov	r5, r3
 8004cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ccc:	f7fb fd0e 	bl	80006ec <__aeabi_f2d>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	f7fb fa7a 	bl	80001d0 <__aeabi_dmul>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	f04f 0000 	mov.w	r0, #0
 8004ce4:	4937      	ldr	r1, [pc, #220]	; (8004dc4 <draw_AA_line+0x6a0>)
 8004ce6:	f7fb fba1 	bl	800042c <__aeabi_dsub>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4614      	mov	r4, r2
 8004cf0:	461d      	mov	r5, r3
 8004cf2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fb fce6 	bl	80006c8 <__aeabi_i2d>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4620      	mov	r0, r4
 8004d02:	4629      	mov	r1, r5
 8004d04:	f7fb fa64 	bl	80001d0 <__aeabi_dmul>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f7fb fdcc 	bl	80008ac <__aeabi_d2uiz>
 8004d14:	4603      	mov	r3, r0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	4642      	mov	r2, r8
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff fb6b 	bl	80043f8 <draw_pixel>
		draw_pixel(frame_buffer, ypxl2 + 1, xpxl2, ((yend - floor(yend)) * xgap)*brightness);
 8004d22:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d32:	ee17 3a90 	vmov	r3, s15
 8004d36:	b29e      	uxth	r6, r3
 8004d38:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d40:	ee17 3a90 	vmov	r3, s15
 8004d44:	fa1f f883 	uxth.w	r8, r3
 8004d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d4a:	f7fb fccf 	bl	80006ec <__aeabi_f2d>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d54:	f7fb fcca 	bl	80006ec <__aeabi_f2d>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	ec43 2b10 	vmov	d0, r2, r3
 8004d60:	f004 fd7a 	bl	8009858 <floor>
 8004d64:	ec53 2b10 	vmov	r2, r3, d0
 8004d68:	4620      	mov	r0, r4
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	f7fb fb5e 	bl	800042c <__aeabi_dsub>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4614      	mov	r4, r2
 8004d76:	461d      	mov	r5, r3
 8004d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d7a:	f7fb fcb7 	bl	80006ec <__aeabi_f2d>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4620      	mov	r0, r4
 8004d84:	4629      	mov	r1, r5
 8004d86:	f7fb fa23 	bl	80001d0 <__aeabi_dmul>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4614      	mov	r4, r2
 8004d90:	461d      	mov	r5, r3
 8004d92:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fb fc96 	bl	80006c8 <__aeabi_i2d>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4620      	mov	r0, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	f7fb fa14 	bl	80001d0 <__aeabi_dmul>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	f7fb fd7c 	bl	80008ac <__aeabi_d2uiz>
 8004db4:	4603      	mov	r3, r0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	4642      	mov	r2, r8
 8004dba:	4631      	mov	r1, r6
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff fb1b 	bl	80043f8 <draw_pixel>
 8004dc2:	e0a6      	b.n	8004f12 <draw_AA_line+0x7ee>
 8004dc4:	3ff00000 	.word	0x3ff00000
 8004dc8:	3fe00000 	.word	0x3fe00000
	}
	else
	{
		draw_pixel(frame_buffer, xpxl2, ypxl2, (1 - (yend - floor(yend)) * xgap)*brightness);
 8004dcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd4:	ee17 3a90 	vmov	r3, s15
 8004dd8:	b29e      	uxth	r6, r3
 8004dda:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de2:	ee17 3a90 	vmov	r3, s15
 8004de6:	fa1f f883 	uxth.w	r8, r3
 8004dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dec:	f7fb fc7e 	bl	80006ec <__aeabi_f2d>
 8004df0:	4604      	mov	r4, r0
 8004df2:	460d      	mov	r5, r1
 8004df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df6:	f7fb fc79 	bl	80006ec <__aeabi_f2d>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	ec43 2b10 	vmov	d0, r2, r3
 8004e02:	f004 fd29 	bl	8009858 <floor>
 8004e06:	ec53 2b10 	vmov	r2, r3, d0
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f7fb fb0d 	bl	800042c <__aeabi_dsub>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4614      	mov	r4, r2
 8004e18:	461d      	mov	r5, r3
 8004e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e1c:	f7fb fc66 	bl	80006ec <__aeabi_f2d>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4620      	mov	r0, r4
 8004e26:	4629      	mov	r1, r5
 8004e28:	f7fb f9d2 	bl	80001d0 <__aeabi_dmul>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	f04f 0000 	mov.w	r0, #0
 8004e34:	499f      	ldr	r1, [pc, #636]	; (80050b4 <draw_AA_line+0x990>)
 8004e36:	f7fb faf9 	bl	800042c <__aeabi_dsub>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4614      	mov	r4, r2
 8004e40:	461d      	mov	r5, r3
 8004e42:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fb fc3e 	bl	80006c8 <__aeabi_i2d>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4620      	mov	r0, r4
 8004e52:	4629      	mov	r1, r5
 8004e54:	f7fb f9bc 	bl	80001d0 <__aeabi_dmul>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f7fb fd24 	bl	80008ac <__aeabi_d2uiz>
 8004e64:	4603      	mov	r3, r0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	4642      	mov	r2, r8
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7ff fac3 	bl	80043f8 <draw_pixel>
		draw_pixel(frame_buffer, xpxl2, ypxl2 + 1, ((yend - floor(yend)) * xgap)*brightness);
 8004e72:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7a:	ee17 3a90 	vmov	r3, s15
 8004e7e:	b29e      	uxth	r6, r3
 8004e80:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e90:	ee17 3a90 	vmov	r3, s15
 8004e94:	fa1f f883 	uxth.w	r8, r3
 8004e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9a:	f7fb fc27 	bl	80006ec <__aeabi_f2d>
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	460d      	mov	r5, r1
 8004ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea4:	f7fb fc22 	bl	80006ec <__aeabi_f2d>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	ec43 2b10 	vmov	d0, r2, r3
 8004eb0:	f004 fcd2 	bl	8009858 <floor>
 8004eb4:	ec53 2b10 	vmov	r2, r3, d0
 8004eb8:	4620      	mov	r0, r4
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f7fb fab6 	bl	800042c <__aeabi_dsub>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	461d      	mov	r5, r3
 8004ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eca:	f7fb fc0f 	bl	80006ec <__aeabi_f2d>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb f97b 	bl	80001d0 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4614      	mov	r4, r2
 8004ee0:	461d      	mov	r5, r3
 8004ee2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fb fbee 	bl	80006c8 <__aeabi_i2d>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	f7fb f96c 	bl	80001d0 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	f7fb fcd4 	bl	80008ac <__aeabi_d2uiz>
 8004f04:	4603      	mov	r3, r0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	4642      	mov	r2, r8
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7ff fa73 	bl	80043f8 <draw_pixel>
	}

	// main loop
	if (steep)
 8004f12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80bf 	beq.w	800509a <draw_AA_line+0x976>
	{
		for (int x = xpxl1 + 1; x <= xpxl2 - 1; x++)
 8004f1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f2c:	ee17 3a90 	vmov	r3, s15
 8004f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f32:	e0a0      	b.n	8005076 <draw_AA_line+0x952>
		{
			draw_pixel(frame_buffer, floor(intery), x, (1 - (intery - floor(intery)))*brightness);
 8004f34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004f36:	f7fb fbd9 	bl	80006ec <__aeabi_f2d>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	ec43 2b10 	vmov	d0, r2, r3
 8004f42:	f004 fc89 	bl	8009858 <floor>
 8004f46:	ec53 2b10 	vmov	r2, r3, d0
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f7fb fcad 	bl	80008ac <__aeabi_d2uiz>
 8004f52:	4603      	mov	r3, r0
 8004f54:	b29e      	uxth	r6, r3
 8004f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f58:	fa1f f883 	uxth.w	r8, r3
 8004f5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004f5e:	f7fb fbc5 	bl	80006ec <__aeabi_f2d>
 8004f62:	4604      	mov	r4, r0
 8004f64:	460d      	mov	r5, r1
 8004f66:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004f68:	f7fb fbc0 	bl	80006ec <__aeabi_f2d>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	ec43 2b10 	vmov	d0, r2, r3
 8004f74:	f004 fc70 	bl	8009858 <floor>
 8004f78:	ec53 2b10 	vmov	r2, r3, d0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb fa54 	bl	800042c <__aeabi_dsub>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	f04f 0000 	mov.w	r0, #0
 8004f8c:	4949      	ldr	r1, [pc, #292]	; (80050b4 <draw_AA_line+0x990>)
 8004f8e:	f7fb fa4d 	bl	800042c <__aeabi_dsub>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4614      	mov	r4, r2
 8004f98:	461d      	mov	r5, r3
 8004f9a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fb fb92 	bl	80006c8 <__aeabi_i2d>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4620      	mov	r0, r4
 8004faa:	4629      	mov	r1, r5
 8004fac:	f7fb f910 	bl	80001d0 <__aeabi_dmul>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f7fb fc78 	bl	80008ac <__aeabi_d2uiz>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff fa17 	bl	80043f8 <draw_pixel>
			draw_pixel(frame_buffer, floor(intery) + 1, x, (intery - floor(intery))*brightness);
 8004fca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004fcc:	f7fb fb8e 	bl	80006ec <__aeabi_f2d>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	ec43 2b10 	vmov	d0, r2, r3
 8004fd8:	f004 fc3e 	bl	8009858 <floor>
 8004fdc:	ec51 0b10 	vmov	r0, r1, d0
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <draw_AA_line+0x990>)
 8004fe6:	f7fb fa23 	bl	8000430 <__adddf3>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f7fb fc5b 	bl	80008ac <__aeabi_d2uiz>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	b29e      	uxth	r6, r3
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffc:	fa1f f883 	uxth.w	r8, r3
 8005000:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005002:	f7fb fb73 	bl	80006ec <__aeabi_f2d>
 8005006:	4604      	mov	r4, r0
 8005008:	460d      	mov	r5, r1
 800500a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800500c:	f7fb fb6e 	bl	80006ec <__aeabi_f2d>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	ec43 2b10 	vmov	d0, r2, r3
 8005018:	f004 fc1e 	bl	8009858 <floor>
 800501c:	ec53 2b10 	vmov	r2, r3, d0
 8005020:	4620      	mov	r0, r4
 8005022:	4629      	mov	r1, r5
 8005024:	f7fb fa02 	bl	800042c <__aeabi_dsub>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4614      	mov	r4, r2
 800502e:	461d      	mov	r5, r3
 8005030:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8005034:	4618      	mov	r0, r3
 8005036:	f7fb fb47 	bl	80006c8 <__aeabi_i2d>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb f8c5 	bl	80001d0 <__aeabi_dmul>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	f7fb fc2d 	bl	80008ac <__aeabi_d2uiz>
 8005052:	4603      	mov	r3, r0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	4642      	mov	r2, r8
 8005058:	4631      	mov	r1, r6
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff f9cc 	bl	80043f8 <draw_pixel>
			intery = intery + gradient;
 8005060:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005064:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800506c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		for (int x = xpxl1 + 1; x <= xpxl2 - 1; x++)
 8005070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005072:	3301      	adds	r3, #1
 8005074:	64bb      	str	r3, [r7, #72]	; 0x48
 8005076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005078:	ee07 3a90 	vmov	s15, r3
 800507c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005080:	edd7 7a06 	vldr	s15, [r7, #24]
 8005084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005088:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800508c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005094:	f67f af4e 	bls.w	8004f34 <draw_AA_line+0x810>
			draw_pixel(frame_buffer, x, floor(intery), (1 - (intery - floor(intery)))*brightness);
			draw_pixel(frame_buffer, x, floor(intery) + 1, (intery - floor(intery))*brightness);
			intery = intery + gradient;
		}
	}
}
 8005098:	e0c0      	b.n	800521c <draw_AA_line+0xaf8>
		for (int x = xpxl1 + 1; x <= xpxl2 - 1; x++)
 800509a:	edd7 7a08 	vldr	s15, [r7, #32]
 800509e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050aa:	ee17 3a90 	vmov	r3, s15
 80050ae:	647b      	str	r3, [r7, #68]	; 0x44
 80050b0:	e0a3      	b.n	80051fa <draw_AA_line+0xad6>
 80050b2:	bf00      	nop
 80050b4:	3ff00000 	.word	0x3ff00000
			draw_pixel(frame_buffer, x, floor(intery), (1 - (intery - floor(intery)))*brightness);
 80050b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ba:	b29e      	uxth	r6, r3
 80050bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80050be:	f7fb fb15 	bl	80006ec <__aeabi_f2d>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	ec43 2b10 	vmov	d0, r2, r3
 80050ca:	f004 fbc5 	bl	8009858 <floor>
 80050ce:	ec53 2b10 	vmov	r2, r3, d0
 80050d2:	4610      	mov	r0, r2
 80050d4:	4619      	mov	r1, r3
 80050d6:	f7fb fbe9 	bl	80008ac <__aeabi_d2uiz>
 80050da:	4603      	mov	r3, r0
 80050dc:	fa1f f883 	uxth.w	r8, r3
 80050e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80050e2:	f7fb fb03 	bl	80006ec <__aeabi_f2d>
 80050e6:	4604      	mov	r4, r0
 80050e8:	460d      	mov	r5, r1
 80050ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80050ec:	f7fb fafe 	bl	80006ec <__aeabi_f2d>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	ec43 2b10 	vmov	d0, r2, r3
 80050f8:	f004 fbae 	bl	8009858 <floor>
 80050fc:	ec53 2b10 	vmov	r2, r3, d0
 8005100:	4620      	mov	r0, r4
 8005102:	4629      	mov	r1, r5
 8005104:	f7fb f992 	bl	800042c <__aeabi_dsub>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	f04f 0000 	mov.w	r0, #0
 8005110:	4945      	ldr	r1, [pc, #276]	; (8005228 <draw_AA_line+0xb04>)
 8005112:	f7fb f98b 	bl	800042c <__aeabi_dsub>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4614      	mov	r4, r2
 800511c:	461d      	mov	r5, r3
 800511e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8005122:	4618      	mov	r0, r3
 8005124:	f7fb fad0 	bl	80006c8 <__aeabi_i2d>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb f84e 	bl	80001d0 <__aeabi_dmul>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4610      	mov	r0, r2
 800513a:	4619      	mov	r1, r3
 800513c:	f7fb fbb6 	bl	80008ac <__aeabi_d2uiz>
 8005140:	4603      	mov	r3, r0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	4642      	mov	r2, r8
 8005146:	4631      	mov	r1, r6
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff f955 	bl	80043f8 <draw_pixel>
			draw_pixel(frame_buffer, x, floor(intery) + 1, (intery - floor(intery))*brightness);
 800514e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005150:	b29e      	uxth	r6, r3
 8005152:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005154:	f7fb faca 	bl	80006ec <__aeabi_f2d>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	ec43 2b10 	vmov	d0, r2, r3
 8005160:	f004 fb7a 	bl	8009858 <floor>
 8005164:	ec51 0b10 	vmov	r0, r1, d0
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <draw_AA_line+0xb04>)
 800516e:	f7fb f95f 	bl	8000430 <__adddf3>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	f7fb fb97 	bl	80008ac <__aeabi_d2uiz>
 800517e:	4603      	mov	r3, r0
 8005180:	fa1f f883 	uxth.w	r8, r3
 8005184:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005186:	f7fb fab1 	bl	80006ec <__aeabi_f2d>
 800518a:	4604      	mov	r4, r0
 800518c:	460d      	mov	r5, r1
 800518e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005190:	f7fb faac 	bl	80006ec <__aeabi_f2d>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	ec43 2b10 	vmov	d0, r2, r3
 800519c:	f004 fb5c 	bl	8009858 <floor>
 80051a0:	ec53 2b10 	vmov	r2, r3, d0
 80051a4:	4620      	mov	r0, r4
 80051a6:	4629      	mov	r1, r5
 80051a8:	f7fb f940 	bl	800042c <__aeabi_dsub>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	461d      	mov	r5, r3
 80051b4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb fa85 	bl	80006c8 <__aeabi_i2d>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4620      	mov	r0, r4
 80051c4:	4629      	mov	r1, r5
 80051c6:	f7fb f803 	bl	80001d0 <__aeabi_dmul>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	f7fb fb6b 	bl	80008ac <__aeabi_d2uiz>
 80051d6:	4603      	mov	r3, r0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	4642      	mov	r2, r8
 80051dc:	4631      	mov	r1, r6
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff f90a 	bl	80043f8 <draw_pixel>
			intery = intery + gradient;
 80051e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80051e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80051ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		for (int x = xpxl1 + 1; x <= xpxl2 - 1; x++)
 80051f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f6:	3301      	adds	r3, #1
 80051f8:	647b      	str	r3, [r7, #68]	; 0x44
 80051fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005204:	edd7 7a06 	vldr	s15, [r7, #24]
 8005208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005218:	f67f af4e 	bls.w	80050b8 <draw_AA_line+0x994>
}
 800521c:	bf00      	nop
 800521e:	3750      	adds	r7, #80	; 0x50
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8005226:	bf00      	nop
 8005228:	3ff00000 	.word	0x3ff00000

0800522c <draw_rect>:
 *             y position of second corner
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_rect(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4603      	mov	r3, r0
 800523c:	817b      	strh	r3, [r7, #10]
 800523e:	460b      	mov	r3, r1
 8005240:	813b      	strh	r3, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	80fb      	strh	r3, [r7, #6]
	draw_vline(frame_buffer, x0, y0, y1, brightness);
 8005246:	8b38      	ldrh	r0, [r7, #24]
 8005248:	893a      	ldrh	r2, [r7, #8]
 800524a:	8979      	ldrh	r1, [r7, #10]
 800524c:	7f3b      	ldrb	r3, [r7, #28]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	4603      	mov	r3, r0
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff f94c 	bl	80044f0 <draw_vline>
	draw_vline(frame_buffer, x1, y0, y1, brightness);
 8005258:	8b38      	ldrh	r0, [r7, #24]
 800525a:	893a      	ldrh	r2, [r7, #8]
 800525c:	88f9      	ldrh	r1, [r7, #6]
 800525e:	7f3b      	ldrb	r3, [r7, #28]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	4603      	mov	r3, r0
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff f943 	bl	80044f0 <draw_vline>
	draw_hline(frame_buffer, y0, x0, x1, brightness);
 800526a:	88f8      	ldrh	r0, [r7, #6]
 800526c:	897a      	ldrh	r2, [r7, #10]
 800526e:	8939      	ldrh	r1, [r7, #8]
 8005270:	7f3b      	ldrb	r3, [r7, #28]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	4603      	mov	r3, r0
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff f972 	bl	8004560 <draw_hline>
	draw_hline(frame_buffer, y1, x0, x1, brightness);
 800527c:	88f8      	ldrh	r0, [r7, #6]
 800527e:	897a      	ldrh	r2, [r7, #10]
 8005280:	8b39      	ldrh	r1, [r7, #24]
 8005282:	7f3b      	ldrb	r3, [r7, #28]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	4603      	mov	r3, r0
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff f969 	bl	8004560 <draw_hline>
}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <draw_rect_filled>:
 *             y position of second corner
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_rect_filled(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b086      	sub	sp, #24
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	4608      	mov	r0, r1
 80052a0:	4611      	mov	r1, r2
 80052a2:	461a      	mov	r2, r3
 80052a4:	4603      	mov	r3, r0
 80052a6:	817b      	strh	r3, [r7, #10]
 80052a8:	460b      	mov	r3, r1
 80052aa:	813b      	strh	r3, [r7, #8]
 80052ac:	4613      	mov	r3, r2
 80052ae:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = x0; i <= x1; i++)
 80052b0:	897b      	ldrh	r3, [r7, #10]
 80052b2:	82fb      	strh	r3, [r7, #22]
 80052b4:	e013      	b.n	80052de <draw_rect_filled+0x48>
	{
		for (uint16_t j = y0; j <= y1; j++)
 80052b6:	893b      	ldrh	r3, [r7, #8]
 80052b8:	82bb      	strh	r3, [r7, #20]
 80052ba:	e009      	b.n	80052d0 <draw_rect_filled+0x3a>
		{
			draw_pixel(frame_buffer, i, j, brightness);
 80052bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052c0:	8aba      	ldrh	r2, [r7, #20]
 80052c2:	8af9      	ldrh	r1, [r7, #22]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff f897 	bl	80043f8 <draw_pixel>
		for (uint16_t j = y0; j <= y1; j++)
 80052ca:	8abb      	ldrh	r3, [r7, #20]
 80052cc:	3301      	adds	r3, #1
 80052ce:	82bb      	strh	r3, [r7, #20]
 80052d0:	8aba      	ldrh	r2, [r7, #20]
 80052d2:	8c3b      	ldrh	r3, [r7, #32]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d9f1      	bls.n	80052bc <draw_rect_filled+0x26>
	for (uint16_t i = x0; i <= x1; i++)
 80052d8:	8afb      	ldrh	r3, [r7, #22]
 80052da:	3301      	adds	r3, #1
 80052dc:	82fb      	strh	r3, [r7, #22]
 80052de:	8afa      	ldrh	r2, [r7, #22]
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d9e7      	bls.n	80052b6 <draw_rect_filled+0x20>
		}
	}
}
 80052e6:	bf00      	nop
 80052e8:	bf00      	nop
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <draw_circle>:
 *             radius of the circle (pixels)
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_circle(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t r, uint8_t brightness)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	4608      	mov	r0, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	461a      	mov	r2, r3
 80052fe:	4603      	mov	r3, r0
 8005300:	817b      	strh	r3, [r7, #10]
 8005302:	460b      	mov	r3, r1
 8005304:	813b      	strh	r3, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	f1c3 0301 	rsb	r3, r3, #1
 8005310:	b29b      	uxth	r3, r3
 8005312:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8005314:	2301      	movs	r3, #1
 8005316:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	461a      	mov	r2, r3
 800531c:	03d2      	lsls	r2, r2, #15
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	b29b      	uxth	r3, r3
 8005324:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	82fb      	strh	r3, [r7, #22]

  draw_pixel(frame_buffer, x0, y0 + r, brightness);
 800532e:	893a      	ldrh	r2, [r7, #8]
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	4413      	add	r3, r2
 8005334:	b29a      	uxth	r2, r3
 8005336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7ff f85b 	bl	80043f8 <draw_pixel>
  draw_pixel(frame_buffer, x0, y0 - r, brightness);
 8005342:	893a      	ldrh	r2, [r7, #8]
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	b29a      	uxth	r2, r3
 800534a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800534e:	8979      	ldrh	r1, [r7, #10]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f7ff f851 	bl	80043f8 <draw_pixel>
  draw_pixel(frame_buffer, x0 + r, y0, brightness);
 8005356:	897a      	ldrh	r2, [r7, #10]
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	4413      	add	r3, r2
 800535c:	b299      	uxth	r1, r3
 800535e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005362:	893a      	ldrh	r2, [r7, #8]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff f847 	bl	80043f8 <draw_pixel>
  draw_pixel(frame_buffer, x0 - r, y0, brightness);
 800536a:	897a      	ldrh	r2, [r7, #10]
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	b299      	uxth	r1, r3
 8005372:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005376:	893a      	ldrh	r2, [r7, #8]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff f83d 	bl	80043f8 <draw_pixel>

  while (x < y)
 800537e:	e089      	b.n	8005494 <draw_circle+0x1a4>
  {
    if (f >= 0)
 8005380:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005384:	2b00      	cmp	r3, #0
 8005386:	db0e      	blt.n	80053a6 <draw_circle+0xb6>
    {
      y--;
 8005388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29b      	uxth	r3, r3
 8005392:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8005394:	8b7b      	ldrh	r3, [r7, #26]
 8005396:	3302      	adds	r3, #2
 8005398:	b29b      	uxth	r3, r3
 800539a:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 800539c:	8bfa      	ldrh	r2, [r7, #30]
 800539e:	8b7b      	ldrh	r3, [r7, #26]
 80053a0:	4413      	add	r3, r2
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 80053a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3301      	adds	r3, #1
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 80053b2:	8bbb      	ldrh	r3, [r7, #28]
 80053b4:	3302      	adds	r3, #2
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 80053ba:	8bfa      	ldrh	r2, [r7, #30]
 80053bc:	8bbb      	ldrh	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	83fb      	strh	r3, [r7, #30]

    draw_pixel(frame_buffer, x0 + x, y0 + y, brightness);
 80053c4:	8b3a      	ldrh	r2, [r7, #24]
 80053c6:	897b      	ldrh	r3, [r7, #10]
 80053c8:	4413      	add	r3, r2
 80053ca:	b299      	uxth	r1, r3
 80053cc:	8afa      	ldrh	r2, [r7, #22]
 80053ce:	893b      	ldrh	r3, [r7, #8]
 80053d0:	4413      	add	r3, r2
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff f80d 	bl	80043f8 <draw_pixel>
    draw_pixel(frame_buffer, x0 - x, y0 + y, brightness);
 80053de:	8b3b      	ldrh	r3, [r7, #24]
 80053e0:	897a      	ldrh	r2, [r7, #10]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	b299      	uxth	r1, r3
 80053e6:	8afa      	ldrh	r2, [r7, #22]
 80053e8:	893b      	ldrh	r3, [r7, #8]
 80053ea:	4413      	add	r3, r2
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff f800 	bl	80043f8 <draw_pixel>
    draw_pixel(frame_buffer, x0 + x, y0 - y, brightness);
 80053f8:	8b3a      	ldrh	r2, [r7, #24]
 80053fa:	897b      	ldrh	r3, [r7, #10]
 80053fc:	4413      	add	r3, r2
 80053fe:	b299      	uxth	r1, r3
 8005400:	8afb      	ldrh	r3, [r7, #22]
 8005402:	893a      	ldrh	r2, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	b29a      	uxth	r2, r3
 8005408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7fe fff3 	bl	80043f8 <draw_pixel>
    draw_pixel(frame_buffer, x0 - x, y0 - y, brightness);
 8005412:	8b3b      	ldrh	r3, [r7, #24]
 8005414:	897a      	ldrh	r2, [r7, #10]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	b299      	uxth	r1, r3
 800541a:	8afb      	ldrh	r3, [r7, #22]
 800541c:	893a      	ldrh	r2, [r7, #8]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	b29a      	uxth	r2, r3
 8005422:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7fe ffe6 	bl	80043f8 <draw_pixel>
    draw_pixel(frame_buffer, x0 + y, y0 + x, brightness);
 800542c:	8afa      	ldrh	r2, [r7, #22]
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	4413      	add	r3, r2
 8005432:	b299      	uxth	r1, r3
 8005434:	8b3a      	ldrh	r2, [r7, #24]
 8005436:	893b      	ldrh	r3, [r7, #8]
 8005438:	4413      	add	r3, r2
 800543a:	b29a      	uxth	r2, r3
 800543c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7fe ffd9 	bl	80043f8 <draw_pixel>
    draw_pixel(frame_buffer, x0 - y, y0 + x, brightness);
 8005446:	8afb      	ldrh	r3, [r7, #22]
 8005448:	897a      	ldrh	r2, [r7, #10]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	b299      	uxth	r1, r3
 800544e:	8b3a      	ldrh	r2, [r7, #24]
 8005450:	893b      	ldrh	r3, [r7, #8]
 8005452:	4413      	add	r3, r2
 8005454:	b29a      	uxth	r2, r3
 8005456:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7fe ffcc 	bl	80043f8 <draw_pixel>
    draw_pixel(frame_buffer, x0 + y, y0 - x, brightness);
 8005460:	8afa      	ldrh	r2, [r7, #22]
 8005462:	897b      	ldrh	r3, [r7, #10]
 8005464:	4413      	add	r3, r2
 8005466:	b299      	uxth	r1, r3
 8005468:	8b3b      	ldrh	r3, [r7, #24]
 800546a:	893a      	ldrh	r2, [r7, #8]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	b29a      	uxth	r2, r3
 8005470:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7fe ffbf 	bl	80043f8 <draw_pixel>
    draw_pixel(frame_buffer, x0 - y, y0 - x, brightness);
 800547a:	8afb      	ldrh	r3, [r7, #22]
 800547c:	897a      	ldrh	r2, [r7, #10]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	b299      	uxth	r1, r3
 8005482:	8b3b      	ldrh	r3, [r7, #24]
 8005484:	893a      	ldrh	r2, [r7, #8]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	b29a      	uxth	r2, r3
 800548a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7fe ffb2 	bl	80043f8 <draw_pixel>
  while (x < y)
 8005494:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005498:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800549c:	429a      	cmp	r2, r3
 800549e:	f6ff af6f 	blt.w	8005380 <draw_circle+0x90>
  }
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <draw_bitmap_8bpp>:
 *             width of bitmap in pixels
 *  @param[in] y_size
 *             height of bitmap in pixels
 */
void draw_bitmap_8bpp(uint8_t *frame_buffer, const uint8_t *bitmap, uint16_t x0, uint16_t y0, uint16_t x_size, uint16_t y_size)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	4611      	mov	r1, r2
 80054b8:	461a      	mov	r2, r3
 80054ba:	460b      	mov	r3, r1
 80054bc:	80fb      	strh	r3, [r7, #6]
 80054be:	4613      	mov	r3, r2
 80054c0:	80bb      	strh	r3, [r7, #4]
	uint16_t bitmap_pos = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = y0; i < y0 + y_size; i++)
 80054c6:	88bb      	ldrh	r3, [r7, #4]
 80054c8:	82bb      	strh	r3, [r7, #20]
 80054ca:	e01c      	b.n	8005506 <draw_bitmap_8bpp+0x5a>
	{
		for (uint16_t j = x0; j < x0 + x_size; j++)
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	827b      	strh	r3, [r7, #18]
 80054d0:	e010      	b.n	80054f4 <draw_bitmap_8bpp+0x48>
		{
			draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos] >> 4);
 80054d2:	8afb      	ldrh	r3, [r7, #22]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	4413      	add	r3, r2
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	8aba      	ldrh	r2, [r7, #20]
 80054e0:	8a79      	ldrh	r1, [r7, #18]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7fe ff88 	bl	80043f8 <draw_pixel>
			bitmap_pos++;
 80054e8:	8afb      	ldrh	r3, [r7, #22]
 80054ea:	3301      	adds	r3, #1
 80054ec:	82fb      	strh	r3, [r7, #22]
		for (uint16_t j = x0; j < x0 + x_size; j++)
 80054ee:	8a7b      	ldrh	r3, [r7, #18]
 80054f0:	3301      	adds	r3, #1
 80054f2:	827b      	strh	r3, [r7, #18]
 80054f4:	8a7a      	ldrh	r2, [r7, #18]
 80054f6:	88f9      	ldrh	r1, [r7, #6]
 80054f8:	8c3b      	ldrh	r3, [r7, #32]
 80054fa:	440b      	add	r3, r1
 80054fc:	429a      	cmp	r2, r3
 80054fe:	dbe8      	blt.n	80054d2 <draw_bitmap_8bpp+0x26>
	for (uint16_t i = y0; i < y0 + y_size; i++)
 8005500:	8abb      	ldrh	r3, [r7, #20]
 8005502:	3301      	adds	r3, #1
 8005504:	82bb      	strh	r3, [r7, #20]
 8005506:	8aba      	ldrh	r2, [r7, #20]
 8005508:	88b9      	ldrh	r1, [r7, #4]
 800550a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800550c:	440b      	add	r3, r1
 800550e:	429a      	cmp	r2, r3
 8005510:	dbdc      	blt.n	80054cc <draw_bitmap_8bpp+0x20>
		}
	}
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <draw_bitmap_4bpp>:
 *             width of bitmap in pixels
 *  @param[in] y_size
 *             height of bitmap in pixels
 */
void draw_bitmap_4bpp(uint8_t *frame_buffer, const uint8_t *bitmap, uint16_t x0, uint16_t y0, uint16_t x_size, uint16_t y_size)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4611      	mov	r1, r2
 8005528:	461a      	mov	r2, r3
 800552a:	460b      	mov	r3, r1
 800552c:	80fb      	strh	r3, [r7, #6]
 800552e:	4613      	mov	r3, r2
 8005530:	80bb      	strh	r3, [r7, #4]
	uint16_t bitmap_pos = 0;       //byte index in bitmap array
 8005532:	2300      	movs	r3, #0
 8005534:	83fb      	strh	r3, [r7, #30]
	uint16_t processed_pixels = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	83bb      	strh	r3, [r7, #28]
	uint8_t pixel_parity = 0;      //if pixel is even = 0; odd = 1
 800553a:	2300      	movs	r3, #0
 800553c:	75fb      	strb	r3, [r7, #23]

	for (uint16_t i = y0; i < y0 + y_size; i++)
 800553e:	88bb      	ldrh	r3, [r7, #4]
 8005540:	837b      	strh	r3, [r7, #26]
 8005542:	e034      	b.n	80055ae <draw_bitmap_4bpp+0x92>
	{
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	833b      	strh	r3, [r7, #24]
 8005548:	e028      	b.n	800559c <draw_bitmap_4bpp+0x80>
		{
			pixel_parity = processed_pixels % 2;
 800554a:	8bbb      	ldrh	r3, [r7, #28]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	75fb      	strb	r3, [r7, #23]

			if(pixel_parity == 0)
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10e      	bne.n	8005578 <draw_bitmap_4bpp+0x5c>
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos] >> 4);
 800555a:	8bfb      	ldrh	r3, [r7, #30]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	4413      	add	r3, r2
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	b2db      	uxtb	r3, r3
 8005566:	8b7a      	ldrh	r2, [r7, #26]
 8005568:	8b39      	ldrh	r1, [r7, #24]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7fe ff44 	bl	80043f8 <draw_pixel>
				processed_pixels++;
 8005570:	8bbb      	ldrh	r3, [r7, #28]
 8005572:	3301      	adds	r3, #1
 8005574:	83bb      	strh	r3, [r7, #28]
 8005576:	e00e      	b.n	8005596 <draw_bitmap_4bpp+0x7a>
			}
			else
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos]);
 8005578:	8bfb      	ldrh	r3, [r7, #30]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	4413      	add	r3, r2
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	8b7a      	ldrh	r2, [r7, #26]
 8005582:	8b39      	ldrh	r1, [r7, #24]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7fe ff37 	bl	80043f8 <draw_pixel>
				processed_pixels++;
 800558a:	8bbb      	ldrh	r3, [r7, #28]
 800558c:	3301      	adds	r3, #1
 800558e:	83bb      	strh	r3, [r7, #28]
				bitmap_pos++;
 8005590:	8bfb      	ldrh	r3, [r7, #30]
 8005592:	3301      	adds	r3, #1
 8005594:	83fb      	strh	r3, [r7, #30]
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8005596:	8b3b      	ldrh	r3, [r7, #24]
 8005598:	3301      	adds	r3, #1
 800559a:	833b      	strh	r3, [r7, #24]
 800559c:	8b3a      	ldrh	r2, [r7, #24]
 800559e:	88f9      	ldrh	r1, [r7, #6]
 80055a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055a2:	440b      	add	r3, r1
 80055a4:	429a      	cmp	r2, r3
 80055a6:	dbd0      	blt.n	800554a <draw_bitmap_4bpp+0x2e>
	for (uint16_t i = y0; i < y0 + y_size; i++)
 80055a8:	8b7b      	ldrh	r3, [r7, #26]
 80055aa:	3301      	adds	r3, #1
 80055ac:	837b      	strh	r3, [r7, #26]
 80055ae:	8b7a      	ldrh	r2, [r7, #26]
 80055b0:	88b9      	ldrh	r1, [r7, #4]
 80055b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055b4:	440b      	add	r3, r1
 80055b6:	429a      	cmp	r2, r3
 80055b8:	dbc4      	blt.n	8005544 <draw_bitmap_4bpp+0x28>
			}
		}
	}
}
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <select_font>:
 *
 *  @param[in] new_gfx_font
 *             pointer to font structure
 */
void select_font(const GFXfont *new_gfx_font)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 80055cc:	4a04      	ldr	r2, [pc, #16]	; (80055e0 <select_font+0x1c>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6013      	str	r3, [r2, #0]
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	2000a38c 	.word	0x2000a38c

080055e4 <draw_char>:
 *             y position of bottom left corner of character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	; 0x28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	4608      	mov	r0, r1
 80055ee:	4611      	mov	r1, r2
 80055f0:	461a      	mov	r2, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	72fb      	strb	r3, [r7, #11]
 80055f6:	460b      	mov	r3, r1
 80055f8:	813b      	strh	r3, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 80055fe:	4b44      	ldr	r3, [pc, #272]	; (8005710 <draw_char+0x12c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d07f      	beq.n	8005706 <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 8005606:	4b42      	ldr	r3, [pc, #264]	; (8005710 <draw_char+0x12c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	891b      	ldrh	r3, [r3, #8]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	7afa      	ldrb	r2, [r7, #11]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 8005614:	4b3e      	ldr	r3, [pc, #248]	; (8005710 <draw_char+0x12c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	7afb      	ldrb	r3, [r7, #11]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4413      	add	r3, r2
 8005620:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 8005622:	4b3b      	ldr	r3, [pc, #236]	; (8005710 <draw_char+0x12c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t width = glyph->width;
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	789b      	ldrb	r3, [r3, #2]
 8005634:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	78db      	ldrb	r3, [r3, #3]
 800563a:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	795b      	ldrb	r3, [r3, #5]
 8005640:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	799b      	ldrb	r3, [r3, #6]
 8005646:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t bits = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t y_pos = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t x_pos = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e048      	b.n	80056fa <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800566e:	e03a      	b.n	80056e6 <draw_char+0x102>
		{
			if (!(bit++ & 7))
 8005670:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b00      	cmp	r3, #0
 8005680:	d108      	bne.n	8005694 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8005682:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	84fa      	strh	r2, [r7, #38]	; 0x26
 8005688:	461a      	mov	r2, r3
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	4413      	add	r3, r2
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			if (bits & 0x80)
 8005694:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	da1a      	bge.n	80056d2 <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 800569c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	893b      	ldrh	r3, [r7, #8]
 80056a4:	4413      	add	r3, r2
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	b299      	uxth	r1, r3
 80056b2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	88fb      	ldrh	r3, [r7, #6]
 80056ba:	4413      	add	r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7fe fe93 	bl	80043f8 <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 80056d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 80056dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80056e0:	3301      	adds	r3, #1
 80056e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d3bf      	bcc.n	8005670 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 80056f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056f4:	3301      	adds	r3, #1
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80056fe:	7dbb      	ldrb	r3, [r7, #22]
 8005700:	429a      	cmp	r2, r3
 8005702:	d3b1      	bcc.n	8005668 <draw_char+0x84>
 8005704:	e000      	b.n	8005708 <draw_char+0x124>
		return;
 8005706:	bf00      	nop
		}
	}
}
 8005708:	3728      	adds	r7, #40	; 0x28
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	2000a38c 	.word	0x2000a38c

08005714 <draw_text>:
 *             y position of bottom left corner of first character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af02      	add	r7, sp, #8
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	4611      	mov	r1, r2
 8005720:	461a      	mov	r2, r3
 8005722:	460b      	mov	r3, r1
 8005724:	80fb      	strh	r3, [r7, #6]
 8005726:	4613      	mov	r3, r2
 8005728:	80bb      	strh	r3, [r7, #4]
    while (*text)
 800572a:	e01b      	b.n	8005764 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	7819      	ldrb	r1, [r3, #0]
 8005730:	88b8      	ldrh	r0, [r7, #4]
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	7e3b      	ldrb	r3, [r7, #24]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	4603      	mov	r3, r0
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff ff52 	bl	80055e4 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 8005740:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <draw_text+0x64>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800574e:	3b20      	subs	r3, #32
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4413      	add	r3, r2
 8005754:	791b      	ldrb	r3, [r3, #4]
 8005756:	b29a      	uxth	r2, r3
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	4413      	add	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
        text++;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	3301      	adds	r3, #1
 8005762:	60bb      	str	r3, [r7, #8]
    while (*text)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1df      	bne.n	800572c <draw_text+0x18>
    }
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	2000a38c 	.word	0x2000a38c

0800577c <send_buffer_to_OLED>:
 *  @param[in] start_y
 *             y position of frame buffer part that will be displayed on OLED Useful for vertical scrolling.

 */
void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	807b      	strh	r3, [r7, #2]
 8005788:	4613      	mov	r3, r2
 800578a:	803b      	strh	r3, [r7, #0]
	SSD1322_API_set_window(0, 63, 0, 127);
 800578c:	237f      	movs	r3, #127	; 0x7f
 800578e:	2200      	movs	r2, #0
 8005790:	213f      	movs	r1, #63	; 0x3f
 8005792:	2000      	movs	r0, #0
 8005794:	f7fe fd56 	bl	8004244 <SSD1322_API_set_window>
	SSD1322_API_send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 8005798:	883b      	ldrh	r3, [r7, #0]
 800579a:	01db      	lsls	r3, r3, #7
 800579c:	461a      	mov	r2, r3
 800579e:	887b      	ldrh	r3, [r7, #2]
 80057a0:	4413      	add	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fd78 	bl	80042a0 <SSD1322_API_send_buffer>
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <SSD1322_HW_drive_CS_low>:
 *  @brief Drives CS (Chip Select) pin of SPI interface low.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_low()
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 0);
 80057bc:	2200      	movs	r2, #0
 80057be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057c6:	f001 f8e1 	bl	800698c <HAL_GPIO_WritePin>
}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}

080057ce <SSD1322_HW_drive_CS_high>:
 *  @brief Drives CS (Chip Select) pin of SPI interface high.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_high()
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 1);
 80057d2:	2201      	movs	r2, #1
 80057d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057dc:	f001 f8d6 	bl	800698c <HAL_GPIO_WritePin>
}
 80057e0:	bf00      	nop
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <SSD1322_HW_drive_DC_low>:
 *  @brief Drives DC (Data/Command) pin of OLED driver low.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_low()
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 0);
 80057e8:	2200      	movs	r2, #0
 80057ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057f2:	f001 f8cb 	bl	800698c <HAL_GPIO_WritePin>
}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}

080057fa <SSD1322_HW_drive_DC_high>:
 *  @brief Drives DC (Data/Command) pin of of OLED driver high.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_high()
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 1);
 80057fe:	2201      	movs	r2, #1
 8005800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005808:	f001 f8c0 	bl	800698c <HAL_GPIO_WritePin>
}
 800580c:	bf00      	nop
 800580e:	bd80      	pop	{r7, pc}

08005810 <SSD1322_HW_drive_RESET_low>:
 *  @brief Drives RESET pin of of OLED driver low.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_low()
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 0);
 8005814:	2200      	movs	r2, #0
 8005816:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800581a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800581e:	f001 f8b5 	bl	800698c <HAL_GPIO_WritePin>
}
 8005822:	bf00      	nop
 8005824:	bd80      	pop	{r7, pc}

08005826 <SSD1322_HW_drive_RESET_high>:
 *  @brief Drives RESET pin of of OLED driver high.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_high()
{
 8005826:	b580      	push	{r7, lr}
 8005828:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 1);
 800582a:	2201      	movs	r2, #1
 800582c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005834:	f001 f8aa 	bl	800698c <HAL_GPIO_WritePin>
}
 8005838:	bf00      	nop
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	if (hspi == &OLED_HSPI){
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <HAL_SPI_TxCpltCallback+0x64>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d124      	bne.n	8005896 <HAL_SPI_TxCpltCallback+0x5a>
		if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING){
 800584c:	f7fc fff2 	bl	8002834 <xTaskGetSchedulerState>
 8005850:	4603      	mov	r3, r0
 8005852:	2b02      	cmp	r3, #2
 8005854:	d11a      	bne.n	800588c <HAL_SPI_TxCpltCallback+0x50>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
			SSD1322_HW_drive_CS_high();
 800585a:	f7ff ffb8 	bl	80057ce <SSD1322_HW_drive_CS_high>
			vTaskNotifyGiveFromISR(oled_task, &xHigherPriorityTaskWoken);
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <HAL_SPI_TxCpltCallback+0x68>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f107 020c 	add.w	r2, r7, #12
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f7fd fa3b 	bl	8002ce4 <vTaskGenericNotifyGiveFromISR>
			if (xHigherPriorityTaskWoken){
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d010      	beq.n	8005896 <HAL_SPI_TxCpltCallback+0x5a>
				portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00d      	beq.n	8005896 <HAL_SPI_TxCpltCallback+0x5a>
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <HAL_SPI_TxCpltCallback+0x6c>)
 800587c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	f3bf 8f6f 	isb	sy
		} else {
			SSD1322_HW_drive_CS_high();
			OLED_SPI_TX_completed_flag = 1;
		}
	}
}
 800588a:	e004      	b.n	8005896 <HAL_SPI_TxCpltCallback+0x5a>
			SSD1322_HW_drive_CS_high();
 800588c:	f7ff ff9f 	bl	80057ce <SSD1322_HW_drive_CS_high>
			OLED_SPI_TX_completed_flag = 1;
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_SPI_TxCpltCallback+0x70>)
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	2000a390 	.word	0x2000a390
 80058a4:	2000a374 	.word	0x2000a374
 80058a8:	e000ed04 	.word	0xe000ed04
 80058ac:	2000200c 	.word	0x2000200c

080058b0 <SSD1322_HW_SPI_send_array>:
 *
 *  @param[in] array_to_transmit array of bytes that will be transmitted through SPI interface
 *  @param[in] array_size amount of bytes to transmit
 */
void SSD1322_HW_SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
	OLED_SPI_TX_completed_flag = 0;
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <SSD1322_HW_SPI_send_array+0x28>)
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&OLED_HSPI, array_to_transmit, array_size);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4804      	ldr	r0, [pc, #16]	; (80058dc <SSD1322_HW_SPI_send_array+0x2c>)
 80058ca:	f002 fc6d 	bl	80081a8 <HAL_SPI_Transmit_IT>
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	2000200c 	.word	0x2000200c
 80058dc:	2000a390 	.word	0x2000a390

080058e0 <SSD1322_HW_msDelay>:
 *  and is NOT USED during normal operation.
 *
 *  @param[in] milliseconds time to wait
 */
void SSD1322_HW_msDelay(uint32_t milliseconds)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	vTaskDelay(milliseconds/portTICK_PERIOD_MS);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fc f9df 	bl	8001cac <vTaskDelay>
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <oled_test_task>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void oled_test_task(void* par){
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b08b      	sub	sp, #44	; 0x2c
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	6078      	str	r0, [r7, #4]
//	vTaskDelay(2000/portTICK_PERIOD_MS);
	for(;;){
		//Set frame buffer size in pixels - it is used to avoid writing to memory outside frame buffer
		//Normally it has to only be done once on initialization, but buffer size is changed near the end of while(1);.
		set_buffer_size(256, 64);
 8005900:	2140      	movs	r1, #64	; 0x40
 8005902:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005906:	f7fe fd33 	bl	8004370 <set_buffer_size>
		// Fill buffer with zeros to clear any garbage values
		fill_buffer(tx_buf, 0);
 800590a:	2100      	movs	r1, #0
 800590c:	48b9      	ldr	r0, [pc, #740]	; (8005bf4 <oled_test_task+0x2fc>)
 800590e:	f7fe fd43 	bl	8004398 <fill_buffer>

		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	48b7      	ldr	r0, [pc, #732]	; (8005bf4 <oled_test_task+0x2fc>)
 8005918:	f7ff ff30 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(2000);
 800591c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005920:	f7ff ffde 	bl	80058e0 <SSD1322_HW_msDelay>

		// Let's try some features of this OLED display

		// First, draw some pixels on frame buffer
		// draw_pixel(frame_buffer, x, y, brightness);
		draw_pixel(tx_buf, 10, 10, 1);
 8005924:	2301      	movs	r3, #1
 8005926:	220a      	movs	r2, #10
 8005928:	210a      	movs	r1, #10
 800592a:	48b2      	ldr	r0, [pc, #712]	; (8005bf4 <oled_test_task+0x2fc>)
 800592c:	f7fe fd64 	bl	80043f8 <draw_pixel>
		draw_pixel(tx_buf, 15, 15, 5);
 8005930:	2305      	movs	r3, #5
 8005932:	220f      	movs	r2, #15
 8005934:	210f      	movs	r1, #15
 8005936:	48af      	ldr	r0, [pc, #700]	; (8005bf4 <oled_test_task+0x2fc>)
 8005938:	f7fe fd5e 	bl	80043f8 <draw_pixel>
		draw_pixel(tx_buf, 20, 20, 9);
 800593c:	2309      	movs	r3, #9
 800593e:	2214      	movs	r2, #20
 8005940:	2114      	movs	r1, #20
 8005942:	48ac      	ldr	r0, [pc, #688]	; (8005bf4 <oled_test_task+0x2fc>)
 8005944:	f7fe fd58 	bl	80043f8 <draw_pixel>
		draw_pixel(tx_buf, 25, 25, 15);
 8005948:	230f      	movs	r3, #15
 800594a:	2219      	movs	r2, #25
 800594c:	2119      	movs	r1, #25
 800594e:	48a9      	ldr	r0, [pc, #676]	; (8005bf4 <oled_test_task+0x2fc>)
 8005950:	f7fe fd52 	bl	80043f8 <draw_pixel>

		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 8005954:	2200      	movs	r2, #0
 8005956:	2100      	movs	r1, #0
 8005958:	48a6      	ldr	r0, [pc, #664]	; (8005bf4 <oled_test_task+0x2fc>)
 800595a:	f7ff ff0f 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(2000);
 800595e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005962:	f7ff ffbd 	bl	80058e0 <SSD1322_HW_msDelay>

		// draw vertical and horizontal lines
		draw_hline(tx_buf, 31, 20, 50, 10);
 8005966:	230a      	movs	r3, #10
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	2332      	movs	r3, #50	; 0x32
 800596c:	2214      	movs	r2, #20
 800596e:	211f      	movs	r1, #31
 8005970:	48a0      	ldr	r0, [pc, #640]	; (8005bf4 <oled_test_task+0x2fc>)
 8005972:	f7fe fdf5 	bl	8004560 <draw_hline>
		draw_vline(tx_buf, 31, 0, 31, 10);
 8005976:	230a      	movs	r3, #10
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	231f      	movs	r3, #31
 800597c:	2200      	movs	r2, #0
 800597e:	211f      	movs	r1, #31
 8005980:	489c      	ldr	r0, [pc, #624]	; (8005bf4 <oled_test_task+0x2fc>)
 8005982:	f7fe fdb5 	bl	80044f0 <draw_vline>

		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 8005986:	2200      	movs	r2, #0
 8005988:	2100      	movs	r1, #0
 800598a:	489a      	ldr	r0, [pc, #616]	; (8005bf4 <oled_test_task+0x2fc>)
 800598c:	f7ff fef6 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(2000);
 8005990:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005994:	f7ff ffa4 	bl	80058e0 <SSD1322_HW_msDelay>

		// draw simple oblique line
		draw_line(tx_buf, 40, 0, 80, 31, 12);
 8005998:	230c      	movs	r3, #12
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	231f      	movs	r3, #31
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	2350      	movs	r3, #80	; 0x50
 80059a2:	2200      	movs	r2, #0
 80059a4:	2128      	movs	r1, #40	; 0x28
 80059a6:	4893      	ldr	r0, [pc, #588]	; (8005bf4 <oled_test_task+0x2fc>)
 80059a8:	f7fe fe12 	bl	80045d0 <draw_line>
		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 80059ac:	2200      	movs	r2, #0
 80059ae:	2100      	movs	r1, #0
 80059b0:	4890      	ldr	r0, [pc, #576]	; (8005bf4 <oled_test_task+0x2fc>)
 80059b2:	f7ff fee3 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(2000);
 80059b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059ba:	f7ff ff91 	bl	80058e0 <SSD1322_HW_msDelay>

		// draw antialiased oblique line. It should appear softer and nicer than a simple one
		draw_AA_line(tx_buf, 50, 0, 90, 31, 12);
 80059be:	230c      	movs	r3, #12
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	231f      	movs	r3, #31
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	235a      	movs	r3, #90	; 0x5a
 80059c8:	2200      	movs	r2, #0
 80059ca:	2132      	movs	r1, #50	; 0x32
 80059cc:	4889      	ldr	r0, [pc, #548]	; (8005bf4 <oled_test_task+0x2fc>)
 80059ce:	f7fe fea9 	bl	8004724 <draw_AA_line>
		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 80059d2:	2200      	movs	r2, #0
 80059d4:	2100      	movs	r1, #0
 80059d6:	4887      	ldr	r0, [pc, #540]	; (8005bf4 <oled_test_task+0x2fc>)
 80059d8:	f7ff fed0 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(2000);
 80059dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059e0:	f7ff ff7e 	bl	80058e0 <SSD1322_HW_msDelay>

		//draw circle, empty rectangle and filled rectangle
		draw_circle(tx_buf, 180, 20, 20, 15);
 80059e4:	230f      	movs	r3, #15
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	2314      	movs	r3, #20
 80059ea:	2214      	movs	r2, #20
 80059ec:	21b4      	movs	r1, #180	; 0xb4
 80059ee:	4881      	ldr	r0, [pc, #516]	; (8005bf4 <oled_test_task+0x2fc>)
 80059f0:	f7ff fc7e 	bl	80052f0 <draw_circle>
		draw_rect(tx_buf, 100, 5, 120, 25, 15);
 80059f4:	230f      	movs	r3, #15
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	2319      	movs	r3, #25
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	2378      	movs	r3, #120	; 0x78
 80059fe:	2205      	movs	r2, #5
 8005a00:	2164      	movs	r1, #100	; 0x64
 8005a02:	487c      	ldr	r0, [pc, #496]	; (8005bf4 <oled_test_task+0x2fc>)
 8005a04:	f7ff fc12 	bl	800522c <draw_rect>
		draw_rect_filled(tx_buf, 124, 5, 144, 25, 8);
 8005a08:	2308      	movs	r3, #8
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	2319      	movs	r3, #25
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2390      	movs	r3, #144	; 0x90
 8005a12:	2205      	movs	r2, #5
 8005a14:	217c      	movs	r1, #124	; 0x7c
 8005a16:	4877      	ldr	r0, [pc, #476]	; (8005bf4 <oled_test_task+0x2fc>)
 8005a18:	f7ff fc3d 	bl	8005296 <draw_rect_filled>
		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4874      	ldr	r0, [pc, #464]	; (8005bf4 <oled_test_task+0x2fc>)
 8005a22:	f7ff feab 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(2000);
 8005a26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a2a:	f7ff ff59 	bl	80058e0 <SSD1322_HW_msDelay>

		//clean buffer
		fill_buffer(tx_buf, 0);
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4870      	ldr	r0, [pc, #448]	; (8005bf4 <oled_test_task+0x2fc>)
 8005a32:	f7fe fcb1 	bl	8004398 <fill_buffer>

		//display 8-bit grayscale bitmap (ony first 4 bits are actually written to memory)
		draw_bitmap_8bpp(tx_buf, pat_i_mat, 0, 0, 64, 64);
 8005a36:	2340      	movs	r3, #64	; 0x40
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	2340      	movs	r3, #64	; 0x40
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2200      	movs	r2, #0
 8005a42:	496d      	ldr	r1, [pc, #436]	; (8005bf8 <oled_test_task+0x300>)
 8005a44:	486b      	ldr	r0, [pc, #428]	; (8005bf4 <oled_test_task+0x2fc>)
 8005a46:	f7ff fd31 	bl	80054ac <draw_bitmap_8bpp>
		draw_bitmap_8bpp(tx_buf, krecik, 128, 0, 64, 64);
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	2340      	movs	r3, #64	; 0x40
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	2300      	movs	r3, #0
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	4969      	ldr	r1, [pc, #420]	; (8005bfc <oled_test_task+0x304>)
 8005a58:	4866      	ldr	r0, [pc, #408]	; (8005bf4 <oled_test_task+0x2fc>)
 8005a5a:	f7ff fd27 	bl	80054ac <draw_bitmap_8bpp>
		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2100      	movs	r1, #0
 8005a62:	4864      	ldr	r0, [pc, #400]	; (8005bf4 <oled_test_task+0x2fc>)
 8005a64:	f7ff fe8a 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(5000);
 8005a68:	f241 3088 	movw	r0, #5000	; 0x1388
 8005a6c:	f7ff ff38 	bl	80058e0 <SSD1322_HW_msDelay>

		//display 4-bit grayscale bitmap (one byte in bitmap array corresponds to two pixels)
		draw_bitmap_4bpp(tx_buf, stars_4bpp, 0, 0, 256, 64);
 8005a70:	2340      	movs	r3, #64	; 0x40
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4960      	ldr	r1, [pc, #384]	; (8005c00 <oled_test_task+0x308>)
 8005a80:	485c      	ldr	r0, [pc, #368]	; (8005bf4 <oled_test_task+0x2fc>)
 8005a82:	f7ff fd4b 	bl	800551c <draw_bitmap_4bpp>
		send_buffer_to_OLED(tx_buf, 0, 0);
 8005a86:	2200      	movs	r2, #0
 8005a88:	2100      	movs	r1, #0
 8005a8a:	485a      	ldr	r0, [pc, #360]	; (8005bf4 <oled_test_task+0x2fc>)
 8005a8c:	f7ff fe76 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(3000);
 8005a90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005a94:	f7ff ff24 	bl	80058e0 <SSD1322_HW_msDelay>

		//you can invert screen colors using API function
		SSD1322_API_set_display_mode(SSD1322_MODE_INVERTED);
 8005a98:	2003      	movs	r0, #3
 8005a9a:	f7fe fb6f 	bl	800417c <SSD1322_API_set_display_mode>
		SSD1322_HW_msDelay(2000);
 8005a9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005aa2:	f7ff ff1d 	bl	80058e0 <SSD1322_HW_msDelay>
		//pixels can be also turned on or off
		SSD1322_API_set_display_mode(SSD1322_MODE_ON);
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f7fe fb68 	bl	800417c <SSD1322_API_set_display_mode>
		SSD1322_HW_msDelay(1000);
 8005aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ab0:	f7ff ff16 	bl	80058e0 <SSD1322_HW_msDelay>
		SSD1322_API_set_display_mode(SSD1322_MODE_OFF);
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	f7fe fb61 	bl	800417c <SSD1322_API_set_display_mode>
		SSD1322_HW_msDelay(1000);
 8005aba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005abe:	f7ff ff0f 	bl	80058e0 <SSD1322_HW_msDelay>
		//ok, go back to normal
		SSD1322_API_set_display_mode(SSD1322_MODE_NORMAL);
 8005ac2:	2002      	movs	r0, #2
 8005ac4:	f7fe fb5a 	bl	800417c <SSD1322_API_set_display_mode>
		SSD1322_HW_msDelay(500);
 8005ac8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005acc:	f7ff ff08 	bl	80058e0 <SSD1322_HW_msDelay>

		//exact grayscale values can be set individually for each level from 0 to 15 - always send 16 byte array of values 0-180
		uint8_t grayscale_tab[16] = {0, 5, 10, 15, 20, 25, 30, 35, 145, 150, 155, 160, 165, 170, 175, 180};
 8005ad0:	4b4c      	ldr	r3, [pc, #304]	; (8005c04 <oled_test_task+0x30c>)
 8005ad2:	f107 0408 	add.w	r4, r7, #8
 8005ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SSD1322_API_custom_grayscale(grayscale_tab);
 8005adc:	f107 0308 	add.w	r3, r7, #8
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fe fb81 	bl	80041e8 <SSD1322_API_custom_grayscale>
		SSD1322_HW_msDelay(2000);
 8005ae6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005aea:	f7ff fef9 	bl	80058e0 <SSD1322_HW_msDelay>
		//New grayscale values should be close to black in darker areas and close to white in brighter

		//reset grayscale to default linear values
		SSD1322_API_default_grayscale();
 8005aee:	f7fe fba2 	bl	8004236 <SSD1322_API_default_grayscale>
		SSD1322_HW_msDelay(2000);
 8005af2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005af6:	f7ff fef3 	bl	80058e0 <SSD1322_HW_msDelay>

		//display can be set to sleep mode and then woken up
		SSD1322_API_sleep_on();
 8005afa:	f7fe fb67 	bl	80041cc <SSD1322_API_sleep_on>
		SSD1322_HW_msDelay(1000);
 8005afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b02:	f7ff feed 	bl	80058e0 <SSD1322_HW_msDelay>
		SSD1322_API_sleep_off();
 8005b06:	f7fe fb68 	bl	80041da <SSD1322_API_sleep_off>

		//clean buffer
		fill_buffer(tx_buf, 0);
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4839      	ldr	r0, [pc, #228]	; (8005bf4 <oled_test_task+0x2fc>)
 8005b0e:	f7fe fc43 	bl	8004398 <fill_buffer>

		// now let's try to write some text with a font
		// first thing to do is font selection
		select_font(&FreeMono12pt7b);
 8005b12:	483d      	ldr	r0, [pc, #244]	; (8005c08 <oled_test_task+0x310>)
 8005b14:	f7ff fd56 	bl	80055c4 <select_font>
		// now text will we written with that font
		draw_text(tx_buf, "Lorem ipsum", 10, 20, 15);
 8005b18:	230f      	movs	r3, #15
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	2314      	movs	r3, #20
 8005b1e:	220a      	movs	r2, #10
 8005b20:	493a      	ldr	r1, [pc, #232]	; (8005c0c <oled_test_task+0x314>)
 8005b22:	4834      	ldr	r0, [pc, #208]	; (8005bf4 <oled_test_task+0x2fc>)
 8005b24:	f7ff fdf6 	bl	8005714 <draw_text>
		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4831      	ldr	r0, [pc, #196]	; (8005bf4 <oled_test_task+0x2fc>)
 8005b2e:	f7ff fe25 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(2000);
 8005b32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005b36:	f7ff fed3 	bl	80058e0 <SSD1322_HW_msDelay>

		//change font to a differen one
		select_font(&FreeSansOblique9pt7b);
 8005b3a:	4835      	ldr	r0, [pc, #212]	; (8005c10 <oled_test_task+0x318>)
 8005b3c:	f7ff fd42 	bl	80055c4 <select_font>
		draw_text(tx_buf, "dolor sit amet", 10, 45, 15);
 8005b40:	230f      	movs	r3, #15
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	232d      	movs	r3, #45	; 0x2d
 8005b46:	220a      	movs	r2, #10
 8005b48:	4932      	ldr	r1, [pc, #200]	; (8005c14 <oled_test_task+0x31c>)
 8005b4a:	482a      	ldr	r0, [pc, #168]	; (8005bf4 <oled_test_task+0x2fc>)
 8005b4c:	f7ff fde2 	bl	8005714 <draw_text>
		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 8005b50:	2200      	movs	r2, #0
 8005b52:	2100      	movs	r1, #0
 8005b54:	4827      	ldr	r0, [pc, #156]	; (8005bf4 <oled_test_task+0x2fc>)
 8005b56:	f7ff fe11 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(2000);
 8005b5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005b5e:	f7ff febf 	bl	80058e0 <SSD1322_HW_msDelay>

		//you can use frame buffer that is bigger than default 256x64 pixels.
		//Remember to divide size by two, because one byte stores two pixels.

		set_buffer_size(256, 256);
 8005b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005b6a:	f7fe fc01 	bl	8004370 <set_buffer_size>

		//now print a huge bitmap into frame buffer
		draw_bitmap_8bpp(tx_buf2, creeper, 0, 0, 256, 256);
 8005b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4926      	ldr	r1, [pc, #152]	; (8005c18 <oled_test_task+0x320>)
 8005b80:	4826      	ldr	r0, [pc, #152]	; (8005c1c <oled_test_task+0x324>)
 8005b82:	f7ff fc93 	bl	80054ac <draw_bitmap_8bpp>
		send_buffer_to_OLED(tx_buf2, 0, 0);
 8005b86:	2200      	movs	r2, #0
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4824      	ldr	r0, [pc, #144]	; (8005c1c <oled_test_task+0x324>)
 8005b8c:	f7ff fdf6 	bl	800577c <send_buffer_to_OLED>
		SSD1322_HW_msDelay(2000);
 8005b90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005b94:	f7ff fea4 	bl	80058e0 <SSD1322_HW_msDelay>

		//only 1/4 of image is seen, so let's scroll the frame buffer down
		for(int i = 0; i < 192; i++)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e00c      	b.n	8005bb8 <oled_test_task+0x2c0>
		{
			send_buffer_to_OLED(tx_buf2, 0, i);
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	481d      	ldr	r0, [pc, #116]	; (8005c1c <oled_test_task+0x324>)
 8005ba8:	f7ff fde8 	bl	800577c <send_buffer_to_OLED>
			SSD1322_HW_msDelay(5);
 8005bac:	2005      	movs	r0, #5
 8005bae:	f7ff fe97 	bl	80058e0 <SSD1322_HW_msDelay>
		for(int i = 0; i < 192; i++)
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2bbf      	cmp	r3, #191	; 0xbf
 8005bbc:	ddef      	ble.n	8005b9e <oled_test_task+0x2a6>
		}
		SSD1322_HW_msDelay(200);
 8005bbe:	20c8      	movs	r0, #200	; 0xc8
 8005bc0:	f7ff fe8e 	bl	80058e0 <SSD1322_HW_msDelay>
		for (int i = 191; i >= 0; i--)
 8005bc4:	23bf      	movs	r3, #191	; 0xbf
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	e00c      	b.n	8005be4 <oled_test_task+0x2ec>
		{
			send_buffer_to_OLED(tx_buf2, 0, i);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4812      	ldr	r0, [pc, #72]	; (8005c1c <oled_test_task+0x324>)
 8005bd4:	f7ff fdd2 	bl	800577c <send_buffer_to_OLED>
			SSD1322_HW_msDelay(5);
 8005bd8:	2005      	movs	r0, #5
 8005bda:	f7ff fe81 	bl	80058e0 <SSD1322_HW_msDelay>
		for (int i = 191; i >= 0; i--)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	daef      	bge.n	8005bca <oled_test_task+0x2d2>
		}
		SSD1322_HW_msDelay(2000);
 8005bea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005bee:	f7ff fe77 	bl	80058e0 <SSD1322_HW_msDelay>
	for(;;){
 8005bf2:	e685      	b.n	8005900 <oled_test_task+0x8>
 8005bf4:	2000a478 	.word	0x2000a478
 8005bf8:	0801bad4 	.word	0x0801bad4
 8005bfc:	0801aad4 	.word	0x0801aad4
 8005c00:	2000000c 	.word	0x2000000c
 8005c04:	080099a4 	.word	0x080099a4
 8005c08:	0800a260 	.word	0x0800a260
 8005c0c:	08009988 	.word	0x08009988
 8005c10:	0800aac4 	.word	0x0800aac4
 8005c14:	08009994 	.word	0x08009994
 8005c18:	0800aad4 	.word	0x0800aad4
 8005c1c:	2000c478 	.word	0x2000c478

08005c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	; 0x28
 8005c24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c26:	f000 fb7f 	bl	8006328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c2a:	f000 f897 	bl	8005d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c2e:	f000 f955 	bl	8005edc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005c32:	f000 f923 	bl	8005e7c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8005c36:	f000 f8e3 	bl	8005e00 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  __HAL_RCC_SPI2_CLK_ENABLE();
 8005c3a:	4b43      	ldr	r3, [pc, #268]	; (8005d48 <main+0x128>)
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	4a42      	ldr	r2, [pc, #264]	; (8005d48 <main+0x128>)
 8005c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c44:	6593      	str	r3, [r2, #88]	; 0x58
 8005c46:	4b40      	ldr	r3, [pc, #256]	; (8005d48 <main+0x128>)
 8005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c52:	4b3d      	ldr	r3, [pc, #244]	; (8005d48 <main+0x128>)
 8005c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c56:	4a3c      	ldr	r2, [pc, #240]	; (8005d48 <main+0x128>)
 8005c58:	f043 0304 	orr.w	r3, r3, #4
 8005c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <main+0x128>)
 8005c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	607b      	str	r3, [r7, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c6a:	4b37      	ldr	r3, [pc, #220]	; (8005d48 <main+0x128>)
 8005c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6e:	4a36      	ldr	r2, [pc, #216]	; (8005d48 <main+0x128>)
 8005c70:	f043 0302 	orr.w	r3, r3, #2
 8005c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c76:	4b34      	ldr	r3, [pc, #208]	; (8005d48 <main+0x128>)
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]
  /**SPI2 GPIO Configuration
  PC2     ------> SPI2_MISO
  PB10     ------> SPI2_SCK
  PB15     ------> SPI2_MOSI
  */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c82:	f107 030c 	add.w	r3, r7, #12
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005c92:	2304      	movs	r3, #4
 8005c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c96:	2302      	movs	r3, #2
 8005c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005ca2:	2305      	movs	r3, #5
 8005ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ca6:	f107 030c 	add.w	r3, r7, #12
 8005caa:	4619      	mov	r1, r3
 8005cac:	4827      	ldr	r0, [pc, #156]	; (8005d4c <main+0x12c>)
 8005cae:	f000 fcc3 	bl	8006638 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8005cb2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8005cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005cc4:	2305      	movs	r3, #5
 8005cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cc8:	f107 030c 	add.w	r3, r7, #12
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4820      	ldr	r0, [pc, #128]	; (8005d50 <main+0x130>)
 8005cd0:	f000 fcb2 	bl	8006638 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
    NVIC_EnableIRQ(SPI2_IRQn); //Разрешаем прерывания от SPI1

    SPI2->CR1 |= 1<<SPI_CR1_SPE_Pos; //Включаем SPI
*/
  SSD1322_API_init();
 8005cd4:	f7fe f9a2 	bl	800401c <SSD1322_API_init>

	set_buffer_size(256, 64);
 8005cd8:	2140      	movs	r1, #64	; 0x40
 8005cda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005cde:	f7fe fb47 	bl	8004370 <set_buffer_size>
	// Fill buffer with zeros to clear any garbage values
	fill_buffer(tx_buf, 0);
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	481b      	ldr	r0, [pc, #108]	; (8005d54 <main+0x134>)
 8005ce6:	f7fe fb57 	bl	8004398 <fill_buffer>

	// send a frame buffer to the display
	send_buffer_to_OLED(tx_buf, 0, 0);
 8005cea:	2200      	movs	r2, #0
 8005cec:	2100      	movs	r1, #0
 8005cee:	4819      	ldr	r0, [pc, #100]	; (8005d54 <main+0x134>)
 8005cf0:	f7ff fd44 	bl	800577c <send_buffer_to_OLED>
	HAL_Delay(2000);
 8005cf4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005cf8:	f000 fb56 	bl	80063a8 <HAL_Delay>

	// Let's try some features of this OLED display

	// First, draw some pixels on frame buffer
	// draw_pixel(frame_buffer, x, y, brightness);
	draw_pixel(tx_buf, 10, 10, 1);
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	220a      	movs	r2, #10
 8005d00:	210a      	movs	r1, #10
 8005d02:	4814      	ldr	r0, [pc, #80]	; (8005d54 <main+0x134>)
 8005d04:	f7fe fb78 	bl	80043f8 <draw_pixel>
	draw_pixel(tx_buf, 15, 15, 5);
 8005d08:	2305      	movs	r3, #5
 8005d0a:	220f      	movs	r2, #15
 8005d0c:	210f      	movs	r1, #15
 8005d0e:	4811      	ldr	r0, [pc, #68]	; (8005d54 <main+0x134>)
 8005d10:	f7fe fb72 	bl	80043f8 <draw_pixel>
	draw_pixel(tx_buf, 20, 20, 9);
 8005d14:	2309      	movs	r3, #9
 8005d16:	2214      	movs	r2, #20
 8005d18:	2114      	movs	r1, #20
 8005d1a:	480e      	ldr	r0, [pc, #56]	; (8005d54 <main+0x134>)
 8005d1c:	f7fe fb6c 	bl	80043f8 <draw_pixel>
	draw_pixel(tx_buf, 25, 25, 15);
 8005d20:	230f      	movs	r3, #15
 8005d22:	2219      	movs	r2, #25
 8005d24:	2119      	movs	r1, #25
 8005d26:	480b      	ldr	r0, [pc, #44]	; (8005d54 <main+0x134>)
 8005d28:	f7fe fb66 	bl	80043f8 <draw_pixel>


	xTaskCreate(oled_test_task, NULL, 2048, (void*)1, tskIDLE_PRIORITY+1, NULL);
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	2301      	movs	r3, #1
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	2301      	movs	r3, #1
 8005d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4806      	ldr	r0, [pc, #24]	; (8005d58 <main+0x138>)
 8005d3e:	f7fb fe42 	bl	80019c6 <xTaskCreate>
	vTaskStartScheduler();
 8005d42:	f7fb ffe7 	bl	8001d14 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005d46:	e7fe      	b.n	8005d46 <main+0x126>
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	48000800 	.word	0x48000800
 8005d50:	48000400 	.word	0x48000400
 8005d54:	2000a478 	.word	0x2000a478
 8005d58:	080058f9 	.word	0x080058f9

08005d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b096      	sub	sp, #88	; 0x58
 8005d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d62:	f107 0314 	add.w	r3, r7, #20
 8005d66:	2244      	movs	r2, #68	; 0x44
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f003 fd6a 	bl	8009844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d70:	463b      	mov	r3, r7
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	605a      	str	r2, [r3, #4]
 8005d78:	609a      	str	r2, [r3, #8]
 8005d7a:	60da      	str	r2, [r3, #12]
 8005d7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005d7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d82:	f000 fe29 	bl	80069d8 <HAL_PWREx_ControlVoltageScaling>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005d8c:	f000 f920 	bl	8005fd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005d90:	2302      	movs	r3, #2
 8005d92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005d9a:	2310      	movs	r3, #16
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005da2:	2302      	movs	r3, #2
 8005da4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005da6:	2301      	movs	r3, #1
 8005da8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8005daa:	2310      	movs	r3, #16
 8005dac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005dae:	2307      	movs	r3, #7
 8005db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005db2:	2302      	movs	r3, #2
 8005db4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8005db6:	2308      	movs	r3, #8
 8005db8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dba:	f107 0314 	add.w	r3, r7, #20
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fe60 	bl	8006a84 <HAL_RCC_OscConfig>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <SystemClock_Config+0x72>
  {
    Error_Handler();
 8005dca:	f000 f901 	bl	8005fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005dce:	230f      	movs	r3, #15
 8005dd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005de2:	463b      	mov	r3, r7
 8005de4:	2101      	movs	r1, #1
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fa28 	bl	800723c <HAL_RCC_ClockConfig>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005df2:	f000 f8ed 	bl	8005fd0 <Error_Handler>
  }
}
 8005df6:	bf00      	nop
 8005df8:	3758      	adds	r7, #88	; 0x58
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005e04:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e06:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <MX_SPI2_Init+0x78>)
 8005e08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e18:	4b16      	ldr	r3, [pc, #88]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005e1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e20:	4b14      	ldr	r3, [pc, #80]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e26:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005e2c:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e32:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005e34:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e36:	2208      	movs	r2, #8
 8005e38:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e40:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e46:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e4e:	2207      	movs	r2, #7
 8005e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005e52:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005e5e:	4805      	ldr	r0, [pc, #20]	; (8005e74 <MX_SPI2_Init+0x74>)
 8005e60:	f002 f8fe 	bl	8008060 <HAL_SPI_Init>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005e6a:	f000 f8b1 	bl	8005fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005e6e:	bf00      	nop
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	2000a390 	.word	0x2000a390
 8005e78:	40003800 	.word	0x40003800

08005e7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e80:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005e82:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <MX_USART2_UART_Init+0x5c>)
 8005e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e86:	4b13      	ldr	r3, [pc, #76]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005ea2:	220c      	movs	r2, #12
 8005ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ebe:	4805      	ldr	r0, [pc, #20]	; (8005ed4 <MX_USART2_UART_Init+0x58>)
 8005ec0:	f002 ffd8 	bl	8008e74 <HAL_UART_Init>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005eca:	f000 f881 	bl	8005fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	2000a3f4 	.word	0x2000a3f4
 8005ed8:	40004400 	.word	0x40004400

08005edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee2:	f107 0314 	add.w	r3, r7, #20
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	605a      	str	r2, [r3, #4]
 8005eec:	609a      	str	r2, [r3, #8]
 8005eee:	60da      	str	r2, [r3, #12]
 8005ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ef2:	4b2c      	ldr	r3, [pc, #176]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef6:	4a2b      	ldr	r2, [pc, #172]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005ef8:	f043 0304 	orr.w	r3, r3, #4
 8005efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005efe:	4b29      	ldr	r3, [pc, #164]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f0a:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0e:	4a25      	ldr	r2, [pc, #148]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f16:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f22:	4b20      	ldr	r3, [pc, #128]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f26:	4a1f      	ldr	r2, [pc, #124]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f2e:	4b1d      	ldr	r3, [pc, #116]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f3a:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3e:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f40:	f043 0302 	orr.w	r3, r3, #2
 8005f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f46:	4b17      	ldr	r3, [pc, #92]	; (8005fa4 <MX_GPIO_Init+0xc8>)
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	607b      	str	r3, [r7, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8005f52:	2200      	movs	r2, #0
 8005f54:	f44f 6132 	mov.w	r1, #2848	; 0xb20
 8005f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f5c:	f000 fd16 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005f66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005f70:	f107 0314 	add.w	r3, r7, #20
 8005f74:	4619      	mov	r1, r3
 8005f76:	480c      	ldr	r0, [pc, #48]	; (8005fa8 <MX_GPIO_Init+0xcc>)
 8005f78:	f000 fb5e 	bl	8006638 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8005f7c:	f44f 6332 	mov.w	r3, #2848	; 0xb20
 8005f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f82:	2301      	movs	r3, #1
 8005f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f8e:	f107 0314 	add.w	r3, r7, #20
 8005f92:	4619      	mov	r1, r3
 8005f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f98:	f000 fb4e 	bl	8006638 <HAL_GPIO_Init>

}
 8005f9c:	bf00      	nop
 8005f9e:	3728      	adds	r7, #40	; 0x28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	48000800 	.word	0x48000800

08005fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a04      	ldr	r2, [pc, #16]	; (8005fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d101      	bne.n	8005fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005fbe:	f000 f9d3 	bl	8006368 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40014400 	.word	0x40014400

08005fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005fd4:	b672      	cpsid	i
}
 8005fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005fd8:	e7fe      	b.n	8005fd8 <Error_Handler+0x8>
	...

08005fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <HAL_MspInit+0x44>)
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	4a0e      	ldr	r2, [pc, #56]	; (8006020 <HAL_MspInit+0x44>)
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	6613      	str	r3, [r2, #96]	; 0x60
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <HAL_MspInit+0x44>)
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <HAL_MspInit+0x44>)
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	4a08      	ldr	r2, [pc, #32]	; (8006020 <HAL_MspInit+0x44>)
 8006000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006004:	6593      	str	r3, [r2, #88]	; 0x58
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <HAL_MspInit+0x44>)
 8006008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000

08006024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	; 0x28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800602c:	f107 0314 	add.w	r3, r7, #20
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	609a      	str	r2, [r3, #8]
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a29      	ldr	r2, [pc, #164]	; (80060e8 <HAL_SPI_MspInit+0xc4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d14c      	bne.n	80060e0 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006046:	4b29      	ldr	r3, [pc, #164]	; (80060ec <HAL_SPI_MspInit+0xc8>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	4a28      	ldr	r2, [pc, #160]	; (80060ec <HAL_SPI_MspInit+0xc8>)
 800604c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006050:	6593      	str	r3, [r2, #88]	; 0x58
 8006052:	4b26      	ldr	r3, [pc, #152]	; (80060ec <HAL_SPI_MspInit+0xc8>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800605e:	4b23      	ldr	r3, [pc, #140]	; (80060ec <HAL_SPI_MspInit+0xc8>)
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	4a22      	ldr	r2, [pc, #136]	; (80060ec <HAL_SPI_MspInit+0xc8>)
 8006064:	f043 0304 	orr.w	r3, r3, #4
 8006068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800606a:	4b20      	ldr	r3, [pc, #128]	; (80060ec <HAL_SPI_MspInit+0xc8>)
 800606c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006076:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <HAL_SPI_MspInit+0xc8>)
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	4a1c      	ldr	r2, [pc, #112]	; (80060ec <HAL_SPI_MspInit+0xc8>)
 800607c:	f043 0302 	orr.w	r3, r3, #2
 8006080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006082:	4b1a      	ldr	r3, [pc, #104]	; (80060ec <HAL_SPI_MspInit+0xc8>)
 8006084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	60bb      	str	r3, [r7, #8]
 800608c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800608e:	2304      	movs	r3, #4
 8006090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006092:	2302      	movs	r3, #2
 8006094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800609a:	2303      	movs	r3, #3
 800609c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800609e:	2305      	movs	r3, #5
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060a2:	f107 0314 	add.w	r3, r7, #20
 80060a6:	4619      	mov	r1, r3
 80060a8:	4811      	ldr	r0, [pc, #68]	; (80060f0 <HAL_SPI_MspInit+0xcc>)
 80060aa:	f000 fac5 	bl	8006638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80060ae:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80060b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b4:	2302      	movs	r3, #2
 80060b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060bc:	2303      	movs	r3, #3
 80060be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80060c0:	2305      	movs	r3, #5
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c4:	f107 0314 	add.w	r3, r7, #20
 80060c8:	4619      	mov	r1, r3
 80060ca:	480a      	ldr	r0, [pc, #40]	; (80060f4 <HAL_SPI_MspInit+0xd0>)
 80060cc:	f000 fab4 	bl	8006638 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 80060d0:	2200      	movs	r2, #0
 80060d2:	2104      	movs	r1, #4
 80060d4:	2024      	movs	r0, #36	; 0x24
 80060d6:	f000 fa43 	bl	8006560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80060da:	2024      	movs	r0, #36	; 0x24
 80060dc:	f000 fa5c 	bl	8006598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80060e0:	bf00      	nop
 80060e2:	3728      	adds	r7, #40	; 0x28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40003800 	.word	0x40003800
 80060ec:	40021000 	.word	0x40021000
 80060f0:	48000800 	.word	0x48000800
 80060f4:	48000400 	.word	0x48000400

080060f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b0ac      	sub	sp, #176	; 0xb0
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006100:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	60da      	str	r2, [r3, #12]
 800610e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006110:	f107 0314 	add.w	r3, r7, #20
 8006114:	2288      	movs	r2, #136	; 0x88
 8006116:	2100      	movs	r1, #0
 8006118:	4618      	mov	r0, r3
 800611a:	f003 fb93 	bl	8009844 <memset>
  if(huart->Instance==USART2)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a21      	ldr	r2, [pc, #132]	; (80061a8 <HAL_UART_MspInit+0xb0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d13b      	bne.n	80061a0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006128:	2302      	movs	r3, #2
 800612a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800612c:	2300      	movs	r3, #0
 800612e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006130:	f107 0314 	add.w	r3, r7, #20
 8006134:	4618      	mov	r0, r3
 8006136:	f001 fad7 	bl	80076e8 <HAL_RCCEx_PeriphCLKConfig>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006140:	f7ff ff46 	bl	8005fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006144:	4b19      	ldr	r3, [pc, #100]	; (80061ac <HAL_UART_MspInit+0xb4>)
 8006146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006148:	4a18      	ldr	r2, [pc, #96]	; (80061ac <HAL_UART_MspInit+0xb4>)
 800614a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800614e:	6593      	str	r3, [r2, #88]	; 0x58
 8006150:	4b16      	ldr	r3, [pc, #88]	; (80061ac <HAL_UART_MspInit+0xb4>)
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800615c:	4b13      	ldr	r3, [pc, #76]	; (80061ac <HAL_UART_MspInit+0xb4>)
 800615e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006160:	4a12      	ldr	r2, [pc, #72]	; (80061ac <HAL_UART_MspInit+0xb4>)
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006168:	4b10      	ldr	r3, [pc, #64]	; (80061ac <HAL_UART_MspInit+0xb4>)
 800616a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006174:	230c      	movs	r3, #12
 8006176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617a:	2302      	movs	r3, #2
 800617c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006180:	2300      	movs	r3, #0
 8006182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006186:	2303      	movs	r3, #3
 8006188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800618c:	2307      	movs	r3, #7
 800618e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006192:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006196:	4619      	mov	r1, r3
 8006198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800619c:	f000 fa4c 	bl	8006638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80061a0:	bf00      	nop
 80061a2:	37b0      	adds	r7, #176	; 0xb0
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40004400 	.word	0x40004400
 80061ac:	40021000 	.word	0x40021000

080061b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08c      	sub	sp, #48	; 0x30
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80061c0:	2200      	movs	r2, #0
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	2019      	movs	r0, #25
 80061c6:	f000 f9cb 	bl	8006560 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80061ca:	2019      	movs	r0, #25
 80061cc:	f000 f9e4 	bl	8006598 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80061d0:	4b1e      	ldr	r3, [pc, #120]	; (800624c <HAL_InitTick+0x9c>)
 80061d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d4:	4a1d      	ldr	r2, [pc, #116]	; (800624c <HAL_InitTick+0x9c>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061da:	6613      	str	r3, [r2, #96]	; 0x60
 80061dc:	4b1b      	ldr	r3, [pc, #108]	; (800624c <HAL_InitTick+0x9c>)
 80061de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80061e8:	f107 0210 	add.w	r2, r7, #16
 80061ec:	f107 0314 	add.w	r3, r7, #20
 80061f0:	4611      	mov	r1, r2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 f9e6 	bl	80075c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80061f8:	f001 f9ce 	bl	8007598 <HAL_RCC_GetPCLK2Freq>
 80061fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	4a13      	ldr	r2, [pc, #76]	; (8006250 <HAL_InitTick+0xa0>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	0c9b      	lsrs	r3, r3, #18
 8006208:	3b01      	subs	r3, #1
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800620c:	4b11      	ldr	r3, [pc, #68]	; (8006254 <HAL_InitTick+0xa4>)
 800620e:	4a12      	ldr	r2, [pc, #72]	; (8006258 <HAL_InitTick+0xa8>)
 8006210:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <HAL_InitTick+0xa4>)
 8006214:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006218:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800621a:	4a0e      	ldr	r2, [pc, #56]	; (8006254 <HAL_InitTick+0xa4>)
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8006220:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <HAL_InitTick+0xa4>)
 8006222:	2200      	movs	r2, #0
 8006224:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006226:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <HAL_InitTick+0xa4>)
 8006228:	2200      	movs	r2, #0
 800622a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800622c:	4809      	ldr	r0, [pc, #36]	; (8006254 <HAL_InitTick+0xa4>)
 800622e:	f002 fb50 	bl	80088d2 <HAL_TIM_Base_Init>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d104      	bne.n	8006242 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8006238:	4806      	ldr	r0, [pc, #24]	; (8006254 <HAL_InitTick+0xa4>)
 800623a:	f002 fbab 	bl	8008994 <HAL_TIM_Base_Start_IT>
 800623e:	4603      	mov	r3, r0
 8006240:	e000      	b.n	8006244 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
}
 8006244:	4618      	mov	r0, r3
 8006246:	3730      	adds	r7, #48	; 0x30
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40021000 	.word	0x40021000
 8006250:	431bde83 	.word	0x431bde83
 8006254:	20014478 	.word	0x20014478
 8006258:	40014400 	.word	0x40014400

0800625c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006260:	e7fe      	b.n	8006260 <NMI_Handler+0x4>

08006262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006262:	b480      	push	{r7}
 8006264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006266:	e7fe      	b.n	8006266 <HardFault_Handler+0x4>

08006268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800626c:	e7fe      	b.n	800626c <MemManage_Handler+0x4>

0800626e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800626e:	b480      	push	{r7}
 8006270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006272:	e7fe      	b.n	8006272 <BusFault_Handler+0x4>

08006274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006278:	e7fe      	b.n	8006278 <UsageFault_Handler+0x4>

0800627a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800627a:	b480      	push	{r7}
 800627c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800627e:	bf00      	nop
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800628c:	4802      	ldr	r0, [pc, #8]	; (8006298 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800628e:	f002 fbf1 	bl	8008a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006292:	bf00      	nop
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20014478 	.word	0x20014478

0800629c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80062a0:	4802      	ldr	r0, [pc, #8]	; (80062ac <SPI2_IRQHandler+0x10>)
 80062a2:	f002 f80f 	bl	80082c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80062a6:	bf00      	nop
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	2000a390 	.word	0x2000a390

080062b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80062b4:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <SystemInit+0x20>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ba:	4a05      	ldr	r2, [pc, #20]	; (80062d0 <SystemInit+0x20>)
 80062bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80062c4:	bf00      	nop
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	e000ed00 	.word	0xe000ed00

080062d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80062d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800630c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80062d8:	f7ff ffea 	bl	80062b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062dc:	480c      	ldr	r0, [pc, #48]	; (8006310 <LoopForever+0x6>)
  ldr r1, =_edata
 80062de:	490d      	ldr	r1, [pc, #52]	; (8006314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062e0:	4a0d      	ldr	r2, [pc, #52]	; (8006318 <LoopForever+0xe>)
  movs r3, #0
 80062e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062e4:	e002      	b.n	80062ec <LoopCopyDataInit>

080062e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062ea:	3304      	adds	r3, #4

080062ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062f0:	d3f9      	bcc.n	80062e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062f2:	4a0a      	ldr	r2, [pc, #40]	; (800631c <LoopForever+0x12>)
  ldr r4, =_ebss
 80062f4:	4c0a      	ldr	r4, [pc, #40]	; (8006320 <LoopForever+0x16>)
  movs r3, #0
 80062f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062f8:	e001      	b.n	80062fe <LoopFillZerobss>

080062fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062fc:	3204      	adds	r2, #4

080062fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006300:	d3fb      	bcc.n	80062fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006302:	f003 fa6d 	bl	80097e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006306:	f7ff fc8b 	bl	8005c20 <main>

0800630a <LoopForever>:

LoopForever:
    b LoopForever
 800630a:	e7fe      	b.n	800630a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800630c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006314:	2000201c 	.word	0x2000201c
  ldr r2, =_sidata
 8006318:	0801cb2c 	.word	0x0801cb2c
  ldr r2, =_sbss
 800631c:	2000201c 	.word	0x2000201c
  ldr r4, =_ebss
 8006320:	200144c8 	.word	0x200144c8

08006324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006324:	e7fe      	b.n	8006324 <ADC1_2_IRQHandler>
	...

08006328 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <HAL_Init+0x3c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a0b      	ldr	r2, [pc, #44]	; (8006364 <HAL_Init+0x3c>)
 8006338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800633c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800633e:	2003      	movs	r0, #3
 8006340:	f000 f903 	bl	800654a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006344:	200f      	movs	r0, #15
 8006346:	f7ff ff33 	bl	80061b0 <HAL_InitTick>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	71fb      	strb	r3, [r7, #7]
 8006354:	e001      	b.n	800635a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006356:	f7ff fe41 	bl	8005fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800635a:	79fb      	ldrb	r3, [r7, #7]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40022000 	.word	0x40022000

08006368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <HAL_IncTick+0x20>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	4b06      	ldr	r3, [pc, #24]	; (800638c <HAL_IncTick+0x24>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4413      	add	r3, r2
 8006378:	4a04      	ldr	r2, [pc, #16]	; (800638c <HAL_IncTick+0x24>)
 800637a:	6013      	str	r3, [r2, #0]
}
 800637c:	bf00      	nop
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	20002018 	.word	0x20002018
 800638c:	200144c4 	.word	0x200144c4

08006390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  return uwTick;
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <HAL_GetTick+0x14>)
 8006396:	681b      	ldr	r3, [r3, #0]
}
 8006398:	4618      	mov	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	200144c4 	.word	0x200144c4

080063a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063b0:	f7ff ffee 	bl	8006390 <HAL_GetTick>
 80063b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d005      	beq.n	80063ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <HAL_Delay+0x44>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063ce:	bf00      	nop
 80063d0:	f7ff ffde 	bl	8006390 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d8f7      	bhi.n	80063d0 <HAL_Delay+0x28>
  {
  }
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20002018 	.word	0x20002018

080063f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <__NVIC_SetPriorityGrouping+0x44>)
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800640c:	4013      	ands	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800641c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006422:	4a04      	ldr	r2, [pc, #16]	; (8006434 <__NVIC_SetPriorityGrouping+0x44>)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	60d3      	str	r3, [r2, #12]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	e000ed00 	.word	0xe000ed00

08006438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800643c:	4b04      	ldr	r3, [pc, #16]	; (8006450 <__NVIC_GetPriorityGrouping+0x18>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	0a1b      	lsrs	r3, r3, #8
 8006442:	f003 0307 	and.w	r3, r3, #7
}
 8006446:	4618      	mov	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	e000ed00 	.word	0xe000ed00

08006454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800645e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006462:	2b00      	cmp	r3, #0
 8006464:	db0b      	blt.n	800647e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	f003 021f 	and.w	r2, r3, #31
 800646c:	4907      	ldr	r1, [pc, #28]	; (800648c <__NVIC_EnableIRQ+0x38>)
 800646e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	2001      	movs	r0, #1
 8006476:	fa00 f202 	lsl.w	r2, r0, r2
 800647a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	e000e100 	.word	0xe000e100

08006490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	6039      	str	r1, [r7, #0]
 800649a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800649c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	db0a      	blt.n	80064ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	490c      	ldr	r1, [pc, #48]	; (80064dc <__NVIC_SetPriority+0x4c>)
 80064aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ae:	0112      	lsls	r2, r2, #4
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	440b      	add	r3, r1
 80064b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064b8:	e00a      	b.n	80064d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	4908      	ldr	r1, [pc, #32]	; (80064e0 <__NVIC_SetPriority+0x50>)
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	3b04      	subs	r3, #4
 80064c8:	0112      	lsls	r2, r2, #4
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	440b      	add	r3, r1
 80064ce:	761a      	strb	r2, [r3, #24]
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	e000e100 	.word	0xe000e100
 80064e0:	e000ed00 	.word	0xe000ed00

080064e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b089      	sub	sp, #36	; 0x24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f1c3 0307 	rsb	r3, r3, #7
 80064fe:	2b04      	cmp	r3, #4
 8006500:	bf28      	it	cs
 8006502:	2304      	movcs	r3, #4
 8006504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	3304      	adds	r3, #4
 800650a:	2b06      	cmp	r3, #6
 800650c:	d902      	bls.n	8006514 <NVIC_EncodePriority+0x30>
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	3b03      	subs	r3, #3
 8006512:	e000      	b.n	8006516 <NVIC_EncodePriority+0x32>
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006518:	f04f 32ff 	mov.w	r2, #4294967295
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	43da      	mvns	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	401a      	ands	r2, r3
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800652c:	f04f 31ff 	mov.w	r1, #4294967295
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	fa01 f303 	lsl.w	r3, r1, r3
 8006536:	43d9      	mvns	r1, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800653c:	4313      	orrs	r3, r2
         );
}
 800653e:	4618      	mov	r0, r3
 8006540:	3724      	adds	r7, #36	; 0x24
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff ff4c 	bl	80063f0 <__NVIC_SetPriorityGrouping>
}
 8006558:	bf00      	nop
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006572:	f7ff ff61 	bl	8006438 <__NVIC_GetPriorityGrouping>
 8006576:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	6978      	ldr	r0, [r7, #20]
 800657e:	f7ff ffb1 	bl	80064e4 <NVIC_EncodePriority>
 8006582:	4602      	mov	r2, r0
 8006584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006588:	4611      	mov	r1, r2
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff ff80 	bl	8006490 <__NVIC_SetPriority>
}
 8006590:	bf00      	nop
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff ff54 	bl	8006454 <__NVIC_EnableIRQ>
}
 80065ac:	bf00      	nop
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d005      	beq.n	80065d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2204      	movs	r2, #4
 80065d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
 80065d6:	e029      	b.n	800662c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 020e 	bic.w	r2, r2, #14
 80065e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0201 	bic.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fc:	f003 021c 	and.w	r2, r3, #28
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	2101      	movs	r1, #1
 8006606:	fa01 f202 	lsl.w	r2, r1, r2
 800660a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	4798      	blx	r3
    }
  }
  return status;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006646:	e17f      	b.n	8006948 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	2101      	movs	r1, #1
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8171 	beq.w	8006942 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d005      	beq.n	8006678 <HAL_GPIO_Init+0x40>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d130      	bne.n	80066da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	2203      	movs	r2, #3
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	43db      	mvns	r3, r3
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4013      	ands	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ae:	2201      	movs	r2, #1
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4013      	ands	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	091b      	lsrs	r3, r3, #4
 80066c4:	f003 0201 	and.w	r2, r3, #1
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d118      	bne.n	8006718 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80066ec:	2201      	movs	r2, #1
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	fa02 f303 	lsl.w	r3, r2, r3
 80066f4:	43db      	mvns	r3, r3
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4013      	ands	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	08db      	lsrs	r3, r3, #3
 8006702:	f003 0201 	and.w	r2, r3, #1
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	2b03      	cmp	r3, #3
 8006722:	d017      	beq.n	8006754 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	2203      	movs	r2, #3
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4013      	ands	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d123      	bne.n	80067a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	08da      	lsrs	r2, r3, #3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3208      	adds	r2, #8
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	220f      	movs	r2, #15
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4013      	ands	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	08da      	lsrs	r2, r3, #3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3208      	adds	r2, #8
 80067a2:	6939      	ldr	r1, [r7, #16]
 80067a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	2203      	movs	r2, #3
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	43db      	mvns	r3, r3
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4013      	ands	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f003 0203 	and.w	r2, r3, #3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80ac 	beq.w	8006942 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ea:	4b5f      	ldr	r3, [pc, #380]	; (8006968 <HAL_GPIO_Init+0x330>)
 80067ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ee:	4a5e      	ldr	r2, [pc, #376]	; (8006968 <HAL_GPIO_Init+0x330>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	6613      	str	r3, [r2, #96]	; 0x60
 80067f6:	4b5c      	ldr	r3, [pc, #368]	; (8006968 <HAL_GPIO_Init+0x330>)
 80067f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006802:	4a5a      	ldr	r2, [pc, #360]	; (800696c <HAL_GPIO_Init+0x334>)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	3302      	adds	r3, #2
 800680a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	220f      	movs	r2, #15
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	43db      	mvns	r3, r3
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4013      	ands	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800682c:	d025      	beq.n	800687a <HAL_GPIO_Init+0x242>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a4f      	ldr	r2, [pc, #316]	; (8006970 <HAL_GPIO_Init+0x338>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01f      	beq.n	8006876 <HAL_GPIO_Init+0x23e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a4e      	ldr	r2, [pc, #312]	; (8006974 <HAL_GPIO_Init+0x33c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d019      	beq.n	8006872 <HAL_GPIO_Init+0x23a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a4d      	ldr	r2, [pc, #308]	; (8006978 <HAL_GPIO_Init+0x340>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <HAL_GPIO_Init+0x236>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a4c      	ldr	r2, [pc, #304]	; (800697c <HAL_GPIO_Init+0x344>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00d      	beq.n	800686a <HAL_GPIO_Init+0x232>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a4b      	ldr	r2, [pc, #300]	; (8006980 <HAL_GPIO_Init+0x348>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <HAL_GPIO_Init+0x22e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <HAL_GPIO_Init+0x34c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <HAL_GPIO_Init+0x22a>
 800685e:	2306      	movs	r3, #6
 8006860:	e00c      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006862:	2307      	movs	r3, #7
 8006864:	e00a      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006866:	2305      	movs	r3, #5
 8006868:	e008      	b.n	800687c <HAL_GPIO_Init+0x244>
 800686a:	2304      	movs	r3, #4
 800686c:	e006      	b.n	800687c <HAL_GPIO_Init+0x244>
 800686e:	2303      	movs	r3, #3
 8006870:	e004      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006872:	2302      	movs	r3, #2
 8006874:	e002      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <HAL_GPIO_Init+0x244>
 800687a:	2300      	movs	r3, #0
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	f002 0203 	and.w	r2, r2, #3
 8006882:	0092      	lsls	r2, r2, #2
 8006884:	4093      	lsls	r3, r2
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800688c:	4937      	ldr	r1, [pc, #220]	; (800696c <HAL_GPIO_Init+0x334>)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	089b      	lsrs	r3, r3, #2
 8006892:	3302      	adds	r3, #2
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800689a:	4b3b      	ldr	r3, [pc, #236]	; (8006988 <HAL_GPIO_Init+0x350>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	43db      	mvns	r3, r3
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4013      	ands	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80068be:	4a32      	ldr	r2, [pc, #200]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80068c4:	4b30      	ldr	r3, [pc, #192]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4013      	ands	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80068e8:	4a27      	ldr	r2, [pc, #156]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80068ee:	4b26      	ldr	r3, [pc, #152]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	43db      	mvns	r3, r3
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4013      	ands	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006912:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <HAL_GPIO_Init+0x350>)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <HAL_GPIO_Init+0x350>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	43db      	mvns	r3, r3
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4013      	ands	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800693c:	4a12      	ldr	r2, [pc, #72]	; (8006988 <HAL_GPIO_Init+0x350>)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	3301      	adds	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	f47f ae78 	bne.w	8006648 <HAL_GPIO_Init+0x10>
  }
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40021000 	.word	0x40021000
 800696c:	40010000 	.word	0x40010000
 8006970:	48000400 	.word	0x48000400
 8006974:	48000800 	.word	0x48000800
 8006978:	48000c00 	.word	0x48000c00
 800697c:	48001000 	.word	0x48001000
 8006980:	48001400 	.word	0x48001400
 8006984:	48001800 	.word	0x48001800
 8006988:	40010400 	.word	0x40010400

0800698c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	807b      	strh	r3, [r7, #2]
 8006998:	4613      	mov	r3, r2
 800699a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800699c:	787b      	ldrb	r3, [r7, #1]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069a2:	887a      	ldrh	r2, [r7, #2]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069a8:	e002      	b.n	80069b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069aa:	887a      	ldrh	r2, [r7, #2]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80069c0:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40007000 	.word	0x40007000

080069d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e6:	d130      	bne.n	8006a4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80069e8:	4b23      	ldr	r3, [pc, #140]	; (8006a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f4:	d038      	beq.n	8006a68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069f6:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069fe:	4a1e      	ldr	r2, [pc, #120]	; (8006a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a06:	4b1d      	ldr	r3, [pc, #116]	; (8006a7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2232      	movs	r2, #50	; 0x32
 8006a0c:	fb02 f303 	mul.w	r3, r2, r3
 8006a10:	4a1b      	ldr	r2, [pc, #108]	; (8006a80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	0c9b      	lsrs	r3, r3, #18
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a1c:	e002      	b.n	8006a24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a24:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a30:	d102      	bne.n	8006a38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f2      	bne.n	8006a1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a38:	4b0f      	ldr	r3, [pc, #60]	; (8006a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a44:	d110      	bne.n	8006a68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e00f      	b.n	8006a6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a56:	d007      	beq.n	8006a68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a58:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a60:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40007000 	.word	0x40007000
 8006a7c:	20002010 	.word	0x20002010
 8006a80:	431bde83 	.word	0x431bde83

08006a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e3ca      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a96:	4b97      	ldr	r3, [pc, #604]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 030c 	and.w	r3, r3, #12
 8006a9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006aa0:	4b94      	ldr	r3, [pc, #592]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80e4 	beq.w	8006c80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <HAL_RCC_OscConfig+0x4a>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b0c      	cmp	r3, #12
 8006ac2:	f040 808b 	bne.w	8006bdc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	f040 8087 	bne.w	8006bdc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ace:	4b89      	ldr	r3, [pc, #548]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x62>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e3a2      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1a      	ldr	r2, [r3, #32]
 8006aea:	4b82      	ldr	r3, [pc, #520]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <HAL_RCC_OscConfig+0x7c>
 8006af6:	4b7f      	ldr	r3, [pc, #508]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006afe:	e005      	b.n	8006b0c <HAL_RCC_OscConfig+0x88>
 8006b00:	4b7c      	ldr	r3, [pc, #496]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b06:	091b      	lsrs	r3, r3, #4
 8006b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d223      	bcs.n	8006b58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fd87 	bl	8007628 <RCC_SetFlashLatencyFromMSIRange>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e383      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b24:	4b73      	ldr	r3, [pc, #460]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a72      	ldr	r2, [pc, #456]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b2a:	f043 0308 	orr.w	r3, r3, #8
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	4b70      	ldr	r3, [pc, #448]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	496d      	ldr	r1, [pc, #436]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b42:	4b6c      	ldr	r3, [pc, #432]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	4968      	ldr	r1, [pc, #416]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	604b      	str	r3, [r1, #4]
 8006b56:	e025      	b.n	8006ba4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b58:	4b66      	ldr	r3, [pc, #408]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a65      	ldr	r2, [pc, #404]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b5e:	f043 0308 	orr.w	r3, r3, #8
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	4b63      	ldr	r3, [pc, #396]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	4960      	ldr	r1, [pc, #384]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b76:	4b5f      	ldr	r3, [pc, #380]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	495b      	ldr	r1, [pc, #364]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d109      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fd47 	bl	8007628 <RCC_SetFlashLatencyFromMSIRange>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e343      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ba4:	f000 fc4a 	bl	800743c <HAL_RCC_GetSysClockFreq>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	4b52      	ldr	r3, [pc, #328]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	091b      	lsrs	r3, r3, #4
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	4950      	ldr	r1, [pc, #320]	; (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006bb6:	5ccb      	ldrb	r3, [r1, r3]
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc0:	4a4e      	ldr	r2, [pc, #312]	; (8006cfc <HAL_RCC_OscConfig+0x278>)
 8006bc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006bc4:	4b4e      	ldr	r3, [pc, #312]	; (8006d00 <HAL_RCC_OscConfig+0x27c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff faf1 	bl	80061b0 <HAL_InitTick>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d052      	beq.n	8006c7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	e327      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d032      	beq.n	8006c4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006be4:	4b43      	ldr	r3, [pc, #268]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a42      	ldr	r2, [pc, #264]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bf0:	f7ff fbce 	bl	8006390 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bf8:	f7ff fbca 	bl	8006390 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e310      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c0a:	4b3a      	ldr	r3, [pc, #232]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c16:	4b37      	ldr	r3, [pc, #220]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a36      	ldr	r2, [pc, #216]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c1c:	f043 0308 	orr.w	r3, r3, #8
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4b34      	ldr	r3, [pc, #208]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	4931      	ldr	r1, [pc, #196]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c34:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	492c      	ldr	r1, [pc, #176]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	604b      	str	r3, [r1, #4]
 8006c48:	e01a      	b.n	8006c80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c4a:	4b2a      	ldr	r3, [pc, #168]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a29      	ldr	r2, [pc, #164]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c56:	f7ff fb9b 	bl	8006390 <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c5c:	e008      	b.n	8006c70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c5e:	f7ff fb97 	bl	8006390 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e2dd      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c70:	4b20      	ldr	r3, [pc, #128]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f0      	bne.n	8006c5e <HAL_RCC_OscConfig+0x1da>
 8006c7c:	e000      	b.n	8006c80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d074      	beq.n	8006d76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d005      	beq.n	8006c9e <HAL_RCC_OscConfig+0x21a>
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d10e      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d10b      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c9e:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d064      	beq.n	8006d74 <HAL_RCC_OscConfig+0x2f0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d160      	bne.n	8006d74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e2ba      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cbe:	d106      	bne.n	8006cce <HAL_RCC_OscConfig+0x24a>
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a0b      	ldr	r2, [pc, #44]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	e026      	b.n	8006d1c <HAL_RCC_OscConfig+0x298>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cd6:	d115      	bne.n	8006d04 <HAL_RCC_OscConfig+0x280>
 8006cd8:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a05      	ldr	r2, [pc, #20]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a02      	ldr	r2, [pc, #8]	; (8006cf4 <HAL_RCC_OscConfig+0x270>)
 8006cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	e014      	b.n	8006d1c <HAL_RCC_OscConfig+0x298>
 8006cf2:	bf00      	nop
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	0801cad4 	.word	0x0801cad4
 8006cfc:	20002010 	.word	0x20002010
 8006d00:	20002014 	.word	0x20002014
 8006d04:	4ba0      	ldr	r3, [pc, #640]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a9f      	ldr	r2, [pc, #636]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	4b9d      	ldr	r3, [pc, #628]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a9c      	ldr	r2, [pc, #624]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d013      	beq.n	8006d4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d24:	f7ff fb34 	bl	8006390 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d2c:	f7ff fb30 	bl	8006390 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b64      	cmp	r3, #100	; 0x64
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e276      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d3e:	4b92      	ldr	r3, [pc, #584]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0f0      	beq.n	8006d2c <HAL_RCC_OscConfig+0x2a8>
 8006d4a:	e014      	b.n	8006d76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4c:	f7ff fb20 	bl	8006390 <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d54:	f7ff fb1c 	bl	8006390 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b64      	cmp	r3, #100	; 0x64
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e262      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d66:	4b88      	ldr	r3, [pc, #544]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f0      	bne.n	8006d54 <HAL_RCC_OscConfig+0x2d0>
 8006d72:	e000      	b.n	8006d76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d060      	beq.n	8006e44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d005      	beq.n	8006d94 <HAL_RCC_OscConfig+0x310>
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b0c      	cmp	r3, #12
 8006d8c:	d119      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d116      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d94:	4b7c      	ldr	r3, [pc, #496]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_RCC_OscConfig+0x328>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e23f      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dac:	4b76      	ldr	r3, [pc, #472]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	061b      	lsls	r3, r3, #24
 8006dba:	4973      	ldr	r1, [pc, #460]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dc0:	e040      	b.n	8006e44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d023      	beq.n	8006e12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dca:	4b6f      	ldr	r3, [pc, #444]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6e      	ldr	r2, [pc, #440]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd6:	f7ff fadb 	bl	8006390 <HAL_GetTick>
 8006dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dde:	f7ff fad7 	bl	8006390 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e21d      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006df0:	4b65      	ldr	r3, [pc, #404]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0f0      	beq.n	8006dde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfc:	4b62      	ldr	r3, [pc, #392]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	061b      	lsls	r3, r3, #24
 8006e0a:	495f      	ldr	r1, [pc, #380]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	604b      	str	r3, [r1, #4]
 8006e10:	e018      	b.n	8006e44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e12:	4b5d      	ldr	r3, [pc, #372]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a5c      	ldr	r2, [pc, #368]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1e:	f7ff fab7 	bl	8006390 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e26:	f7ff fab3 	bl	8006390 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e1f9      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e38:	4b53      	ldr	r3, [pc, #332]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f0      	bne.n	8006e26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d03c      	beq.n	8006eca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01c      	beq.n	8006e92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e58:	4b4b      	ldr	r3, [pc, #300]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e5e:	4a4a      	ldr	r2, [pc, #296]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e68:	f7ff fa92 	bl	8006390 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e70:	f7ff fa8e 	bl	8006390 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e1d4      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e82:	4b41      	ldr	r3, [pc, #260]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0ef      	beq.n	8006e70 <HAL_RCC_OscConfig+0x3ec>
 8006e90:	e01b      	b.n	8006eca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e92:	4b3d      	ldr	r3, [pc, #244]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e98:	4a3b      	ldr	r2, [pc, #236]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006e9a:	f023 0301 	bic.w	r3, r3, #1
 8006e9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea2:	f7ff fa75 	bl	8006390 <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eaa:	f7ff fa71 	bl	8006390 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e1b7      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ebc:	4b32      	ldr	r3, [pc, #200]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1ef      	bne.n	8006eaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80a6 	beq.w	8007024 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006edc:	4b2a      	ldr	r3, [pc, #168]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10d      	bne.n	8006f04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee8:	4b27      	ldr	r3, [pc, #156]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eec:	4a26      	ldr	r2, [pc, #152]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ef4:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f00:	2301      	movs	r3, #1
 8006f02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f04:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <HAL_RCC_OscConfig+0x508>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d118      	bne.n	8006f42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f10:	4b1e      	ldr	r3, [pc, #120]	; (8006f8c <HAL_RCC_OscConfig+0x508>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <HAL_RCC_OscConfig+0x508>)
 8006f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f1c:	f7ff fa38 	bl	8006390 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f24:	f7ff fa34 	bl	8006390 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e17a      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f36:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <HAL_RCC_OscConfig+0x508>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d108      	bne.n	8006f5c <HAL_RCC_OscConfig+0x4d8>
 8006f4a:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f50:	4a0d      	ldr	r2, [pc, #52]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f5a:	e029      	b.n	8006fb0 <HAL_RCC_OscConfig+0x52c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	2b05      	cmp	r3, #5
 8006f62:	d115      	bne.n	8006f90 <HAL_RCC_OscConfig+0x50c>
 8006f64:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6a:	4a07      	ldr	r2, [pc, #28]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006f6c:	f043 0304 	orr.w	r3, r3, #4
 8006f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7a:	4a03      	ldr	r2, [pc, #12]	; (8006f88 <HAL_RCC_OscConfig+0x504>)
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f84:	e014      	b.n	8006fb0 <HAL_RCC_OscConfig+0x52c>
 8006f86:	bf00      	nop
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	40007000 	.word	0x40007000
 8006f90:	4b9c      	ldr	r3, [pc, #624]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f96:	4a9b      	ldr	r2, [pc, #620]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fa0:	4b98      	ldr	r3, [pc, #608]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa6:	4a97      	ldr	r2, [pc, #604]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 8006fa8:	f023 0304 	bic.w	r3, r3, #4
 8006fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d016      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb8:	f7ff f9ea 	bl	8006390 <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fbe:	e00a      	b.n	8006fd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc0:	f7ff f9e6 	bl	8006390 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e12a      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fd6:	4b8b      	ldr	r3, [pc, #556]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0ed      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x53c>
 8006fe4:	e015      	b.n	8007012 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe6:	f7ff f9d3 	bl	8006390 <HAL_GetTick>
 8006fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fec:	e00a      	b.n	8007004 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fee:	f7ff f9cf 	bl	8006390 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e113      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007004:	4b7f      	ldr	r3, [pc, #508]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 8007006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1ed      	bne.n	8006fee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007012:	7ffb      	ldrb	r3, [r7, #31]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d105      	bne.n	8007024 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007018:	4b7a      	ldr	r3, [pc, #488]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800701a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701c:	4a79      	ldr	r2, [pc, #484]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800701e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007022:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 80fe 	beq.w	800722a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	2b02      	cmp	r3, #2
 8007034:	f040 80d0 	bne.w	80071d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007038:	4b72      	ldr	r3, [pc, #456]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f003 0203 	and.w	r2, r3, #3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	429a      	cmp	r2, r3
 800704a:	d130      	bne.n	80070ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	3b01      	subs	r3, #1
 8007058:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800705a:	429a      	cmp	r2, r3
 800705c:	d127      	bne.n	80070ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800706a:	429a      	cmp	r2, r3
 800706c:	d11f      	bne.n	80070ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007078:	2a07      	cmp	r2, #7
 800707a:	bf14      	ite	ne
 800707c:	2201      	movne	r2, #1
 800707e:	2200      	moveq	r2, #0
 8007080:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007082:	4293      	cmp	r3, r2
 8007084:	d113      	bne.n	80070ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	3b01      	subs	r3, #1
 8007094:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007096:	429a      	cmp	r2, r3
 8007098:	d109      	bne.n	80070ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	3b01      	subs	r3, #1
 80070a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d06e      	beq.n	800718c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d069      	beq.n	8007188 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80070b4:	4b53      	ldr	r3, [pc, #332]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d105      	bne.n	80070cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80070c0:	4b50      	ldr	r3, [pc, #320]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0ad      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80070d0:	4b4c      	ldr	r3, [pc, #304]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a4b      	ldr	r2, [pc, #300]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80070d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070dc:	f7ff f958 	bl	8006390 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e4:	f7ff f954 	bl	8006390 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e09a      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070f6:	4b43      	ldr	r3, [pc, #268]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007102:	4b40      	ldr	r3, [pc, #256]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	4b40      	ldr	r3, [pc, #256]	; (8007208 <HAL_RCC_OscConfig+0x784>)
 8007108:	4013      	ands	r3, r2
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007112:	3a01      	subs	r2, #1
 8007114:	0112      	lsls	r2, r2, #4
 8007116:	4311      	orrs	r1, r2
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800711c:	0212      	lsls	r2, r2, #8
 800711e:	4311      	orrs	r1, r2
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007124:	0852      	lsrs	r2, r2, #1
 8007126:	3a01      	subs	r2, #1
 8007128:	0552      	lsls	r2, r2, #21
 800712a:	4311      	orrs	r1, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007130:	0852      	lsrs	r2, r2, #1
 8007132:	3a01      	subs	r2, #1
 8007134:	0652      	lsls	r2, r2, #25
 8007136:	4311      	orrs	r1, r2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800713c:	0912      	lsrs	r2, r2, #4
 800713e:	0452      	lsls	r2, r2, #17
 8007140:	430a      	orrs	r2, r1
 8007142:	4930      	ldr	r1, [pc, #192]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 8007144:	4313      	orrs	r3, r2
 8007146:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007148:	4b2e      	ldr	r3, [pc, #184]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2d      	ldr	r2, [pc, #180]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800714e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007152:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007154:	4b2b      	ldr	r3, [pc, #172]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	4a2a      	ldr	r2, [pc, #168]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800715a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800715e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007160:	f7ff f916 	bl	8006390 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007168:	f7ff f912 	bl	8006390 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e058      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800717a:	4b22      	ldr	r3, [pc, #136]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007186:	e050      	b.n	800722a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e04f      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800718c:	4b1d      	ldr	r3, [pc, #116]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d148      	bne.n	800722a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007198:	4b1a      	ldr	r3, [pc, #104]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a19      	ldr	r2, [pc, #100]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 800719e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071a4:	4b17      	ldr	r3, [pc, #92]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	4a16      	ldr	r2, [pc, #88]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80071aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071b0:	f7ff f8ee 	bl	8006390 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b8:	f7ff f8ea 	bl	8006390 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e030      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ca:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0f0      	beq.n	80071b8 <HAL_RCC_OscConfig+0x734>
 80071d6:	e028      	b.n	800722a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b0c      	cmp	r3, #12
 80071dc:	d023      	beq.n	8007226 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a08      	ldr	r2, [pc, #32]	; (8007204 <HAL_RCC_OscConfig+0x780>)
 80071e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ea:	f7ff f8d1 	bl	8006390 <HAL_GetTick>
 80071ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071f0:	e00c      	b.n	800720c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f2:	f7ff f8cd 	bl	8006390 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d905      	bls.n	800720c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e013      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
 8007204:	40021000 	.word	0x40021000
 8007208:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800720c:	4b09      	ldr	r3, [pc, #36]	; (8007234 <HAL_RCC_OscConfig+0x7b0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1ec      	bne.n	80071f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <HAL_RCC_OscConfig+0x7b0>)
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	4905      	ldr	r1, [pc, #20]	; (8007234 <HAL_RCC_OscConfig+0x7b0>)
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <HAL_RCC_OscConfig+0x7b4>)
 8007220:	4013      	ands	r3, r2
 8007222:	60cb      	str	r3, [r1, #12]
 8007224:	e001      	b.n	800722a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40021000 	.word	0x40021000
 8007238:	feeefffc 	.word	0xfeeefffc

0800723c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e0e7      	b.n	8007420 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007250:	4b75      	ldr	r3, [pc, #468]	; (8007428 <HAL_RCC_ClockConfig+0x1ec>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d910      	bls.n	8007280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800725e:	4b72      	ldr	r3, [pc, #456]	; (8007428 <HAL_RCC_ClockConfig+0x1ec>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f023 0207 	bic.w	r2, r3, #7
 8007266:	4970      	ldr	r1, [pc, #448]	; (8007428 <HAL_RCC_ClockConfig+0x1ec>)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	4313      	orrs	r3, r2
 800726c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800726e:	4b6e      	ldr	r3, [pc, #440]	; (8007428 <HAL_RCC_ClockConfig+0x1ec>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d001      	beq.n	8007280 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0cf      	b.n	8007420 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d010      	beq.n	80072ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	4b66      	ldr	r3, [pc, #408]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007298:	429a      	cmp	r2, r3
 800729a:	d908      	bls.n	80072ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800729c:	4b63      	ldr	r3, [pc, #396]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	4960      	ldr	r1, [pc, #384]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d04c      	beq.n	8007354 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d107      	bne.n	80072d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072c2:	4b5a      	ldr	r3, [pc, #360]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d121      	bne.n	8007312 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e0a6      	b.n	8007420 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d107      	bne.n	80072ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072da:	4b54      	ldr	r3, [pc, #336]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d115      	bne.n	8007312 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e09a      	b.n	8007420 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d107      	bne.n	8007302 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072f2:	4b4e      	ldr	r3, [pc, #312]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e08e      	b.n	8007420 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007302:	4b4a      	ldr	r3, [pc, #296]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e086      	b.n	8007420 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007312:	4b46      	ldr	r3, [pc, #280]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f023 0203 	bic.w	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4943      	ldr	r1, [pc, #268]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 8007320:	4313      	orrs	r3, r2
 8007322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007324:	f7ff f834 	bl	8006390 <HAL_GetTick>
 8007328:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732a:	e00a      	b.n	8007342 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800732c:	f7ff f830 	bl	8006390 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	f241 3288 	movw	r2, #5000	; 0x1388
 800733a:	4293      	cmp	r3, r2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e06e      	b.n	8007420 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007342:	4b3a      	ldr	r3, [pc, #232]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 020c 	and.w	r2, r3, #12
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	429a      	cmp	r2, r3
 8007352:	d1eb      	bne.n	800732c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d010      	beq.n	8007382 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	4b31      	ldr	r3, [pc, #196]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800736c:	429a      	cmp	r2, r3
 800736e:	d208      	bcs.n	8007382 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007370:	4b2e      	ldr	r3, [pc, #184]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	492b      	ldr	r1, [pc, #172]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 800737e:	4313      	orrs	r3, r2
 8007380:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007382:	4b29      	ldr	r3, [pc, #164]	; (8007428 <HAL_RCC_ClockConfig+0x1ec>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d210      	bcs.n	80073b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <HAL_RCC_ClockConfig+0x1ec>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f023 0207 	bic.w	r2, r3, #7
 8007398:	4923      	ldr	r1, [pc, #140]	; (8007428 <HAL_RCC_ClockConfig+0x1ec>)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	4313      	orrs	r3, r2
 800739e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073a0:	4b21      	ldr	r3, [pc, #132]	; (8007428 <HAL_RCC_ClockConfig+0x1ec>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d001      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e036      	b.n	8007420 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073be:	4b1b      	ldr	r3, [pc, #108]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	4918      	ldr	r1, [pc, #96]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0308 	and.w	r3, r3, #8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073dc:	4b13      	ldr	r3, [pc, #76]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4910      	ldr	r1, [pc, #64]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073f0:	f000 f824 	bl	800743c <HAL_RCC_GetSysClockFreq>
 80073f4:	4602      	mov	r2, r0
 80073f6:	4b0d      	ldr	r3, [pc, #52]	; (800742c <HAL_RCC_ClockConfig+0x1f0>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	091b      	lsrs	r3, r3, #4
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	490b      	ldr	r1, [pc, #44]	; (8007430 <HAL_RCC_ClockConfig+0x1f4>)
 8007402:	5ccb      	ldrb	r3, [r1, r3]
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
 800740c:	4a09      	ldr	r2, [pc, #36]	; (8007434 <HAL_RCC_ClockConfig+0x1f8>)
 800740e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <HAL_RCC_ClockConfig+0x1fc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe fecb 	bl	80061b0 <HAL_InitTick>
 800741a:	4603      	mov	r3, r0
 800741c:	72fb      	strb	r3, [r7, #11]

  return status;
 800741e:	7afb      	ldrb	r3, [r7, #11]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40022000 	.word	0x40022000
 800742c:	40021000 	.word	0x40021000
 8007430:	0801cad4 	.word	0x0801cad4
 8007434:	20002010 	.word	0x20002010
 8007438:	20002014 	.word	0x20002014

0800743c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800743c:	b480      	push	{r7}
 800743e:	b089      	sub	sp, #36	; 0x24
 8007440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	2300      	movs	r3, #0
 8007448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800744a:	4b3e      	ldr	r3, [pc, #248]	; (8007544 <HAL_RCC_GetSysClockFreq+0x108>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 030c 	and.w	r3, r3, #12
 8007452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007454:	4b3b      	ldr	r3, [pc, #236]	; (8007544 <HAL_RCC_GetSysClockFreq+0x108>)
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f003 0303 	and.w	r3, r3, #3
 800745c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_RCC_GetSysClockFreq+0x34>
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2b0c      	cmp	r3, #12
 8007468:	d121      	bne.n	80074ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d11e      	bne.n	80074ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007470:	4b34      	ldr	r3, [pc, #208]	; (8007544 <HAL_RCC_GetSysClockFreq+0x108>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d107      	bne.n	800748c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800747c:	4b31      	ldr	r3, [pc, #196]	; (8007544 <HAL_RCC_GetSysClockFreq+0x108>)
 800747e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	61fb      	str	r3, [r7, #28]
 800748a:	e005      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800748c:	4b2d      	ldr	r3, [pc, #180]	; (8007544 <HAL_RCC_GetSysClockFreq+0x108>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	091b      	lsrs	r3, r3, #4
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007498:	4a2b      	ldr	r2, [pc, #172]	; (8007548 <HAL_RCC_GetSysClockFreq+0x10c>)
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10d      	bne.n	80074c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074ac:	e00a      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d102      	bne.n	80074ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80074b4:	4b25      	ldr	r3, [pc, #148]	; (800754c <HAL_RCC_GetSysClockFreq+0x110>)
 80074b6:	61bb      	str	r3, [r7, #24]
 80074b8:	e004      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d101      	bne.n	80074c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80074c0:	4b23      	ldr	r3, [pc, #140]	; (8007550 <HAL_RCC_GetSysClockFreq+0x114>)
 80074c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b0c      	cmp	r3, #12
 80074c8:	d134      	bne.n	8007534 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074ca:	4b1e      	ldr	r3, [pc, #120]	; (8007544 <HAL_RCC_GetSysClockFreq+0x108>)
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d003      	beq.n	80074e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d003      	beq.n	80074e8 <HAL_RCC_GetSysClockFreq+0xac>
 80074e0:	e005      	b.n	80074ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80074e2:	4b1a      	ldr	r3, [pc, #104]	; (800754c <HAL_RCC_GetSysClockFreq+0x110>)
 80074e4:	617b      	str	r3, [r7, #20]
      break;
 80074e6:	e005      	b.n	80074f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80074e8:	4b19      	ldr	r3, [pc, #100]	; (8007550 <HAL_RCC_GetSysClockFreq+0x114>)
 80074ea:	617b      	str	r3, [r7, #20]
      break;
 80074ec:	e002      	b.n	80074f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	617b      	str	r3, [r7, #20]
      break;
 80074f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074f4:	4b13      	ldr	r3, [pc, #76]	; (8007544 <HAL_RCC_GetSysClockFreq+0x108>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	091b      	lsrs	r3, r3, #4
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	3301      	adds	r3, #1
 8007500:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007502:	4b10      	ldr	r3, [pc, #64]	; (8007544 <HAL_RCC_GetSysClockFreq+0x108>)
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	0a1b      	lsrs	r3, r3, #8
 8007508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	fb03 f202 	mul.w	r2, r3, r2
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800751a:	4b0a      	ldr	r3, [pc, #40]	; (8007544 <HAL_RCC_GetSysClockFreq+0x108>)
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	0e5b      	lsrs	r3, r3, #25
 8007520:	f003 0303 	and.w	r3, r3, #3
 8007524:	3301      	adds	r3, #1
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007532:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007534:	69bb      	ldr	r3, [r7, #24]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3724      	adds	r7, #36	; 0x24
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40021000 	.word	0x40021000
 8007548:	0801caec 	.word	0x0801caec
 800754c:	00f42400 	.word	0x00f42400
 8007550:	007a1200 	.word	0x007a1200

08007554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007558:	4b03      	ldr	r3, [pc, #12]	; (8007568 <HAL_RCC_GetHCLKFreq+0x14>)
 800755a:	681b      	ldr	r3, [r3, #0]
}
 800755c:	4618      	mov	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20002010 	.word	0x20002010

0800756c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007570:	f7ff fff0 	bl	8007554 <HAL_RCC_GetHCLKFreq>
 8007574:	4602      	mov	r2, r0
 8007576:	4b06      	ldr	r3, [pc, #24]	; (8007590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	4904      	ldr	r1, [pc, #16]	; (8007594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007582:	5ccb      	ldrb	r3, [r1, r3]
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800758c:	4618      	mov	r0, r3
 800758e:	bd80      	pop	{r7, pc}
 8007590:	40021000 	.word	0x40021000
 8007594:	0801cae4 	.word	0x0801cae4

08007598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800759c:	f7ff ffda 	bl	8007554 <HAL_RCC_GetHCLKFreq>
 80075a0:	4602      	mov	r2, r0
 80075a2:	4b06      	ldr	r3, [pc, #24]	; (80075bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	0adb      	lsrs	r3, r3, #11
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	4904      	ldr	r1, [pc, #16]	; (80075c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80075ae:	5ccb      	ldrb	r3, [r1, r3]
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	40021000 	.word	0x40021000
 80075c0:	0801cae4 	.word	0x0801cae4

080075c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	220f      	movs	r2, #15
 80075d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80075d4:	4b12      	ldr	r3, [pc, #72]	; (8007620 <HAL_RCC_GetClockConfig+0x5c>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0203 	and.w	r2, r3, #3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80075e0:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <HAL_RCC_GetClockConfig+0x5c>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80075ec:	4b0c      	ldr	r3, [pc, #48]	; (8007620 <HAL_RCC_GetClockConfig+0x5c>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80075f8:	4b09      	ldr	r3, [pc, #36]	; (8007620 <HAL_RCC_GetClockConfig+0x5c>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	08db      	lsrs	r3, r3, #3
 80075fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <HAL_RCC_GetClockConfig+0x60>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0207 	and.w	r2, r3, #7
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	601a      	str	r2, [r3, #0]
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40021000 	.word	0x40021000
 8007624:	40022000 	.word	0x40022000

08007628 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007634:	4b2a      	ldr	r3, [pc, #168]	; (80076e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007640:	f7ff f9bc 	bl	80069bc <HAL_PWREx_GetVoltageRange>
 8007644:	6178      	str	r0, [r7, #20]
 8007646:	e014      	b.n	8007672 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007648:	4b25      	ldr	r3, [pc, #148]	; (80076e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800764a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764c:	4a24      	ldr	r2, [pc, #144]	; (80076e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800764e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007652:	6593      	str	r3, [r2, #88]	; 0x58
 8007654:	4b22      	ldr	r3, [pc, #136]	; (80076e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007660:	f7ff f9ac 	bl	80069bc <HAL_PWREx_GetVoltageRange>
 8007664:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007666:	4b1e      	ldr	r3, [pc, #120]	; (80076e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766a:	4a1d      	ldr	r2, [pc, #116]	; (80076e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800766c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007670:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007678:	d10b      	bne.n	8007692 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b80      	cmp	r3, #128	; 0x80
 800767e:	d919      	bls.n	80076b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2ba0      	cmp	r3, #160	; 0xa0
 8007684:	d902      	bls.n	800768c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007686:	2302      	movs	r3, #2
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	e013      	b.n	80076b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800768c:	2301      	movs	r3, #1
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	e010      	b.n	80076b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b80      	cmp	r3, #128	; 0x80
 8007696:	d902      	bls.n	800769e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007698:	2303      	movs	r3, #3
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	e00a      	b.n	80076b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d102      	bne.n	80076aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076a4:	2302      	movs	r3, #2
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	e004      	b.n	80076b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b70      	cmp	r3, #112	; 0x70
 80076ae:	d101      	bne.n	80076b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076b0:	2301      	movs	r3, #1
 80076b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80076b4:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f023 0207 	bic.w	r2, r3, #7
 80076bc:	4909      	ldr	r1, [pc, #36]	; (80076e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d001      	beq.n	80076d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	40021000 	.word	0x40021000
 80076e4:	40022000 	.word	0x40022000

080076e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076f0:	2300      	movs	r3, #0
 80076f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076f4:	2300      	movs	r3, #0
 80076f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007700:	2b00      	cmp	r3, #0
 8007702:	d041      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007708:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800770c:	d02a      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800770e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007712:	d824      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007714:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007718:	d008      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800771a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800771e:	d81e      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00a      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007728:	d010      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800772a:	e018      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800772c:	4b86      	ldr	r3, [pc, #536]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4a85      	ldr	r2, [pc, #532]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007736:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007738:	e015      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3304      	adds	r3, #4
 800773e:	2100      	movs	r1, #0
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fabb 	bl	8007cbc <RCCEx_PLLSAI1_Config>
 8007746:	4603      	mov	r3, r0
 8007748:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800774a:	e00c      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3320      	adds	r3, #32
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fba6 	bl	8007ea4 <RCCEx_PLLSAI2_Config>
 8007758:	4603      	mov	r3, r0
 800775a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800775c:	e003      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	74fb      	strb	r3, [r7, #19]
      break;
 8007762:	e000      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007766:	7cfb      	ldrb	r3, [r7, #19]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800776c:	4b76      	ldr	r3, [pc, #472]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800776e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007772:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777a:	4973      	ldr	r1, [pc, #460]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800777c:	4313      	orrs	r3, r2
 800777e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007782:	e001      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007784:	7cfb      	ldrb	r3, [r7, #19]
 8007786:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d041      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007798:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800779c:	d02a      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800779e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077a2:	d824      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80077a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077a8:	d008      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80077aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077ae:	d81e      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00a      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80077b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077b8:	d010      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80077ba:	e018      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80077bc:	4b62      	ldr	r3, [pc, #392]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4a61      	ldr	r2, [pc, #388]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80077c8:	e015      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3304      	adds	r3, #4
 80077ce:	2100      	movs	r1, #0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fa73 	bl	8007cbc <RCCEx_PLLSAI1_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80077da:	e00c      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3320      	adds	r3, #32
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fb5e 	bl	8007ea4 <RCCEx_PLLSAI2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80077ec:	e003      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	74fb      	strb	r3, [r7, #19]
      break;
 80077f2:	e000      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80077f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f6:	7cfb      	ldrb	r3, [r7, #19]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10b      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80077fc:	4b52      	ldr	r3, [pc, #328]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007802:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800780a:	494f      	ldr	r1, [pc, #316]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800780c:	4313      	orrs	r3, r2
 800780e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007812:	e001      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007814:	7cfb      	ldrb	r3, [r7, #19]
 8007816:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80a0 	beq.w	8007966 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007826:	2300      	movs	r3, #0
 8007828:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800782a:	4b47      	ldr	r3, [pc, #284]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800782c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800783a:	2300      	movs	r3, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00d      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007840:	4b41      	ldr	r3, [pc, #260]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007844:	4a40      	ldr	r2, [pc, #256]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800784a:	6593      	str	r3, [r2, #88]	; 0x58
 800784c:	4b3e      	ldr	r3, [pc, #248]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800784e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007854:	60bb      	str	r3, [r7, #8]
 8007856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007858:	2301      	movs	r3, #1
 800785a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800785c:	4b3b      	ldr	r3, [pc, #236]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a3a      	ldr	r2, [pc, #232]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007868:	f7fe fd92 	bl	8006390 <HAL_GetTick>
 800786c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800786e:	e009      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007870:	f7fe fd8e 	bl	8006390 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d902      	bls.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	74fb      	strb	r3, [r7, #19]
        break;
 8007882:	e005      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007884:	4b31      	ldr	r3, [pc, #196]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0ef      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007890:	7cfb      	ldrb	r3, [r7, #19]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d15c      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007896:	4b2c      	ldr	r3, [pc, #176]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01f      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d019      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078b4:	4b24      	ldr	r3, [pc, #144]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078c0:	4b21      	ldr	r3, [pc, #132]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c6:	4a20      	ldr	r2, [pc, #128]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078d0:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d6:	4a1c      	ldr	r2, [pc, #112]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078e0:	4a19      	ldr	r2, [pc, #100]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d016      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f2:	f7fe fd4d 	bl	8006390 <HAL_GetTick>
 80078f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078f8:	e00b      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078fa:	f7fe fd49 	bl	8006390 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	f241 3288 	movw	r2, #5000	; 0x1388
 8007908:	4293      	cmp	r3, r2
 800790a:	d902      	bls.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	74fb      	strb	r3, [r7, #19]
            break;
 8007910:	e006      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0ec      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007920:	7cfb      	ldrb	r3, [r7, #19]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007926:	4b08      	ldr	r3, [pc, #32]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007936:	4904      	ldr	r1, [pc, #16]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007938:	4313      	orrs	r3, r2
 800793a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800793e:	e009      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007940:	7cfb      	ldrb	r3, [r7, #19]
 8007942:	74bb      	strb	r3, [r7, #18]
 8007944:	e006      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007946:	bf00      	nop
 8007948:	40021000 	.word	0x40021000
 800794c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007950:	7cfb      	ldrb	r3, [r7, #19]
 8007952:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007954:	7c7b      	ldrb	r3, [r7, #17]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d105      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800795a:	4b9e      	ldr	r3, [pc, #632]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800795c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795e:	4a9d      	ldr	r2, [pc, #628]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007964:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007972:	4b98      	ldr	r3, [pc, #608]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007978:	f023 0203 	bic.w	r2, r3, #3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007980:	4994      	ldr	r1, [pc, #592]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007982:	4313      	orrs	r3, r2
 8007984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007994:	4b8f      	ldr	r3, [pc, #572]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799a:	f023 020c 	bic.w	r2, r3, #12
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	498c      	ldr	r1, [pc, #560]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079b6:	4b87      	ldr	r3, [pc, #540]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c4:	4983      	ldr	r1, [pc, #524]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0308 	and.w	r3, r3, #8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079d8:	4b7e      	ldr	r3, [pc, #504]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e6:	497b      	ldr	r1, [pc, #492]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0310 	and.w	r3, r3, #16
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079fa:	4b76      	ldr	r3, [pc, #472]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a08:	4972      	ldr	r1, [pc, #456]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a1c:	4b6d      	ldr	r3, [pc, #436]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2a:	496a      	ldr	r1, [pc, #424]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a3e:	4b65      	ldr	r3, [pc, #404]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4c:	4961      	ldr	r1, [pc, #388]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00a      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a60:	4b5c      	ldr	r3, [pc, #368]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a6e:	4959      	ldr	r1, [pc, #356]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a82:	4b54      	ldr	r3, [pc, #336]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a90:	4950      	ldr	r1, [pc, #320]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00a      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007aa4:	4b4b      	ldr	r3, [pc, #300]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aaa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab2:	4948      	ldr	r1, [pc, #288]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ac6:	4b43      	ldr	r3, [pc, #268]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad4:	493f      	ldr	r1, [pc, #252]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d028      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ae8:	4b3a      	ldr	r3, [pc, #232]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af6:	4937      	ldr	r1, [pc, #220]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b06:	d106      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b08:	4b32      	ldr	r3, [pc, #200]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	4a31      	ldr	r2, [pc, #196]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b12:	60d3      	str	r3, [r2, #12]
 8007b14:	e011      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b1e:	d10c      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3304      	adds	r3, #4
 8007b24:	2101      	movs	r1, #1
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f8c8 	bl	8007cbc <RCCEx_PLLSAI1_Config>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007b30:	7cfb      	ldrb	r3, [r7, #19]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007b36:	7cfb      	ldrb	r3, [r7, #19]
 8007b38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d028      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b46:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b54:	491f      	ldr	r1, [pc, #124]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b64:	d106      	bne.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b66:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	4a1a      	ldr	r2, [pc, #104]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b70:	60d3      	str	r3, [r2, #12]
 8007b72:	e011      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b7c:	d10c      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3304      	adds	r3, #4
 8007b82:	2101      	movs	r1, #1
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 f899 	bl	8007cbc <RCCEx_PLLSAI1_Config>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b8e:	7cfb      	ldrb	r3, [r7, #19]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007b94:	7cfb      	ldrb	r3, [r7, #19]
 8007b96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d02b      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ba4:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb2:	4908      	ldr	r1, [pc, #32]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bc2:	d109      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bc4:	4b03      	ldr	r3, [pc, #12]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4a02      	ldr	r2, [pc, #8]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bce:	60d3      	str	r3, [r2, #12]
 8007bd0:	e014      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007bd2:	bf00      	nop
 8007bd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007be0:	d10c      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3304      	adds	r3, #4
 8007be6:	2101      	movs	r1, #1
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 f867 	bl	8007cbc <RCCEx_PLLSAI1_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bf2:	7cfb      	ldrb	r3, [r7, #19]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007bf8:	7cfb      	ldrb	r3, [r7, #19]
 8007bfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d02f      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c08:	4b2b      	ldr	r3, [pc, #172]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c16:	4928      	ldr	r1, [pc, #160]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c26:	d10d      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	2102      	movs	r1, #2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 f844 	bl	8007cbc <RCCEx_PLLSAI1_Config>
 8007c34:	4603      	mov	r3, r0
 8007c36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c38:	7cfb      	ldrb	r3, [r7, #19]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d014      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007c3e:	7cfb      	ldrb	r3, [r7, #19]
 8007c40:	74bb      	strb	r3, [r7, #18]
 8007c42:	e011      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c4c:	d10c      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3320      	adds	r3, #32
 8007c52:	2102      	movs	r1, #2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 f925 	bl	8007ea4 <RCCEx_PLLSAI2_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c5e:	7cfb      	ldrb	r3, [r7, #19]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007c64:	7cfb      	ldrb	r3, [r7, #19]
 8007c66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00a      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c74:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c82:	490d      	ldr	r1, [pc, #52]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00b      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c96:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca6:	4904      	ldr	r1, [pc, #16]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007cae:	7cbb      	ldrb	r3, [r7, #18]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40021000 	.word	0x40021000

08007cbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007cca:	4b75      	ldr	r3, [pc, #468]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d018      	beq.n	8007d08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007cd6:	4b72      	ldr	r3, [pc, #456]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f003 0203 	and.w	r2, r3, #3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d10d      	bne.n	8007d02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
       ||
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007cee:	4b6c      	ldr	r3, [pc, #432]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	091b      	lsrs	r3, r3, #4
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
       ||
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d047      	beq.n	8007d92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	73fb      	strb	r3, [r7, #15]
 8007d06:	e044      	b.n	8007d92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d018      	beq.n	8007d42 <RCCEx_PLLSAI1_Config+0x86>
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d825      	bhi.n	8007d60 <RCCEx_PLLSAI1_Config+0xa4>
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d002      	beq.n	8007d1e <RCCEx_PLLSAI1_Config+0x62>
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d009      	beq.n	8007d30 <RCCEx_PLLSAI1_Config+0x74>
 8007d1c:	e020      	b.n	8007d60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d1e:	4b60      	ldr	r3, [pc, #384]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d11d      	bne.n	8007d66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d2e:	e01a      	b.n	8007d66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d30:	4b5b      	ldr	r3, [pc, #364]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d116      	bne.n	8007d6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d40:	e013      	b.n	8007d6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d42:	4b57      	ldr	r3, [pc, #348]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10f      	bne.n	8007d6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007d4e:	4b54      	ldr	r3, [pc, #336]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d5e:	e006      	b.n	8007d6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
      break;
 8007d64:	e004      	b.n	8007d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d66:	bf00      	nop
 8007d68:	e002      	b.n	8007d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d6a:	bf00      	nop
 8007d6c:	e000      	b.n	8007d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10d      	bne.n	8007d92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007d76:	4b4a      	ldr	r3, [pc, #296]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6819      	ldr	r1, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	4944      	ldr	r1, [pc, #272]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d17d      	bne.n	8007e94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007d98:	4b41      	ldr	r3, [pc, #260]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a40      	ldr	r2, [pc, #256]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da4:	f7fe faf4 	bl	8006390 <HAL_GetTick>
 8007da8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007daa:	e009      	b.n	8007dc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007dac:	f7fe faf0 	bl	8006390 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d902      	bls.n	8007dc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	73fb      	strb	r3, [r7, #15]
        break;
 8007dbe:	e005      	b.n	8007dcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007dc0:	4b37      	ldr	r3, [pc, #220]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1ef      	bne.n	8007dac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d160      	bne.n	8007e94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d111      	bne.n	8007dfc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007dd8:	4b31      	ldr	r3, [pc, #196]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6892      	ldr	r2, [r2, #8]
 8007de8:	0211      	lsls	r1, r2, #8
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68d2      	ldr	r2, [r2, #12]
 8007dee:	0912      	lsrs	r2, r2, #4
 8007df0:	0452      	lsls	r2, r2, #17
 8007df2:	430a      	orrs	r2, r1
 8007df4:	492a      	ldr	r1, [pc, #168]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	610b      	str	r3, [r1, #16]
 8007dfa:	e027      	b.n	8007e4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d112      	bne.n	8007e28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e02:	4b27      	ldr	r3, [pc, #156]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007e0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	6892      	ldr	r2, [r2, #8]
 8007e12:	0211      	lsls	r1, r2, #8
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6912      	ldr	r2, [r2, #16]
 8007e18:	0852      	lsrs	r2, r2, #1
 8007e1a:	3a01      	subs	r2, #1
 8007e1c:	0552      	lsls	r2, r2, #21
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	491f      	ldr	r1, [pc, #124]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	610b      	str	r3, [r1, #16]
 8007e26:	e011      	b.n	8007e4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e28:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007e30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6892      	ldr	r2, [r2, #8]
 8007e38:	0211      	lsls	r1, r2, #8
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6952      	ldr	r2, [r2, #20]
 8007e3e:	0852      	lsrs	r2, r2, #1
 8007e40:	3a01      	subs	r2, #1
 8007e42:	0652      	lsls	r2, r2, #25
 8007e44:	430a      	orrs	r2, r1
 8007e46:	4916      	ldr	r1, [pc, #88]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007e4c:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a13      	ldr	r2, [pc, #76]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e58:	f7fe fa9a 	bl	8006390 <HAL_GetTick>
 8007e5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e5e:	e009      	b.n	8007e74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e60:	f7fe fa96 	bl	8006390 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d902      	bls.n	8007e74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	73fb      	strb	r3, [r7, #15]
          break;
 8007e72:	e005      	b.n	8007e80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0ef      	beq.n	8007e60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007e86:	4b06      	ldr	r3, [pc, #24]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	4904      	ldr	r1, [pc, #16]	; (8007ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40021000 	.word	0x40021000

08007ea4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007eb2:	4b6a      	ldr	r3, [pc, #424]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d018      	beq.n	8007ef0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007ebe:	4b67      	ldr	r3, [pc, #412]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f003 0203 	and.w	r2, r3, #3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d10d      	bne.n	8007eea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007ed6:	4b61      	ldr	r3, [pc, #388]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	091b      	lsrs	r3, r3, #4
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
       ||
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d047      	beq.n	8007f7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	73fb      	strb	r3, [r7, #15]
 8007eee:	e044      	b.n	8007f7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d018      	beq.n	8007f2a <RCCEx_PLLSAI2_Config+0x86>
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	d825      	bhi.n	8007f48 <RCCEx_PLLSAI2_Config+0xa4>
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d002      	beq.n	8007f06 <RCCEx_PLLSAI2_Config+0x62>
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d009      	beq.n	8007f18 <RCCEx_PLLSAI2_Config+0x74>
 8007f04:	e020      	b.n	8007f48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f06:	4b55      	ldr	r3, [pc, #340]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d11d      	bne.n	8007f4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f16:	e01a      	b.n	8007f4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f18:	4b50      	ldr	r3, [pc, #320]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d116      	bne.n	8007f52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f28:	e013      	b.n	8007f52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f2a:	4b4c      	ldr	r3, [pc, #304]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10f      	bne.n	8007f56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f36:	4b49      	ldr	r3, [pc, #292]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f46:	e006      	b.n	8007f56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4c:	e004      	b.n	8007f58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007f4e:	bf00      	nop
 8007f50:	e002      	b.n	8007f58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007f52:	bf00      	nop
 8007f54:	e000      	b.n	8007f58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007f56:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10d      	bne.n	8007f7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007f5e:	4b3f      	ldr	r3, [pc, #252]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	430b      	orrs	r3, r1
 8007f74:	4939      	ldr	r1, [pc, #228]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d167      	bne.n	8008050 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007f80:	4b36      	ldr	r3, [pc, #216]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a35      	ldr	r2, [pc, #212]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f8c:	f7fe fa00 	bl	8006390 <HAL_GetTick>
 8007f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f92:	e009      	b.n	8007fa8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f94:	f7fe f9fc 	bl	8006390 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d902      	bls.n	8007fa8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8007fa6:	e005      	b.n	8007fb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007fa8:	4b2c      	ldr	r3, [pc, #176]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1ef      	bne.n	8007f94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d14a      	bne.n	8008050 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d111      	bne.n	8007fe4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007fc0:	4b26      	ldr	r3, [pc, #152]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6892      	ldr	r2, [r2, #8]
 8007fd0:	0211      	lsls	r1, r2, #8
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	68d2      	ldr	r2, [r2, #12]
 8007fd6:	0912      	lsrs	r2, r2, #4
 8007fd8:	0452      	lsls	r2, r2, #17
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	491f      	ldr	r1, [pc, #124]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	614b      	str	r3, [r1, #20]
 8007fe2:	e011      	b.n	8008008 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007fe4:	4b1d      	ldr	r3, [pc, #116]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007fec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6892      	ldr	r2, [r2, #8]
 8007ff4:	0211      	lsls	r1, r2, #8
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6912      	ldr	r2, [r2, #16]
 8007ffa:	0852      	lsrs	r2, r2, #1
 8007ffc:	3a01      	subs	r2, #1
 8007ffe:	0652      	lsls	r2, r2, #25
 8008000:	430a      	orrs	r2, r1
 8008002:	4916      	ldr	r1, [pc, #88]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008004:	4313      	orrs	r3, r2
 8008006:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008008:	4b14      	ldr	r3, [pc, #80]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a13      	ldr	r2, [pc, #76]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 800800e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008012:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008014:	f7fe f9bc 	bl	8006390 <HAL_GetTick>
 8008018:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800801a:	e009      	b.n	8008030 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800801c:	f7fe f9b8 	bl	8006390 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d902      	bls.n	8008030 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	73fb      	strb	r3, [r7, #15]
          break;
 800802e:	e005      	b.n	800803c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008030:	4b0a      	ldr	r3, [pc, #40]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0ef      	beq.n	800801c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d106      	bne.n	8008050 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008042:	4b06      	ldr	r3, [pc, #24]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	4904      	ldr	r1, [pc, #16]	; (800805c <RCCEx_PLLSAI2_Config+0x1b8>)
 800804c:	4313      	orrs	r3, r2
 800804e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40021000 	.word	0x40021000

08008060 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e095      	b.n	800819e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b00      	cmp	r3, #0
 8008078:	d108      	bne.n	800808c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008082:	d009      	beq.n	8008098 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	61da      	str	r2, [r3, #28]
 800808a:	e005      	b.n	8008098 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fd ffb6 	bl	8006024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080d8:	d902      	bls.n	80080e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	e002      	b.n	80080e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80080e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80080ee:	d007      	beq.n	8008100 <HAL_SPI_Init+0xa0>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080f8:	d002      	beq.n	8008100 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008138:	431a      	orrs	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008142:	ea42 0103 	orr.w	r1, r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	0c1b      	lsrs	r3, r3, #16
 800815c:	f003 0204 	and.w	r2, r3, #4
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	f003 0310 	and.w	r3, r3, #16
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800817c:	ea42 0103 	orr.w	r1, r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_SPI_Transmit_IT+0x20>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e072      	b.n	80082ae <HAL_SPI_Transmit_IT+0x106>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <HAL_SPI_Transmit_IT+0x34>
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d102      	bne.n	80081e2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081e0:	e060      	b.n	80082a4 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d002      	beq.n	80081f4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80081ee:	2302      	movs	r3, #2
 80081f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081f2:	e057      	b.n	80082a4 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2203      	movs	r2, #3
 80081f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	88fa      	ldrh	r2, [r7, #6]
 8008212:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008238:	d903      	bls.n	8008242 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4a1f      	ldr	r2, [pc, #124]	; (80082bc <HAL_SPI_Transmit_IT+0x114>)
 800823e:	651a      	str	r2, [r3, #80]	; 0x50
 8008240:	e002      	b.n	8008248 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4a1e      	ldr	r2, [pc, #120]	; (80082c0 <HAL_SPI_Transmit_IT+0x118>)
 8008246:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008250:	d10f      	bne.n	8008272 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008260:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008270:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8008280:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828c:	2b40      	cmp	r3, #64	; 0x40
 800828e:	d008      	beq.n	80082a2 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e000      	b.n	80082a4 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80082a2:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	08008549 	.word	0x08008549
 80082c0:	08008503 	.word	0x08008503

080082c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	099b      	lsrs	r3, r3, #6
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10f      	bne.n	8008308 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	099b      	lsrs	r3, r3, #6
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
    return;
 8008306:	e0d7      	b.n	80084b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	085b      	lsrs	r3, r3, #1
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00a      	beq.n	800832a <HAL_SPI_IRQHandler+0x66>
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	09db      	lsrs	r3, r3, #7
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d004      	beq.n	800832a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	4798      	blx	r3
    return;
 8008328:	e0c6      	b.n	80084b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10c      	bne.n	8008350 <HAL_SPI_IRQHandler+0x8c>
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	099b      	lsrs	r3, r3, #6
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	0a1b      	lsrs	r3, r3, #8
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80b4 	beq.w	80084b8 <HAL_SPI_IRQHandler+0x1f4>
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 80ad 	beq.w	80084b8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	099b      	lsrs	r3, r3, #6
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d023      	beq.n	80083b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b03      	cmp	r3, #3
 8008374:	d011      	beq.n	800839a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837a:	f043 0204 	orr.w	r2, r3, #4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	e00b      	b.n	80083b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800839a:	2300      	movs	r3, #0
 800839c:	613b      	str	r3, [r7, #16]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	613b      	str	r3, [r7, #16]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	613b      	str	r3, [r7, #16]
 80083ae:	693b      	ldr	r3, [r7, #16]
        return;
 80083b0:	e082      	b.n	80084b8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d014      	beq.n	80083e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c2:	f043 0201 	orr.w	r2, r3, #1
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00c      	beq.n	800840e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f8:	f043 0208 	orr.w	r2, r3, #8
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008400:	2300      	movs	r3, #0
 8008402:	60bb      	str	r3, [r7, #8]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	60bb      	str	r3, [r7, #8]
 800840c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008412:	2b00      	cmp	r3, #0
 8008414:	d04f      	beq.n	80084b6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008424:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	f003 0302 	and.w	r3, r3, #2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <HAL_SPI_IRQHandler+0x17e>
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d034      	beq.n	80084ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0203 	bic.w	r2, r2, #3
 8008450:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008456:	2b00      	cmp	r3, #0
 8008458:	d011      	beq.n	800847e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800845e:	4a18      	ldr	r2, [pc, #96]	; (80084c0 <HAL_SPI_IRQHandler+0x1fc>)
 8008460:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe f8a4 	bl	80065b4 <HAL_DMA_Abort_IT>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d005      	beq.n	800847e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008482:	2b00      	cmp	r3, #0
 8008484:	d016      	beq.n	80084b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848a:	4a0d      	ldr	r2, [pc, #52]	; (80084c0 <HAL_SPI_IRQHandler+0x1fc>)
 800848c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe f88e 	bl	80065b4 <HAL_DMA_Abort_IT>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80084aa:	e003      	b.n	80084b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f809 	bl	80084c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80084b2:	e000      	b.n	80084b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80084b4:	bf00      	nop
    return;
 80084b6:	bf00      	nop
  }
}
 80084b8:	3720      	adds	r7, #32
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	080084d9 	.word	0x080084d9

080084c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7ff ffe5 	bl	80084c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	330c      	adds	r3, #12
 8008514:	7812      	ldrb	r2, [r2, #0]
 8008516:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b01      	subs	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d102      	bne.n	8008540 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f98a 	bl	8008854 <SPI_CloseTx_ISR>
  }
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008554:	881a      	ldrh	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	1c9a      	adds	r2, r3, #2
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f968 	bl	8008854 <SPI_CloseTx_ISR>
  }
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	4613      	mov	r3, r2
 800859a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800859c:	f7fd fef8 	bl	8006390 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4413      	add	r3, r2
 80085aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085ac:	f7fd fef0 	bl	8006390 <HAL_GetTick>
 80085b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085b2:	4b39      	ldr	r3, [pc, #228]	; (8008698 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	015b      	lsls	r3, r3, #5
 80085b8:	0d1b      	lsrs	r3, r3, #20
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	fb02 f303 	mul.w	r3, r2, r3
 80085c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085c2:	e054      	b.n	800866e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	d050      	beq.n	800866e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085cc:	f7fd fee0 	bl	8006390 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d902      	bls.n	80085e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d13d      	bne.n	800865e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085fa:	d111      	bne.n	8008620 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008604:	d004      	beq.n	8008610 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800860e:	d107      	bne.n	8008620 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800861e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008628:	d10f      	bne.n	800864a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e017      	b.n	800868e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	3b01      	subs	r3, #1
 800866c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4013      	ands	r3, r2
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	429a      	cmp	r2, r3
 800867c:	bf0c      	ite	eq
 800867e:	2301      	moveq	r3, #1
 8008680:	2300      	movne	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	429a      	cmp	r2, r3
 800868a:	d19b      	bne.n	80085c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3720      	adds	r7, #32
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20002010 	.word	0x20002010

0800869c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08a      	sub	sp, #40	; 0x28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80086ae:	f7fd fe6f 	bl	8006390 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	1a9b      	subs	r3, r3, r2
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	4413      	add	r3, r2
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80086be:	f7fd fe67 	bl	8006390 <HAL_GetTick>
 80086c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	330c      	adds	r3, #12
 80086ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80086cc:	4b3d      	ldr	r3, [pc, #244]	; (80087c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	00da      	lsls	r2, r3, #3
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	0d1b      	lsrs	r3, r3, #20
 80086dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086de:	fb02 f303 	mul.w	r3, r2, r3
 80086e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80086e4:	e060      	b.n	80087a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80086ec:	d107      	bne.n	80086fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008704:	d050      	beq.n	80087a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008706:	f7fd fe43 	bl	8006390 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008712:	429a      	cmp	r2, r3
 8008714:	d902      	bls.n	800871c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	d13d      	bne.n	8008798 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800872a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008734:	d111      	bne.n	800875a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800873e:	d004      	beq.n	800874a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008748:	d107      	bne.n	800875a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008758:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008762:	d10f      	bne.n	8008784 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008782:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e010      	b.n	80087ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	4013      	ands	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d196      	bne.n	80086e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3728      	adds	r7, #40	; 0x28
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20002010 	.word	0x20002010

080087c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f7ff ff5b 	bl	800869c <SPI_WaitFifoStateUntilTimeout>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f0:	f043 0220 	orr.w	r2, r3, #32
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e027      	b.n	800884c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2200      	movs	r2, #0
 8008804:	2180      	movs	r1, #128	; 0x80
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff fec0 	bl	800858c <SPI_WaitFlagStateUntilTimeout>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008816:	f043 0220 	orr.w	r2, r3, #32
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e014      	b.n	800884c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2200      	movs	r2, #0
 800882a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7ff ff34 	bl	800869c <SPI_WaitFifoStateUntilTimeout>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d007      	beq.n	800884a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883e:	f043 0220 	orr.w	r2, r3, #32
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e000      	b.n	800884c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800885c:	f7fd fd98 	bl	8006390 <HAL_GetTick>
 8008860:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008870:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	2164      	movs	r1, #100	; 0x64
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff ffa6 	bl	80087c8 <SPI_EndRxTxTransaction>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008886:	f043 0220 	orr.w	r2, r3, #32
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10a      	bne.n	80088ac <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008896:	2300      	movs	r3, #0
 8008898:	60bb      	str	r3, [r7, #8]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	60bb      	str	r3, [r7, #8]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	60bb      	str	r3, [r7, #8]
 80088aa:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff fe01 	bl	80084c4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80088c2:	e002      	b.n	80088ca <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7fc ffb9 	bl	800583c <HAL_SPI_TxCpltCallback>
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e049      	b.n	8008978 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d106      	bne.n	80088fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f841 	bl	8008980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2202      	movs	r2, #2
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3304      	adds	r3, #4
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f000 f9f7 	bl	8008d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d001      	beq.n	80089ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e04f      	b.n	8008a4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a23      	ldr	r2, [pc, #140]	; (8008a58 <HAL_TIM_Base_Start_IT+0xc4>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d01d      	beq.n	8008a0a <HAL_TIM_Base_Start_IT+0x76>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d6:	d018      	beq.n	8008a0a <HAL_TIM_Base_Start_IT+0x76>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a1f      	ldr	r2, [pc, #124]	; (8008a5c <HAL_TIM_Base_Start_IT+0xc8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d013      	beq.n	8008a0a <HAL_TIM_Base_Start_IT+0x76>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a1e      	ldr	r2, [pc, #120]	; (8008a60 <HAL_TIM_Base_Start_IT+0xcc>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00e      	beq.n	8008a0a <HAL_TIM_Base_Start_IT+0x76>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1c      	ldr	r2, [pc, #112]	; (8008a64 <HAL_TIM_Base_Start_IT+0xd0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d009      	beq.n	8008a0a <HAL_TIM_Base_Start_IT+0x76>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a1b      	ldr	r2, [pc, #108]	; (8008a68 <HAL_TIM_Base_Start_IT+0xd4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d004      	beq.n	8008a0a <HAL_TIM_Base_Start_IT+0x76>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a19      	ldr	r2, [pc, #100]	; (8008a6c <HAL_TIM_Base_Start_IT+0xd8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d115      	bne.n	8008a36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b06      	cmp	r3, #6
 8008a1a:	d015      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xb4>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a22:	d011      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0201 	orr.w	r2, r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a34:	e008      	b.n	8008a48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0201 	orr.w	r2, r2, #1
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	e000      	b.n	8008a4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	40012c00 	.word	0x40012c00
 8008a5c:	40000400 	.word	0x40000400
 8008a60:	40000800 	.word	0x40000800
 8008a64:	40000c00 	.word	0x40000c00
 8008a68:	40013400 	.word	0x40013400
 8008a6c:	40014000 	.word	0x40014000
 8008a70:	00010007 	.word	0x00010007

08008a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d122      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d11b      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f06f 0202 	mvn.w	r2, #2
 8008aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f905 	bl	8008cc6 <HAL_TIM_IC_CaptureCallback>
 8008abc:	e005      	b.n	8008aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f8f7 	bl	8008cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f908 	bl	8008cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0304 	and.w	r3, r3, #4
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	d122      	bne.n	8008b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d11b      	bne.n	8008b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0204 	mvn.w	r2, #4
 8008af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2202      	movs	r2, #2
 8008afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f8db 	bl	8008cc6 <HAL_TIM_IC_CaptureCallback>
 8008b10:	e005      	b.n	8008b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f8cd 	bl	8008cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8de 	bl	8008cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f003 0308 	and.w	r3, r3, #8
 8008b2e:	2b08      	cmp	r3, #8
 8008b30:	d122      	bne.n	8008b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	d11b      	bne.n	8008b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f06f 0208 	mvn.w	r2, #8
 8008b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	f003 0303 	and.w	r3, r3, #3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f8b1 	bl	8008cc6 <HAL_TIM_IC_CaptureCallback>
 8008b64:	e005      	b.n	8008b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f8a3 	bl	8008cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f8b4 	bl	8008cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f003 0310 	and.w	r3, r3, #16
 8008b82:	2b10      	cmp	r3, #16
 8008b84:	d122      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b10      	cmp	r3, #16
 8008b92:	d11b      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f06f 0210 	mvn.w	r2, #16
 8008b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f887 	bl	8008cc6 <HAL_TIM_IC_CaptureCallback>
 8008bb8:	e005      	b.n	8008bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f879 	bl	8008cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f88a 	bl	8008cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d10e      	bne.n	8008bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d107      	bne.n	8008bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0201 	mvn.w	r2, #1
 8008bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7fd f9da 	bl	8005fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	d10e      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c10:	2b80      	cmp	r3, #128	; 0x80
 8008c12:	d107      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f914 	bl	8008e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c32:	d10e      	bne.n	8008c52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3e:	2b80      	cmp	r3, #128	; 0x80
 8008c40:	d107      	bne.n	8008c52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f907 	bl	8008e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5c:	2b40      	cmp	r3, #64	; 0x40
 8008c5e:	d10e      	bne.n	8008c7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6a:	2b40      	cmp	r3, #64	; 0x40
 8008c6c:	d107      	bne.n	8008c7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f838 	bl	8008cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	f003 0320 	and.w	r3, r3, #32
 8008c88:	2b20      	cmp	r3, #32
 8008c8a:	d10e      	bne.n	8008caa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	d107      	bne.n	8008caa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f06f 0220 	mvn.w	r2, #32
 8008ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f8c7 	bl	8008e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cba:	bf00      	nop
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cce:	bf00      	nop
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ce2:	bf00      	nop
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b083      	sub	sp, #12
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
	...

08008d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a40      	ldr	r2, [pc, #256]	; (8008e18 <TIM_Base_SetConfig+0x114>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d013      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d22:	d00f      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a3d      	ldr	r2, [pc, #244]	; (8008e1c <TIM_Base_SetConfig+0x118>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00b      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a3c      	ldr	r2, [pc, #240]	; (8008e20 <TIM_Base_SetConfig+0x11c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d007      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a3b      	ldr	r2, [pc, #236]	; (8008e24 <TIM_Base_SetConfig+0x120>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d003      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a3a      	ldr	r2, [pc, #232]	; (8008e28 <TIM_Base_SetConfig+0x124>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d108      	bne.n	8008d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a2f      	ldr	r2, [pc, #188]	; (8008e18 <TIM_Base_SetConfig+0x114>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d01f      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d64:	d01b      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a2c      	ldr	r2, [pc, #176]	; (8008e1c <TIM_Base_SetConfig+0x118>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d017      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a2b      	ldr	r2, [pc, #172]	; (8008e20 <TIM_Base_SetConfig+0x11c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d013      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a2a      	ldr	r2, [pc, #168]	; (8008e24 <TIM_Base_SetConfig+0x120>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00f      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a29      	ldr	r2, [pc, #164]	; (8008e28 <TIM_Base_SetConfig+0x124>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d00b      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a28      	ldr	r2, [pc, #160]	; (8008e2c <TIM_Base_SetConfig+0x128>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d007      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a27      	ldr	r2, [pc, #156]	; (8008e30 <TIM_Base_SetConfig+0x12c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d003      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a26      	ldr	r2, [pc, #152]	; (8008e34 <TIM_Base_SetConfig+0x130>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d108      	bne.n	8008db0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a10      	ldr	r2, [pc, #64]	; (8008e18 <TIM_Base_SetConfig+0x114>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d00f      	beq.n	8008dfc <TIM_Base_SetConfig+0xf8>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a12      	ldr	r2, [pc, #72]	; (8008e28 <TIM_Base_SetConfig+0x124>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00b      	beq.n	8008dfc <TIM_Base_SetConfig+0xf8>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <TIM_Base_SetConfig+0x128>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d007      	beq.n	8008dfc <TIM_Base_SetConfig+0xf8>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a10      	ldr	r2, [pc, #64]	; (8008e30 <TIM_Base_SetConfig+0x12c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_Base_SetConfig+0xf8>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a0f      	ldr	r2, [pc, #60]	; (8008e34 <TIM_Base_SetConfig+0x130>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d103      	bne.n	8008e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	615a      	str	r2, [r3, #20]
}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	40012c00 	.word	0x40012c00
 8008e1c:	40000400 	.word	0x40000400
 8008e20:	40000800 	.word	0x40000800
 8008e24:	40000c00 	.word	0x40000c00
 8008e28:	40013400 	.word	0x40013400
 8008e2c:	40014000 	.word	0x40014000
 8008e30:	40014400 	.word	0x40014400
 8008e34:	40014800 	.word	0x40014800

08008e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e040      	b.n	8008f08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d106      	bne.n	8008e9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7fd f92e 	bl	80060f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2224      	movs	r2, #36	; 0x24
 8008ea0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0201 	bic.w	r2, r2, #1
 8008eb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f82c 	bl	8008f10 <UART_SetConfig>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e022      	b.n	8008f08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fad8 	bl	8009480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0201 	orr.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fb5f 	bl	80095c4 <UART_CheckIdleState>
 8008f06:	4603      	mov	r3, r0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f14:	b08a      	sub	sp, #40	; 0x28
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4ba4      	ldr	r3, [pc, #656]	; (80091d0 <UART_SetConfig+0x2c0>)
 8008f40:	4013      	ands	r3, r2
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	6812      	ldr	r2, [r2, #0]
 8008f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	68da      	ldr	r2, [r3, #12]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a99      	ldr	r2, [pc, #612]	; (80091d4 <UART_SetConfig+0x2c4>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d004      	beq.n	8008f7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a90      	ldr	r2, [pc, #576]	; (80091d8 <UART_SetConfig+0x2c8>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d126      	bne.n	8008fe8 <UART_SetConfig+0xd8>
 8008f9a:	4b90      	ldr	r3, [pc, #576]	; (80091dc <UART_SetConfig+0x2cc>)
 8008f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d81b      	bhi.n	8008fe0 <UART_SetConfig+0xd0>
 8008fa8:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <UART_SetConfig+0xa0>)
 8008faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fae:	bf00      	nop
 8008fb0:	08008fc1 	.word	0x08008fc1
 8008fb4:	08008fd1 	.word	0x08008fd1
 8008fb8:	08008fc9 	.word	0x08008fc9
 8008fbc:	08008fd9 	.word	0x08008fd9
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fc6:	e116      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fce:	e112      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fd6:	e10e      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8008fd8:	2308      	movs	r3, #8
 8008fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fde:	e10a      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8008fe0:	2310      	movs	r3, #16
 8008fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fe6:	e106      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a7c      	ldr	r2, [pc, #496]	; (80091e0 <UART_SetConfig+0x2d0>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d138      	bne.n	8009064 <UART_SetConfig+0x154>
 8008ff2:	4b7a      	ldr	r3, [pc, #488]	; (80091dc <UART_SetConfig+0x2cc>)
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff8:	f003 030c 	and.w	r3, r3, #12
 8008ffc:	2b0c      	cmp	r3, #12
 8008ffe:	d82d      	bhi.n	800905c <UART_SetConfig+0x14c>
 8009000:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <UART_SetConfig+0xf8>)
 8009002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009006:	bf00      	nop
 8009008:	0800903d 	.word	0x0800903d
 800900c:	0800905d 	.word	0x0800905d
 8009010:	0800905d 	.word	0x0800905d
 8009014:	0800905d 	.word	0x0800905d
 8009018:	0800904d 	.word	0x0800904d
 800901c:	0800905d 	.word	0x0800905d
 8009020:	0800905d 	.word	0x0800905d
 8009024:	0800905d 	.word	0x0800905d
 8009028:	08009045 	.word	0x08009045
 800902c:	0800905d 	.word	0x0800905d
 8009030:	0800905d 	.word	0x0800905d
 8009034:	0800905d 	.word	0x0800905d
 8009038:	08009055 	.word	0x08009055
 800903c:	2300      	movs	r3, #0
 800903e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009042:	e0d8      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009044:	2302      	movs	r3, #2
 8009046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800904a:	e0d4      	b.n	80091f6 <UART_SetConfig+0x2e6>
 800904c:	2304      	movs	r3, #4
 800904e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009052:	e0d0      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009054:	2308      	movs	r3, #8
 8009056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800905a:	e0cc      	b.n	80091f6 <UART_SetConfig+0x2e6>
 800905c:	2310      	movs	r3, #16
 800905e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009062:	e0c8      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a5e      	ldr	r2, [pc, #376]	; (80091e4 <UART_SetConfig+0x2d4>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d125      	bne.n	80090ba <UART_SetConfig+0x1aa>
 800906e:	4b5b      	ldr	r3, [pc, #364]	; (80091dc <UART_SetConfig+0x2cc>)
 8009070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009074:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009078:	2b30      	cmp	r3, #48	; 0x30
 800907a:	d016      	beq.n	80090aa <UART_SetConfig+0x19a>
 800907c:	2b30      	cmp	r3, #48	; 0x30
 800907e:	d818      	bhi.n	80090b2 <UART_SetConfig+0x1a2>
 8009080:	2b20      	cmp	r3, #32
 8009082:	d00a      	beq.n	800909a <UART_SetConfig+0x18a>
 8009084:	2b20      	cmp	r3, #32
 8009086:	d814      	bhi.n	80090b2 <UART_SetConfig+0x1a2>
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <UART_SetConfig+0x182>
 800908c:	2b10      	cmp	r3, #16
 800908e:	d008      	beq.n	80090a2 <UART_SetConfig+0x192>
 8009090:	e00f      	b.n	80090b2 <UART_SetConfig+0x1a2>
 8009092:	2300      	movs	r3, #0
 8009094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009098:	e0ad      	b.n	80091f6 <UART_SetConfig+0x2e6>
 800909a:	2302      	movs	r3, #2
 800909c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090a0:	e0a9      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80090a2:	2304      	movs	r3, #4
 80090a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090a8:	e0a5      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80090aa:	2308      	movs	r3, #8
 80090ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090b0:	e0a1      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80090b2:	2310      	movs	r3, #16
 80090b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090b8:	e09d      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a4a      	ldr	r2, [pc, #296]	; (80091e8 <UART_SetConfig+0x2d8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d125      	bne.n	8009110 <UART_SetConfig+0x200>
 80090c4:	4b45      	ldr	r3, [pc, #276]	; (80091dc <UART_SetConfig+0x2cc>)
 80090c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80090ce:	2bc0      	cmp	r3, #192	; 0xc0
 80090d0:	d016      	beq.n	8009100 <UART_SetConfig+0x1f0>
 80090d2:	2bc0      	cmp	r3, #192	; 0xc0
 80090d4:	d818      	bhi.n	8009108 <UART_SetConfig+0x1f8>
 80090d6:	2b80      	cmp	r3, #128	; 0x80
 80090d8:	d00a      	beq.n	80090f0 <UART_SetConfig+0x1e0>
 80090da:	2b80      	cmp	r3, #128	; 0x80
 80090dc:	d814      	bhi.n	8009108 <UART_SetConfig+0x1f8>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <UART_SetConfig+0x1d8>
 80090e2:	2b40      	cmp	r3, #64	; 0x40
 80090e4:	d008      	beq.n	80090f8 <UART_SetConfig+0x1e8>
 80090e6:	e00f      	b.n	8009108 <UART_SetConfig+0x1f8>
 80090e8:	2300      	movs	r3, #0
 80090ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ee:	e082      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80090f0:	2302      	movs	r3, #2
 80090f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090f6:	e07e      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80090f8:	2304      	movs	r3, #4
 80090fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090fe:	e07a      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009100:	2308      	movs	r3, #8
 8009102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009106:	e076      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009108:	2310      	movs	r3, #16
 800910a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800910e:	e072      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a35      	ldr	r2, [pc, #212]	; (80091ec <UART_SetConfig+0x2dc>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d12a      	bne.n	8009170 <UART_SetConfig+0x260>
 800911a:	4b30      	ldr	r3, [pc, #192]	; (80091dc <UART_SetConfig+0x2cc>)
 800911c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009128:	d01a      	beq.n	8009160 <UART_SetConfig+0x250>
 800912a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800912e:	d81b      	bhi.n	8009168 <UART_SetConfig+0x258>
 8009130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009134:	d00c      	beq.n	8009150 <UART_SetConfig+0x240>
 8009136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800913a:	d815      	bhi.n	8009168 <UART_SetConfig+0x258>
 800913c:	2b00      	cmp	r3, #0
 800913e:	d003      	beq.n	8009148 <UART_SetConfig+0x238>
 8009140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009144:	d008      	beq.n	8009158 <UART_SetConfig+0x248>
 8009146:	e00f      	b.n	8009168 <UART_SetConfig+0x258>
 8009148:	2300      	movs	r3, #0
 800914a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800914e:	e052      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009150:	2302      	movs	r3, #2
 8009152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009156:	e04e      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009158:	2304      	movs	r3, #4
 800915a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800915e:	e04a      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009160:	2308      	movs	r3, #8
 8009162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009166:	e046      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009168:	2310      	movs	r3, #16
 800916a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800916e:	e042      	b.n	80091f6 <UART_SetConfig+0x2e6>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a17      	ldr	r2, [pc, #92]	; (80091d4 <UART_SetConfig+0x2c4>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d13a      	bne.n	80091f0 <UART_SetConfig+0x2e0>
 800917a:	4b18      	ldr	r3, [pc, #96]	; (80091dc <UART_SetConfig+0x2cc>)
 800917c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009180:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009188:	d01a      	beq.n	80091c0 <UART_SetConfig+0x2b0>
 800918a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800918e:	d81b      	bhi.n	80091c8 <UART_SetConfig+0x2b8>
 8009190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009194:	d00c      	beq.n	80091b0 <UART_SetConfig+0x2a0>
 8009196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800919a:	d815      	bhi.n	80091c8 <UART_SetConfig+0x2b8>
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <UART_SetConfig+0x298>
 80091a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091a4:	d008      	beq.n	80091b8 <UART_SetConfig+0x2a8>
 80091a6:	e00f      	b.n	80091c8 <UART_SetConfig+0x2b8>
 80091a8:	2300      	movs	r3, #0
 80091aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091ae:	e022      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80091b0:	2302      	movs	r3, #2
 80091b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091b6:	e01e      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80091b8:	2304      	movs	r3, #4
 80091ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091be:	e01a      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80091c0:	2308      	movs	r3, #8
 80091c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091c6:	e016      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80091c8:	2310      	movs	r3, #16
 80091ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091ce:	e012      	b.n	80091f6 <UART_SetConfig+0x2e6>
 80091d0:	efff69f3 	.word	0xefff69f3
 80091d4:	40008000 	.word	0x40008000
 80091d8:	40013800 	.word	0x40013800
 80091dc:	40021000 	.word	0x40021000
 80091e0:	40004400 	.word	0x40004400
 80091e4:	40004800 	.word	0x40004800
 80091e8:	40004c00 	.word	0x40004c00
 80091ec:	40005000 	.word	0x40005000
 80091f0:	2310      	movs	r3, #16
 80091f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a9f      	ldr	r2, [pc, #636]	; (8009478 <UART_SetConfig+0x568>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d17a      	bne.n	80092f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009204:	2b08      	cmp	r3, #8
 8009206:	d824      	bhi.n	8009252 <UART_SetConfig+0x342>
 8009208:	a201      	add	r2, pc, #4	; (adr r2, 8009210 <UART_SetConfig+0x300>)
 800920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920e:	bf00      	nop
 8009210:	08009235 	.word	0x08009235
 8009214:	08009253 	.word	0x08009253
 8009218:	0800923d 	.word	0x0800923d
 800921c:	08009253 	.word	0x08009253
 8009220:	08009243 	.word	0x08009243
 8009224:	08009253 	.word	0x08009253
 8009228:	08009253 	.word	0x08009253
 800922c:	08009253 	.word	0x08009253
 8009230:	0800924b 	.word	0x0800924b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009234:	f7fe f99a 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 8009238:	61f8      	str	r0, [r7, #28]
        break;
 800923a:	e010      	b.n	800925e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800923c:	4b8f      	ldr	r3, [pc, #572]	; (800947c <UART_SetConfig+0x56c>)
 800923e:	61fb      	str	r3, [r7, #28]
        break;
 8009240:	e00d      	b.n	800925e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009242:	f7fe f8fb 	bl	800743c <HAL_RCC_GetSysClockFreq>
 8009246:	61f8      	str	r0, [r7, #28]
        break;
 8009248:	e009      	b.n	800925e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800924a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800924e:	61fb      	str	r3, [r7, #28]
        break;
 8009250:	e005      	b.n	800925e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800925c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 80fb 	beq.w	800945c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	4613      	mov	r3, r2
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	4413      	add	r3, r2
 8009270:	69fa      	ldr	r2, [r7, #28]
 8009272:	429a      	cmp	r2, r3
 8009274:	d305      	bcc.n	8009282 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800927c:	69fa      	ldr	r2, [r7, #28]
 800927e:	429a      	cmp	r2, r3
 8009280:	d903      	bls.n	800928a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009288:	e0e8      	b.n	800945c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	2200      	movs	r2, #0
 800928e:	461c      	mov	r4, r3
 8009290:	4615      	mov	r5, r2
 8009292:	f04f 0200 	mov.w	r2, #0
 8009296:	f04f 0300 	mov.w	r3, #0
 800929a:	022b      	lsls	r3, r5, #8
 800929c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80092a0:	0222      	lsls	r2, r4, #8
 80092a2:	68f9      	ldr	r1, [r7, #12]
 80092a4:	6849      	ldr	r1, [r1, #4]
 80092a6:	0849      	lsrs	r1, r1, #1
 80092a8:	2000      	movs	r0, #0
 80092aa:	4688      	mov	r8, r1
 80092ac:	4681      	mov	r9, r0
 80092ae:	eb12 0a08 	adds.w	sl, r2, r8
 80092b2:	eb43 0b09 	adc.w	fp, r3, r9
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	603b      	str	r3, [r7, #0]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c4:	4650      	mov	r0, sl
 80092c6:	4659      	mov	r1, fp
 80092c8:	f7f7 fb60 	bl	800098c <__aeabi_uldivmod>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4613      	mov	r3, r2
 80092d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092da:	d308      	bcc.n	80092ee <UART_SetConfig+0x3de>
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e2:	d204      	bcs.n	80092ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	60da      	str	r2, [r3, #12]
 80092ec:	e0b6      	b.n	800945c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80092f4:	e0b2      	b.n	800945c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092fe:	d15e      	bne.n	80093be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009304:	2b08      	cmp	r3, #8
 8009306:	d828      	bhi.n	800935a <UART_SetConfig+0x44a>
 8009308:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <UART_SetConfig+0x400>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	08009335 	.word	0x08009335
 8009314:	0800933d 	.word	0x0800933d
 8009318:	08009345 	.word	0x08009345
 800931c:	0800935b 	.word	0x0800935b
 8009320:	0800934b 	.word	0x0800934b
 8009324:	0800935b 	.word	0x0800935b
 8009328:	0800935b 	.word	0x0800935b
 800932c:	0800935b 	.word	0x0800935b
 8009330:	08009353 	.word	0x08009353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009334:	f7fe f91a 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 8009338:	61f8      	str	r0, [r7, #28]
        break;
 800933a:	e014      	b.n	8009366 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800933c:	f7fe f92c 	bl	8007598 <HAL_RCC_GetPCLK2Freq>
 8009340:	61f8      	str	r0, [r7, #28]
        break;
 8009342:	e010      	b.n	8009366 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009344:	4b4d      	ldr	r3, [pc, #308]	; (800947c <UART_SetConfig+0x56c>)
 8009346:	61fb      	str	r3, [r7, #28]
        break;
 8009348:	e00d      	b.n	8009366 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800934a:	f7fe f877 	bl	800743c <HAL_RCC_GetSysClockFreq>
 800934e:	61f8      	str	r0, [r7, #28]
        break;
 8009350:	e009      	b.n	8009366 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009356:	61fb      	str	r3, [r7, #28]
        break;
 8009358:	e005      	b.n	8009366 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009364:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d077      	beq.n	800945c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	005a      	lsls	r2, r3, #1
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	085b      	lsrs	r3, r3, #1
 8009376:	441a      	add	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009380:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b0f      	cmp	r3, #15
 8009386:	d916      	bls.n	80093b6 <UART_SetConfig+0x4a6>
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800938e:	d212      	bcs.n	80093b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	b29b      	uxth	r3, r3
 8009394:	f023 030f 	bic.w	r3, r3, #15
 8009398:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	085b      	lsrs	r3, r3, #1
 800939e:	b29b      	uxth	r3, r3
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	8afb      	ldrh	r3, [r7, #22]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	8afa      	ldrh	r2, [r7, #22]
 80093b2:	60da      	str	r2, [r3, #12]
 80093b4:	e052      	b.n	800945c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80093bc:	e04e      	b.n	800945c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80093be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	d827      	bhi.n	8009416 <UART_SetConfig+0x506>
 80093c6:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <UART_SetConfig+0x4bc>)
 80093c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093cc:	080093f1 	.word	0x080093f1
 80093d0:	080093f9 	.word	0x080093f9
 80093d4:	08009401 	.word	0x08009401
 80093d8:	08009417 	.word	0x08009417
 80093dc:	08009407 	.word	0x08009407
 80093e0:	08009417 	.word	0x08009417
 80093e4:	08009417 	.word	0x08009417
 80093e8:	08009417 	.word	0x08009417
 80093ec:	0800940f 	.word	0x0800940f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093f0:	f7fe f8bc 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 80093f4:	61f8      	str	r0, [r7, #28]
        break;
 80093f6:	e014      	b.n	8009422 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093f8:	f7fe f8ce 	bl	8007598 <HAL_RCC_GetPCLK2Freq>
 80093fc:	61f8      	str	r0, [r7, #28]
        break;
 80093fe:	e010      	b.n	8009422 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009400:	4b1e      	ldr	r3, [pc, #120]	; (800947c <UART_SetConfig+0x56c>)
 8009402:	61fb      	str	r3, [r7, #28]
        break;
 8009404:	e00d      	b.n	8009422 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009406:	f7fe f819 	bl	800743c <HAL_RCC_GetSysClockFreq>
 800940a:	61f8      	str	r0, [r7, #28]
        break;
 800940c:	e009      	b.n	8009422 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800940e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009412:	61fb      	str	r3, [r7, #28]
        break;
 8009414:	e005      	b.n	8009422 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009416:	2300      	movs	r3, #0
 8009418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009420:	bf00      	nop
    }

    if (pclk != 0U)
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d019      	beq.n	800945c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	085a      	lsrs	r2, r3, #1
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	441a      	add	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	fbb2 f3f3 	udiv	r3, r2, r3
 800943a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2b0f      	cmp	r3, #15
 8009440:	d909      	bls.n	8009456 <UART_SetConfig+0x546>
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009448:	d205      	bcs.n	8009456 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60da      	str	r2, [r3, #12]
 8009454:	e002      	b.n	800945c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009468:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800946c:	4618      	mov	r0, r3
 800946e:	3728      	adds	r7, #40	; 0x28
 8009470:	46bd      	mov	sp, r7
 8009472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009476:	bf00      	nop
 8009478:	40008000 	.word	0x40008000
 800947c:	00f42400 	.word	0x00f42400

08009480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00a      	beq.n	80094aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	f003 0310 	and.w	r3, r3, #16
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01a      	beq.n	8009596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	430a      	orrs	r2, r1
 8009574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800957e:	d10a      	bne.n	8009596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	605a      	str	r2, [r3, #4]
  }
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095d4:	f7fc fedc 	bl	8006390 <HAL_GetTick>
 80095d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0308 	and.w	r3, r3, #8
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d10e      	bne.n	8009606 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f82d 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e023      	b.n	800964e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0304 	and.w	r3, r3, #4
 8009610:	2b04      	cmp	r3, #4
 8009612:	d10e      	bne.n	8009632 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f817 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e00d      	b.n	800964e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2220      	movs	r2, #32
 800963c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b09c      	sub	sp, #112	; 0x70
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009666:	e0a5      	b.n	80097b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966e:	f000 80a1 	beq.w	80097b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009672:	f7fc fe8d 	bl	8006390 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800967e:	429a      	cmp	r2, r3
 8009680:	d302      	bcc.n	8009688 <UART_WaitOnFlagUntilTimeout+0x32>
 8009682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009684:	2b00      	cmp	r3, #0
 8009686:	d13e      	bne.n	8009706 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800969c:	667b      	str	r3, [r7, #100]	; 0x64
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80096b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e6      	bne.n	8009688 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3308      	adds	r3, #8
 80096c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096cc:	f023 0301 	bic.w	r3, r3, #1
 80096d0:	663b      	str	r3, [r7, #96]	; 0x60
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3308      	adds	r3, #8
 80096d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096da:	64ba      	str	r2, [r7, #72]	; 0x48
 80096dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80096e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e5      	bne.n	80096ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2220      	movs	r2, #32
 80096f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e067      	b.n	80097d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d04f      	beq.n	80097b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800971e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009722:	d147      	bne.n	80097b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800972c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009742:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800974c:	637b      	str	r3, [r7, #52]	; 0x34
 800974e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e6      	bne.n	800972e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3308      	adds	r3, #8
 8009766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	613b      	str	r3, [r7, #16]
   return(result);
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f023 0301 	bic.w	r3, r3, #1
 8009776:	66bb      	str	r3, [r7, #104]	; 0x68
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3308      	adds	r3, #8
 800977e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009780:	623a      	str	r2, [r7, #32]
 8009782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	69f9      	ldr	r1, [r7, #28]
 8009786:	6a3a      	ldr	r2, [r7, #32]
 8009788:	e841 2300 	strex	r3, r2, [r1]
 800978c:	61bb      	str	r3, [r7, #24]
   return(result);
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e5      	bne.n	8009760 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2220      	movs	r2, #32
 8009798:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2220      	movs	r2, #32
 800979e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2220      	movs	r2, #32
 80097a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e010      	b.n	80097d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	69da      	ldr	r2, [r3, #28]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4013      	ands	r3, r2
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	bf0c      	ite	eq
 80097c4:	2301      	moveq	r3, #1
 80097c6:	2300      	movne	r3, #0
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	461a      	mov	r2, r3
 80097cc:	79fb      	ldrb	r3, [r7, #7]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	f43f af4a 	beq.w	8009668 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3770      	adds	r7, #112	; 0x70
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <__libc_init_array>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4d0d      	ldr	r5, [pc, #52]	; (8009818 <__libc_init_array+0x38>)
 80097e4:	4c0d      	ldr	r4, [pc, #52]	; (800981c <__libc_init_array+0x3c>)
 80097e6:	1b64      	subs	r4, r4, r5
 80097e8:	10a4      	asrs	r4, r4, #2
 80097ea:	2600      	movs	r6, #0
 80097ec:	42a6      	cmp	r6, r4
 80097ee:	d109      	bne.n	8009804 <__libc_init_array+0x24>
 80097f0:	4d0b      	ldr	r5, [pc, #44]	; (8009820 <__libc_init_array+0x40>)
 80097f2:	4c0c      	ldr	r4, [pc, #48]	; (8009824 <__libc_init_array+0x44>)
 80097f4:	f000 f8b0 	bl	8009958 <_init>
 80097f8:	1b64      	subs	r4, r4, r5
 80097fa:	10a4      	asrs	r4, r4, #2
 80097fc:	2600      	movs	r6, #0
 80097fe:	42a6      	cmp	r6, r4
 8009800:	d105      	bne.n	800980e <__libc_init_array+0x2e>
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	f855 3b04 	ldr.w	r3, [r5], #4
 8009808:	4798      	blx	r3
 800980a:	3601      	adds	r6, #1
 800980c:	e7ee      	b.n	80097ec <__libc_init_array+0xc>
 800980e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009812:	4798      	blx	r3
 8009814:	3601      	adds	r6, #1
 8009816:	e7f2      	b.n	80097fe <__libc_init_array+0x1e>
 8009818:	0801cb24 	.word	0x0801cb24
 800981c:	0801cb24 	.word	0x0801cb24
 8009820:	0801cb24 	.word	0x0801cb24
 8009824:	0801cb28 	.word	0x0801cb28

08009828 <memcpy>:
 8009828:	440a      	add	r2, r1
 800982a:	4291      	cmp	r1, r2
 800982c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009830:	d100      	bne.n	8009834 <memcpy+0xc>
 8009832:	4770      	bx	lr
 8009834:	b510      	push	{r4, lr}
 8009836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800983a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800983e:	4291      	cmp	r1, r2
 8009840:	d1f9      	bne.n	8009836 <memcpy+0xe>
 8009842:	bd10      	pop	{r4, pc}

08009844 <memset>:
 8009844:	4402      	add	r2, r0
 8009846:	4603      	mov	r3, r0
 8009848:	4293      	cmp	r3, r2
 800984a:	d100      	bne.n	800984e <memset+0xa>
 800984c:	4770      	bx	lr
 800984e:	f803 1b01 	strb.w	r1, [r3], #1
 8009852:	e7f9      	b.n	8009848 <memset+0x4>
 8009854:	0000      	movs	r0, r0
	...

08009858 <floor>:
 8009858:	ec51 0b10 	vmov	r0, r1, d0
 800985c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009860:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009864:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009868:	2e13      	cmp	r6, #19
 800986a:	ee10 5a10 	vmov	r5, s0
 800986e:	ee10 8a10 	vmov	r8, s0
 8009872:	460c      	mov	r4, r1
 8009874:	dc32      	bgt.n	80098dc <floor+0x84>
 8009876:	2e00      	cmp	r6, #0
 8009878:	da14      	bge.n	80098a4 <floor+0x4c>
 800987a:	a333      	add	r3, pc, #204	; (adr r3, 8009948 <floor+0xf0>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 fdd6 	bl	8000430 <__adddf3>
 8009884:	2200      	movs	r2, #0
 8009886:	2300      	movs	r3, #0
 8009888:	f7f7 f806 	bl	8000898 <__aeabi_dcmpgt>
 800988c:	b138      	cbz	r0, 800989e <floor+0x46>
 800988e:	2c00      	cmp	r4, #0
 8009890:	da57      	bge.n	8009942 <floor+0xea>
 8009892:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009896:	431d      	orrs	r5, r3
 8009898:	d001      	beq.n	800989e <floor+0x46>
 800989a:	4c2d      	ldr	r4, [pc, #180]	; (8009950 <floor+0xf8>)
 800989c:	2500      	movs	r5, #0
 800989e:	4621      	mov	r1, r4
 80098a0:	4628      	mov	r0, r5
 80098a2:	e025      	b.n	80098f0 <floor+0x98>
 80098a4:	4f2b      	ldr	r7, [pc, #172]	; (8009954 <floor+0xfc>)
 80098a6:	4137      	asrs	r7, r6
 80098a8:	ea01 0307 	and.w	r3, r1, r7
 80098ac:	4303      	orrs	r3, r0
 80098ae:	d01f      	beq.n	80098f0 <floor+0x98>
 80098b0:	a325      	add	r3, pc, #148	; (adr r3, 8009948 <floor+0xf0>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f7f6 fdbb 	bl	8000430 <__adddf3>
 80098ba:	2200      	movs	r2, #0
 80098bc:	2300      	movs	r3, #0
 80098be:	f7f6 ffeb 	bl	8000898 <__aeabi_dcmpgt>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d0eb      	beq.n	800989e <floor+0x46>
 80098c6:	2c00      	cmp	r4, #0
 80098c8:	bfbe      	ittt	lt
 80098ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80098ce:	fa43 f606 	asrlt.w	r6, r3, r6
 80098d2:	19a4      	addlt	r4, r4, r6
 80098d4:	ea24 0407 	bic.w	r4, r4, r7
 80098d8:	2500      	movs	r5, #0
 80098da:	e7e0      	b.n	800989e <floor+0x46>
 80098dc:	2e33      	cmp	r6, #51	; 0x33
 80098de:	dd0b      	ble.n	80098f8 <floor+0xa0>
 80098e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80098e4:	d104      	bne.n	80098f0 <floor+0x98>
 80098e6:	ee10 2a10 	vmov	r2, s0
 80098ea:	460b      	mov	r3, r1
 80098ec:	f7f6 fda0 	bl	8000430 <__adddf3>
 80098f0:	ec41 0b10 	vmov	d0, r0, r1
 80098f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80098fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009900:	fa23 f707 	lsr.w	r7, r3, r7
 8009904:	4207      	tst	r7, r0
 8009906:	d0f3      	beq.n	80098f0 <floor+0x98>
 8009908:	a30f      	add	r3, pc, #60	; (adr r3, 8009948 <floor+0xf0>)
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	f7f6 fd8f 	bl	8000430 <__adddf3>
 8009912:	2200      	movs	r2, #0
 8009914:	2300      	movs	r3, #0
 8009916:	f7f6 ffbf 	bl	8000898 <__aeabi_dcmpgt>
 800991a:	2800      	cmp	r0, #0
 800991c:	d0bf      	beq.n	800989e <floor+0x46>
 800991e:	2c00      	cmp	r4, #0
 8009920:	da02      	bge.n	8009928 <floor+0xd0>
 8009922:	2e14      	cmp	r6, #20
 8009924:	d103      	bne.n	800992e <floor+0xd6>
 8009926:	3401      	adds	r4, #1
 8009928:	ea25 0507 	bic.w	r5, r5, r7
 800992c:	e7b7      	b.n	800989e <floor+0x46>
 800992e:	2301      	movs	r3, #1
 8009930:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009934:	fa03 f606 	lsl.w	r6, r3, r6
 8009938:	4435      	add	r5, r6
 800993a:	4545      	cmp	r5, r8
 800993c:	bf38      	it	cc
 800993e:	18e4      	addcc	r4, r4, r3
 8009940:	e7f2      	b.n	8009928 <floor+0xd0>
 8009942:	2500      	movs	r5, #0
 8009944:	462c      	mov	r4, r5
 8009946:	e7aa      	b.n	800989e <floor+0x46>
 8009948:	8800759c 	.word	0x8800759c
 800994c:	7e37e43c 	.word	0x7e37e43c
 8009950:	bff00000 	.word	0xbff00000
 8009954:	000fffff 	.word	0x000fffff

08009958 <_init>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	bf00      	nop
 800995c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995e:	bc08      	pop	{r3}
 8009960:	469e      	mov	lr, r3
 8009962:	4770      	bx	lr

08009964 <_fini>:
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009966:	bf00      	nop
 8009968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996a:	bc08      	pop	{r3}
 800996c:	469e      	mov	lr, r3
 800996e:	4770      	bx	lr
